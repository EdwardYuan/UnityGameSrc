namespace App
{
    using GameLogic;
    using PlayerView;
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    public static class ConfigPerks
    {
        public static List<PerkType> ALL_PERKS;
        public static Dictionary<AiBehaviourType, List<PerkType>> BOSS_AI_PERK_POOLS;
        public static Dictionary<DungeonBoostType, List<PerkType>> DUNGEON_BOOST_PERK_POOLS;
        public static Dictionary<int, int> NUM_RANDOM_PERKS_PER_ITEM_RARITY;
        public static Dictionary<ItemType, List<PerkType>> RANDOM_ITEM_PERK_TYPES;
        public static Dictionary<PerkType, SharedData> SHARED_DATA;

        static ConfigPerks()
        {
            Dictionary<ItemType, List<PerkType>> dictionary = new Dictionary<ItemType, List<PerkType>>(new ItemTypeBoxAvoidanceComparer());
            List<PerkType> list = new List<PerkType>();
            list.Add(PerkType.AtkBonusSpeed);
            list.Add(PerkType.AtkBonusCritChance);
            list.Add(PerkType.AtkBonusCritMultiplier);
            list.Add(PerkType.DamageBonusAll);
            list.Add(PerkType.KillDamage);
            list.Add(PerkType.KillArmor);
            list.Add(PerkType.KillAttackSpeed);
            dictionary.Add(ItemType.Weapon, list);
            list = new List<PerkType>();
            list.Add(PerkType.LifeBonus);
            list.Add(PerkType.ArmorBlockAll);
            list.Add(PerkType.AuraLowHpDamage);
            list.Add(PerkType.AuraLowHpArmor);
            list.Add(PerkType.AuraLowHpAttackSpeed);
            list.Add(PerkType.WoundedDamage);
            list.Add(PerkType.WoundedArmor);
            list.Add(PerkType.WoundedAttackSpeed);
            dictionary.Add(ItemType.Armor, list);
            list = new List<PerkType>();
            list.Add(PerkType.AtkBonusSpeed);
            list.Add(PerkType.AtkBonusCritChance);
            list.Add(PerkType.AtkBonusCritMultiplier);
            list.Add(PerkType.LifeBonus);
            list.Add(PerkType.ArmorBlockAll);
            list.Add(PerkType.DamageBonusAll);
            list.Add(PerkType.PostSkillUseDamage);
            list.Add(PerkType.PostSkillUseArmor);
            list.Add(PerkType.PostSkillUseAttackSpeed);
            dictionary.Add(ItemType.Cloak, list);
            RANDOM_ITEM_PERK_TYPES = dictionary;
            Dictionary<int, int> dictionary2 = new Dictionary<int, int>();
            dictionary2.Add(0, 0);
            dictionary2.Add(1, 1);
            dictionary2.Add(2, 2);
            dictionary2.Add(3, 2);
            dictionary2.Add(4, 0);
            NUM_RANDOM_PERKS_PER_ITEM_RARITY = dictionary2;
            Dictionary<AiBehaviourType, List<PerkType>> dictionary3 = new Dictionary<AiBehaviourType, List<PerkType>>(new AiBehaviourTypeBoxAvoidanceComparer());
            list = new List<PerkType>();
            list.Add(PerkType.BossResistWeaponDamage);
            list.Add(PerkType.BossResistSkillDamage);
            list.Add(PerkType.BossAuraIce);
            list.Add(PerkType.BossBonusLife);
            list.Add(PerkType.BossBonusSpeed);
            list.Add(PerkType.BossLifesteal);
            list.Add(PerkType.BossAuraCooldownSlow);
            dictionary3.Add(AiBehaviourType.BossSummoner, list);
            list = new List<PerkType>();
            list.Add(PerkType.BossResistWeaponDamage);
            list.Add(PerkType.BossResistSkillDamage);
            list.Add(PerkType.BossCriticalHit);
            list.Add(PerkType.BossDodge);
            list.Add(PerkType.BossStun);
            dictionary3.Add(AiBehaviourType.BossCaster, list);
            BOSS_AI_PERK_POOLS = dictionary3;
            Dictionary<DungeonBoostType, List<PerkType>> dictionary4 = new Dictionary<DungeonBoostType, List<PerkType>>(new DungeonBoostTypeBoxAvoidanceComparer());
            list = new List<PerkType>();
            list.Add(PerkType.DungeonBoostEnrageEnemies);
            list.Add(PerkType.DungeonBoostPoison);
            dictionary4.Add(DungeonBoostType.BuffBox, list);
            list = new List<PerkType>();
            list.Add(PerkType.DungeonBoostExplosion);
            dictionary4.Add(DungeonBoostType.ExplosiveBox, list);
            DUNGEON_BOOST_PERK_POOLS = dictionary4;
            ALL_PERKS = LangUtil.GetEnumValuesWithException<PerkType>(PerkType.NONE);
            Dictionary<PerkType, SharedData> dictionary5 = new Dictionary<PerkType, SharedData>(new PerkTypeBoxAvoidanceComparer());
            SharedData data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.ModifierMin = 0.75f;
            data.ModifierMax = 0.75f;
            data.Description = ConfigLoca.PERK_ALLY_BONUS_ATTACKS_PER_SECOND_DESCRIPTION;
            dictionary5.Add(PerkType.AllyBonusAttacksPerSecond, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.Description = ConfigLoca.PERK_ALLY_BONUS_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ALLY_BONUS_DAMAGE_SHORT_DESCRIPTION;
            SpriteAtlasEntry entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade009";
            data.Sprite = entry;
            dictionary5.Add(PerkType.AllyBonusDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.Description = ConfigLoca.PERK_ALLY_BONUS_SPEED_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ALLY_BONUS_SPEED_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.AllyBonusSpeed, data);
            data = new SharedData();
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ALLY_HEAL_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ALLY_HEAL_SHORT_DESCRIPTION;
            data.HideDescriptionModifierPrefix = true;
            dictionary5.Add(PerkType.AllyHeal, data);
            data = new SharedData();
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.1f;
            data.Description = ConfigLoca.PERK_ARMOR_BLOCK_ALL_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ARMOR_BLOCK_ALL_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade006";
            data.Sprite = entry;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.ArmorBlockAll, data);
            data = new SharedData();
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.1f;
            data.Description = ConfigLoca.PERK_ARMOR_BLOCK_MELEE_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.ArmorBlockMelee, data);
            data = new SharedData();
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.1f;
            data.Description = ConfigLoca.PERK_ARMOR_BLOCK_RANGED_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.ArmorBlockRanged, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.UniversalArmorBonus;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ARMOR_BONUS_ALL_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ARMOR_BONUS_ALL_SHORT_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.ArmorBonusAll, data);
            data = new SharedData();
            data.ModifierMin = 0.15f;
            data.ModifierMax = 0.25f;
            data.Description = ConfigLoca.PERK_ARMOR_BONUS_BOSS_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.ArmorBonusBoss, data);
            data = new SharedData();
            data.ModifierMin = 0.15f;
            data.ModifierMax = 0.25f;
            data.Description = ConfigLoca.PERK_ARMOR_BONUS_MELEE_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.ArmorBonusMelee, data);
            data = new SharedData();
            data.ModifierMin = 0.15f;
            data.ModifierMax = 0.25f;
            data.Description = ConfigLoca.PERK_ARMOR_BONUS_RANGED_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.ArmorBonusRanged, data);
            data = new SharedData();
            data.CharacterTypeArmorBonus = GameLogic.CharacterType.Skeleton;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ARMOR_BONUS_SKELETON_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            data.LinkedToCharacterType = GameLogic.CharacterType.Skeleton;
            dictionary5.Add(PerkType.ArmorBonusSkeleton, data);
            data = new SharedData();
            data.CharacterTypeArmorBonus = GameLogic.CharacterType.Jelly;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ARMOR_BONUS_JELLY_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            data.LinkedToCharacterType = GameLogic.CharacterType.Jelly;
            dictionary5.Add(PerkType.ArmorBonusJelly, data);
            data = new SharedData();
            data.CharacterTypeArmorBonus = GameLogic.CharacterType.Worg;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ARMOR_BONUS_WORG_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            data.LinkedToCharacterType = GameLogic.CharacterType.Worg;
            dictionary5.Add(PerkType.ArmorBonusWorg, data);
            data = new SharedData();
            data.CharacterTypeArmorBonus = GameLogic.CharacterType.Pygmy;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ARMOR_BONUS_PYGMI_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            data.LinkedToCharacterType = GameLogic.CharacterType.Pygmy;
            dictionary5.Add(PerkType.ArmorBonusPygmi, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.CleaveDamagePct;
            data.ModifierMin = 0.5f;
            data.ModifierMax = 1f;
            data.Description = ConfigLoca.PERK_ATK_BONUS_CLEAVE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ATK_BONUS_CLEAVE_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade008";
            data.Sprite = entry;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.AtkBonusCleave, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.CriticalHitChancePct;
            data.ModifierMin = 0.02f;
            data.ModifierMax = 0.05f;
            data.Description = ConfigLoca.PERK_ATK_BONUS_CRITCHANCE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ATK_BONUS_CRITCHANCE_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade011";
            data.Sprite = entry;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.AtkBonusCritChance, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.CriticalHitMultiplier;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 1.5f;
            data.Description = ConfigLoca.PERK_ATK_BONUS_CRITMULTIPLIER_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ATK_BONUS_CRITMULTIPLIER_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade008";
            data.Sprite = entry;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.AtkBonusCritMultiplier, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.AttacksPerSecond;
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.3f;
            data.Description = ConfigLoca.PERK_ATK_BONUS_SPEED_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_ATK_BONUS_SPEED_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade003";
            data.Sprite = entry;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.AtkBonusSpeed, data);
            data = new SharedData();
            data.ModifierMin = 0.03f;
            data.ModifierMax = 0.03f;
            data.Stuns = true;
            data.DurationSeconds = 1.5f;
            data.Description = ConfigLoca.PERK_ATK_PROC_STUN_DESCRIPTION;
            dictionary5.Add(PerkType.AtkProcStun, data);
            data = new SharedData();
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.05f;
            data.Description = ConfigLoca.PERK_ATK_PROC_KNOCKBACK_DESCRIPTION;
            dictionary5.Add(PerkType.AtkProcKnockback, data);
            data = new SharedData();
            data.ModifierMin = 0.333f;
            data.ModifierMax = 0.333f;
            data.Description = ConfigLoca.PERK_SUMMON_CRITTER_ON_KILL_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.SummonCritterOnKill, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.2f;
            data.ModifierMax = 0.2f;
            data.HideTimerInHud = true;
            data.ShowModifierInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_AURA_DAMAGE_BONUS_DESCRIPTION;
            dictionary5.Add(PerkType.AuraDamageBonus, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.BuffBaseStat2 = BaseStatProperty.MovementSpeed;
            data.ModifierMin = GlobalFrostEffect.SpeedModifier;
            data.ModifierMax = GlobalFrostEffect.SpeedModifier;
            data.EffectType = GlobalFrostEffect.EffectType;
            data.HideTimerInHud = true;
            data.Description = ConfigLoca.PERK_AURA_ICE_DESCRIPTION;
            dictionary5.Add(PerkType.AuraIce, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 1f;
            data.ModifierMax = 1f;
            data.HideTimerInHud = true;
            data.Description = ConfigLoca.PERK_AURA_FULL_HP_DAMAGE_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.AuraFullHpDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.UniversalArmorBonus;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.HideTimerInHud = true;
            data.Threshold = 0.5f;
            data.Description = ConfigLoca.PERK_AURA_LOW_HP_ARMOR_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.AuraLowHpArmor, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.25f;
            data.HideTimerInHud = true;
            data.Threshold = 0.5f;
            data.Description = ConfigLoca.PERK_AURA_LOW_HP_ATTACK_SPEED_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.AuraLowHpAttackSpeed, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.BuffBaseStat2 = BaseStatProperty.SkillDamage;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.HideTimerInHud = true;
            data.Threshold = 0.5f;
            data.Description = ConfigLoca.PERK_AURA_LOW_HP_DAMAGE_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.AuraLowHpDamage, data);
            data = new SharedData();
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.1f;
            data.HideTimerInHud = true;
            data.Threshold = 0.5f;
            data.Description = ConfigLoca.PERK_AURA_LOW_HP_DODGE_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.AuraLowHpDodge, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BERSERK_DESCRIPTION;
            dictionary5.Add(PerkType.Berserk, data);
            data = new SharedData();
            data.ModifierMin = 2f;
            data.ModifierMax = 2f;
            data.Description = ConfigLoca.PERK_BERSERKERS_BLOOD_DESCRIPTION;
            dictionary5.Add(PerkType.BerserkersBlood, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_RESIST_WEAPON_DAMAGE_DESCRIPTION;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            dictionary5.Add(PerkType.BossResistWeaponDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_RESIST_SKILL_DAMAGE_DESCRIPTION;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            dictionary5.Add(PerkType.BossResistSkillDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_RESIST_CRITICAL_DAMAGE_DESCRIPTION;
            dictionary5.Add(PerkType.BossResistCriticalDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_RESIST_LIFESTEAL_DESCRIPTION;
            dictionary5.Add(PerkType.BossResistLifesteal, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_CRITICAL_HIT_DESCRIPTION;
            data.ModifierMin = 3f;
            data.ModifierMax = 3f;
            dictionary5.Add(PerkType.BossCriticalHit, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_DODGE_DESCRIPTION;
            data.ModifierMin = 3f;
            data.ModifierMax = 3f;
            dictionary5.Add(PerkType.BossDodge, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_STUN_DESCRIPTION;
            data.DurationSeconds = 1f;
            data.ModifierMin = 3f;
            data.ModifierMax = 3f;
            data.Stuns = true;
            dictionary5.Add(PerkType.BossStun, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.BuffBaseStat2 = BaseStatProperty.MovementSpeed;
            data.Description = ConfigLoca.PERK_BOSS_AURA_ICE_DESCRIPTION;
            data.EffectType = GlobalFrostEffect.EffectType;
            data.ModifierMin = -0.25f;
            data.ModifierMax = -0.25f;
            dictionary5.Add(PerkType.BossAuraIce, data);
            data = new SharedData();
            data.AllSkillsCooldownBonus = true;
            data.Description = ConfigLoca.PERK_BOSS_AURA_COOLDOWN_SLOW_DESCRIPTION;
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            dictionary5.Add(PerkType.BossAuraCooldownSlow, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.Description = ConfigLoca.PERK_BOSS_AURA_DAMAGE_OVER_TIME_DESCRIPTION;
            data.ModifierMin = 0.03f;
            data.ModifierMax = 0.03f;
            data.ModifierBuildupTick = 1f;
            dictionary5.Add(PerkType.BossAuraDamageOverTime, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_BONUS_DAMAGE_DESCRIPTION;
            data.ModifierMin = 0.4f;
            data.ModifierMax = 0.4f;
            dictionary5.Add(PerkType.BossBonusDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_BONUS_SKILL_DAMAGE_DESCRIPTION;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            dictionary5.Add(PerkType.BossBonusSkillDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_BONUS_WEAPON_DAMAGE_DESCRIPTION;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            dictionary5.Add(PerkType.BossBonusWeaponDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_BONUS_LIFE_DESCRIPTION;
            data.ModifierMin = 0.4f;
            data.ModifierMax = 0.4f;
            dictionary5.Add(PerkType.BossBonusLife, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_BONUS_SPEED_DESCRIPTION;
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            dictionary5.Add(PerkType.BossBonusSpeed, data);
            data = new SharedData();
            data.AllSkillsCooldownBonus = true;
            data.Description = ConfigLoca.PERK_BOSS_BONUS_COOLDOWN_DESCRIPTION;
            data.ModifierMin = -0.25f;
            data.ModifierMax = -0.25f;
            dictionary5.Add(PerkType.BossBonusCooldown, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_BOSS_LIFESTEAL_DESCRIPTION;
            data.ModifierMin = 1.25f;
            data.ModifierMax = 1.25f;
            dictionary5.Add(PerkType.BossLifesteal, data);
            data = new SharedData();
            data.ModifierMin = 1f;
            data.ModifierMax = 1f;
            data.Description = ConfigLoca.PERK_BLINK_TRAVEL_DESCRIPTION;
            dictionary5.Add(PerkType.BlinkTravel, data);
            data = new SharedData();
            data.ModifierMin = 3f;
            data.ModifierMax = 3f;
            data.Description = ConfigLoca.PET_PERK_CHESTER_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PET_PERK_CHESTER_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.ChesterChestDrop, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_COIN_BONUS_ACTIVE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_COIN_BONUS_ACTIVE_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.CoinBonusActive, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_COIN_BONUS_START_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_COIN_BONUS_START_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade014";
            data.Sprite = entry;
            dictionary5.Add(PerkType.CoinBonusStart, data);
            data = new SharedData();
            data.CharacterTypeCoinBonus = GameLogic.CharacterType.Skeleton;
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_COIN_BONUS_SKELETON_DESCRIPTION;
            data.LinkedToCharacterType = GameLogic.CharacterType.Skeleton;
            dictionary5.Add(PerkType.CoinBonusSkeleton, data);
            data = new SharedData();
            data.CharacterTypeCoinBonus = GameLogic.CharacterType.Jelly;
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_COIN_BONUS_JELLY_DESCRIPTION;
            data.LinkedToCharacterType = GameLogic.CharacterType.Jelly;
            dictionary5.Add(PerkType.CoinBonusJelly, data);
            data = new SharedData();
            data.CharacterTypeCoinBonus = GameLogic.CharacterType.Worg;
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_COIN_BONUS_WORG_DESCRIPTION;
            data.LinkedToCharacterType = GameLogic.CharacterType.Worg;
            dictionary5.Add(PerkType.CoinBonusWorg, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_COIN_BONUS_PASSIVE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_COIN_BONUS_PASSIVE_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade015";
            data.Sprite = entry;
            dictionary5.Add(PerkType.CoinBonusPassive, data);
            data = new SharedData();
            data.CharacterTypeCoinBonus = GameLogic.CharacterType.Pygmy;
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_COIN_BONUS_PYGMI_DESCRIPTION;
            data.LinkedToCharacterType = GameLogic.CharacterType.Pygmy;
            dictionary5.Add(PerkType.CoinBonusPygmi, data);
            data = new SharedData();
            data.ModifierMin = 1f;
            data.ModifierMax = 1f;
            data.Description = ConfigLoca.PERK_COIN_EXPLOSION_DESCRIPTION;
            dictionary5.Add(PerkType.CoinExplosion, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_COOLDOWN_BONUS_BOSSES_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_COOLDOWN_BONUS_BOSSES_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "uiz_sprite_rankup";
            data.Sprite = entry;
            dictionary5.Add(PerkType.CooldownBonusBosses, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_CORE_BONUS_COINS_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_CORE_BONUS_COINS_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade013";
            data.Sprite = entry;
            dictionary5.Add(PerkType.CoreBonusCoins, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_CORE_BONUS_DAMAGE_PER_HIT_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_CORE_BONUS_DAMAGE_PER_HIT_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade007";
            data.Sprite = entry;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.CoreBonusDamagePerHit, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_CORE_BONUS_FRENZY_DURATION_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_CORE_BONUS_FRENZY_DURATION_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade023";
            data.Sprite = entry;
            dictionary5.Add(PerkType.CoreBonusFrenzyDuration, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_CORE_BONUS_LIFE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_CORE_BONUS_LIFE_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade005";
            data.Sprite = entry;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.CoreBonusLife, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_CORE_BONUS_SKILL_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_CORE_BONUS_SKILL_DAMAGE_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade010";
            data.Sprite = entry;
            data.SmallSprite = "icon_mini_spell";
            dictionary5.Add(PerkType.CoreBonusSkillDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_CORE_BONUS_TOKENS_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_CORE_BONUS_TOKENS_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade024";
            data.Sprite = entry;
            dictionary5.Add(PerkType.CoreBonusTokens, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_CRIT_EXPLOSION_DESCRIPTION;
            dictionary5.Add(PerkType.CritExplosion, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.BuffBaseStat2 = BaseStatProperty.MovementSpeed;
            data.ModifierMin = GlobalFrostEffect.SpeedModifier;
            data.ModifierMax = GlobalFrostEffect.SpeedModifier;
            data.EffectType = GlobalFrostEffect.EffectType;
            data.DurationSeconds = 1f;
            data.Description = ConfigLoca.PERK_CRIT_KNOCKBACK_SLOW_DESCRIPTION;
            dictionary5.Add(PerkType.CritKnockbackSlow, data);
            data = new SharedData();
            data.Stuns = true;
            data.DurationSeconds = 1.5f;
            data.Description = ConfigLoca.PERK_CRIT_STUN_DESCRIPTION;
            dictionary5.Add(PerkType.CritStun, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_DAMAGE_BONUS_ALL_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_AURA_DAMAGE_BONUS_SHORT_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.DamageBonusAll, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_DAMAGE_DEFLECTION_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_DAMAGE_DEFLECTION_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade004";
            data.Sprite = entry;
            dictionary5.Add(PerkType.DamageDeflection, data);
            data = new SharedData();
            data.TargetsEnemies = true;
            dictionary5.Add(PerkType.DungeonBoostEnrageEnemies, data);
            data = new SharedData();
            data.LinkedToSkill = SkillType.Explosion;
            dictionary5.Add(PerkType.DungeonBoostExplosion, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.BuffBaseStat2 = BaseStatProperty.MovementSpeed;
            data.ModifierMin = GlobalFrostEffect.SpeedModifier;
            data.ModifierMax = GlobalFrostEffect.SpeedModifier;
            data.EffectType = GlobalFrostEffect.EffectType;
            data.DurationSeconds = GlobalFrostEffect.Duration;
            data.TargetsEnemies = true;
            dictionary5.Add(PerkType.DungeonBoostFrost, data);
            data = new SharedData();
            data.ModifierMin = GlobalPoisonEffect.SkillDamagePerSecond;
            data.ModifierMax = GlobalPoisonEffect.SkillDamagePerSecond;
            data.DamagePerSecond = true;
            data.EffectType = GlobalPoisonEffect.EffectType;
            data.DurationSeconds = GlobalPoisonEffect.Duration;
            data.TargetsEnemies = true;
            dictionary5.Add(PerkType.DungeonBoostPoison, data);
            data = new SharedData();
            data.Stuns = true;
            data.DurationSeconds = 1.5f;
            data.TargetsEnemies = true;
            dictionary5.Add(PerkType.DungeonBoostStun, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_DUST_BONUS_UNIVERSAL_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_DUST_BONUS_UNIVERSAL_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade010";
            data.Sprite = entry;
            dictionary5.Add(PerkType.DustBonusUniversal, data);
            data = new SharedData();
            data.ModifierMin = 0.15f;
            data.ModifierMax = 0.25f;
            data.Description = ConfigLoca.PERK_ELEMENT_BONUS_BOSS_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.ElementBonusBoss, data);
            data = new SharedData();
            data.CharacterTypeDmgBonus = GameLogic.CharacterType.Skeleton;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ELEMENT_BONUS_SKELETON_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            data.LinkedToCharacterType = GameLogic.CharacterType.Skeleton;
            dictionary5.Add(PerkType.ElementBonusSkeleton, data);
            data = new SharedData();
            data.CharacterTypeDmgBonus = GameLogic.CharacterType.Jelly;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ELEMENT_BONUS_JELLY_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            data.LinkedToCharacterType = GameLogic.CharacterType.Jelly;
            dictionary5.Add(PerkType.ElementBonusJelly, data);
            data = new SharedData();
            data.CharacterTypeDmgBonus = GameLogic.CharacterType.Worg;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ELEMENT_BONUS_WORG_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            data.LinkedToCharacterType = GameLogic.CharacterType.Worg;
            dictionary5.Add(PerkType.ElementBonusWorg, data);
            data = new SharedData();
            data.CharacterTypeDmgBonus = GameLogic.CharacterType.Pygmy;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_ELEMENT_BONUS_PYGMI_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            data.LinkedToCharacterType = GameLogic.CharacterType.Pygmy;
            dictionary5.Add(PerkType.ElementBonusPygmi, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_EVASION_DESCRIPTION;
            dictionary5.Add(PerkType.Evasion, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.UniversalXpBonus;
            data.Description = ConfigLoca.PERK_EXP_BONUS_UNIVERSAL_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_EXP_BONUS_UNIVERSAL_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade025";
            data.Sprite = entry;
            dictionary5.Add(PerkType.ExpBonusUniversal, data);
            data = new SharedData();
            data.CharacterTypeXpBonus = GameLogic.CharacterType.Skeleton;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.1f;
            data.Description = ConfigLoca.PERK_EXP_BONUS_SKELETON_DESCRIPTION;
            data.LinkedToCharacterType = GameLogic.CharacterType.Skeleton;
            dictionary5.Add(PerkType.ExpBonusSkeleton, data);
            data = new SharedData();
            data.CharacterTypeXpBonus = GameLogic.CharacterType.Jelly;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.1f;
            data.Description = ConfigLoca.PERK_EXP_BONUS_JELLY_DESCRIPTION;
            data.LinkedToCharacterType = GameLogic.CharacterType.Jelly;
            dictionary5.Add(PerkType.ExpBonusJelly, data);
            data = new SharedData();
            data.CharacterTypeXpBonus = GameLogic.CharacterType.Worg;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.1f;
            data.Description = ConfigLoca.PERK_EXP_BONUS_WORG_DESCRIPTION;
            data.LinkedToCharacterType = GameLogic.CharacterType.Worg;
            dictionary5.Add(PerkType.ExpBonusWorg, data);
            data = new SharedData();
            data.CharacterTypeXpBonus = GameLogic.CharacterType.Pygmy;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.1f;
            data.Description = ConfigLoca.PERK_EXP_BONUS_PYGMI_DESCRIPTION;
            data.LinkedToCharacterType = GameLogic.CharacterType.Pygmy;
            dictionary5.Add(PerkType.ExpBonusPygmi, data);
            data = new SharedData();
            data.ModifierMin = 1f;
            data.ModifierMax = 1f;
            data.Description = ConfigLoca.PERK_EXP_EXPLOSION_DESCRIPTION;
            dictionary5.Add(PerkType.ExpExplosion, data);
            data = new SharedData();
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_EXTENDED_SUMMON_DESCRIPTION;
            dictionary5.Add(PerkType.ExtendedSummon, data);
            dictionary5.Add(PerkType.ExtraSkillChargeClone, new SharedData());
            dictionary5.Add(PerkType.ExtraSkillChargeSlam, new SharedData());
            data = new SharedData();
            data.ExtraSkillCharge = SkillType.Whirlwind;
            data.Description = ConfigLoca.PERK_EXTRA_SKILL_CHARGE_WHIRLWIND_DESCRIPTION;
            data.LinkedToSkill = SkillType.Whirlwind;
            dictionary5.Add(PerkType.ExtraSkillChargeWhirlwind, data);
            dictionary5.Add(PerkType.ExtraSkillChargeLeap, new SharedData());
            data = new SharedData();
            data.ExtraSkillCharge = SkillType.Omnislash;
            data.Description = ConfigLoca.PERK_EXTRA_SKILL_CHARGE_OMNISLASH_DESCRIPTION;
            data.LinkedToSkill = SkillType.Omnislash;
            dictionary5.Add(PerkType.ExtraSkillChargeOmnislash, data);
            data = new SharedData();
            data.ExtraSkillCharge = SkillType.Implosion;
            data.Description = ConfigLoca.PERK_EXTRA_SKILL_CHARGE_IMPLOSION_DESCRIPTION;
            data.LinkedToSkill = SkillType.Implosion;
            dictionary5.Add(PerkType.ExtraSkillChargeImplosion, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_FULL_SPLASH_DAMAGE_DESCRIPTION;
            dictionary5.Add(PerkType.FullSplashDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_ITEM_UPGRADE_COSTBONUS_DESCRIPTION;
            dictionary5.Add(PerkType.ItemUpgradeCostBonus, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.15f;
            data.DurationSeconds = 3f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_KILL_ATTACK_SPEED_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.KillAttackSpeed, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.Life;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.3f;
            data.DurationSeconds = 3f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_KILL_ARMOR_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.KillArmor, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.CriticalHitChancePct;
            data.ModifierMin = 0.02f;
            data.ModifierMax = 0.02f;
            data.DurationSeconds = 3f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_KILL_CRIT_CHANCE_DESCRIPTION;
            dictionary5.Add(PerkType.KillCritChance, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.BuffBaseStat2 = BaseStatProperty.SkillDamage;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.3f;
            data.DurationSeconds = 3f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_KILL_DAMAGE_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.KillDamage, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.Life;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_LIFE_BONUS_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_LIFE_BONUS_SHORT_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.LifeBonus, data);
            data = new SharedData();
            data.ModifierMin = 0.2f;
            data.ModifierMax = 0.2f;
            data.Description = ConfigLoca.PERK_LIFE_STEAL_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_LIFE_STEAL_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade026";
            data.Sprite = entry;
            dictionary5.Add(PerkType.Lifesteal, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_LUCK_CHEST_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_LUCK_CHEST_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade007";
            data.Sprite = entry;
            dictionary5.Add(PerkType.LuckChest, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_LUCK_ITEM_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_LUCK_ITEM_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade007";
            data.Sprite = entry;
            dictionary5.Add(PerkType.LuckItem, data);
            data = new SharedData();
            data.AllSkillsCooldownBonus = true;
            data.Description = ConfigLoca.PERK_MANA_BONUS_ALL_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_MANA_BONUS_ALL_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade002";
            data.Sprite = entry;
            dictionary5.Add(PerkType.ManaBonusAll, data);
            data = new SharedData();
            data.ModifierMin = 1.5f;
            data.ModifierMax = 1.5f;
            data.Description = ConfigLoca.PERK_MASS_DAMAGE_DEFLECTION_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.MassDamageDeflection, data);
            data = new SharedData();
            data.BaseStat = BaseStatProperty.MovementSpeed;
            data.ModifierMin = 0.2f;
            data.ModifierMax = 0.2f;
            data.Description = ConfigLoca.PERK_MOVEMENT_BONUS_DESCRIPTION;
            dictionary5.Add(PerkType.MovementBonus, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_MULTIKILL_COOLDOWN_RESET_DESCRIPTION;
            dictionary5.Add(PerkType.MultikillCooldownReset, data);
            data = new SharedData();
            data.DurationSeconds = 4f;
            data.EffectType = EffectType.Boost_Shield;
            data.Description = ConfigLoca.PERK_MULTIKILL_SHIELD_DESCRIPTION;
            dictionary5.Add(PerkType.MultikillShield, data);
            data = new SharedData();
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.05f;
            data.Description = ConfigLoca.PERK_PASSIVE_DAMAGE_DESCRIPTION;
            dictionary5.Add(PerkType.PassiveDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.Description = ConfigLoca.PERK_PET_BONUS_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_PET_BONUS_DAMAGE_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade001";
            data.Sprite = entry;
            dictionary5.Add(PerkType.PetBonusDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.BuffBaseStat2 = BaseStatProperty.SkillDamage;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.25f;
            data.DurationSeconds = 7f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_DAMAGE_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.PostSkillUseDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.15f;
            data.DurationSeconds = 7f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_ATTACK_SPEED_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.PostSkillUseAttackSpeed, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.UniversalArmorBonus;
            data.ModifierMin = 0.1f;
            data.ModifierMax = 0.25f;
            data.DurationSeconds = 7f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_ARMOR_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.PostSkillUseArmor, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            data.DurationSeconds = 5f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_WHIRLWIND_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_POST_SKILL_USE_WHIRLWIND_DAMAGE_SHORT_DESCRIPTION;
            data.LinkedToSkill = SkillType.Whirlwind;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill001";
            data.Sprite = entry;
            dictionary5.Add(PerkType.PostSkillUseWhirlwindDamage, data);
            dictionary5.Add(PerkType.PostSkillUseLeapCoinExplosion, new SharedData());
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            data.DurationSeconds = 5f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_LEAP_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_POST_SKILL_USE_LEAP_DAMAGE_SHORT_DESCRIPTION;
            data.LinkedToSkill = SkillType.Leap;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill002";
            data.Sprite = entry;
            dictionary5.Add(PerkType.PostSkillUseLeapDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            data.DurationSeconds = 5f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_CLONE_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_POST_SKILL_USE_CLONE_DAMAGE_SHORT_DESCRIPTION;
            data.LinkedToSkill = SkillType.Clone;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill003";
            data.Sprite = entry;
            dictionary5.Add(PerkType.PostSkillUseCloneDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            data.DurationSeconds = 5f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_SLAM_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_POST_SKILL_USE_SLAM_DAMAGE_SHORT_DESCRIPTION;
            data.LinkedToSkill = SkillType.Slam;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill015";
            data.Sprite = entry;
            dictionary5.Add(PerkType.PostSkillUseSlamDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            data.DurationSeconds = 5f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_OMNISLASH_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_POST_SKILL_USE_OMNISLASH_DAMAGE_SHORT_DESCRIPTION;
            data.LinkedToSkill = SkillType.Omnislash;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill014";
            data.Sprite = entry;
            dictionary5.Add(PerkType.PostSkillUseOmnislashDamage, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            data.DurationSeconds = 5f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_POST_SKILL_USE_IMPLOSION_DAMAGE_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_POST_SKILL_USE_IMPLOSION_DAMAGE_SHORT_DESCRIPTION;
            data.LinkedToSkill = SkillType.Implosion;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill016";
            data.Sprite = entry;
            dictionary5.Add(PerkType.PostSkillUseImplosionDamage, data);
            data = new SharedData();
            data.ModifierMin = 0.3f;
            data.ModifierMax = 0.3f;
            data.Description = ConfigLoca.PERK_RANGED_DAMAGE_DEFLECTION_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.RangedDamageDeflection, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.UniversalArmorBonus;
            data.ModifierMin = 0.75f;
            data.ModifierMax = 1.25f;
            data.DurationSeconds = 10f;
            data.Description = ConfigLoca.PERK_REVIVE_ARMOR_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.ReviveArmor, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.ModifierMin = 0.75f;
            data.ModifierMax = 1.25f;
            data.HideTimerInHud = true;
            data.DurationSeconds = 10f;
            data.Description = ConfigLoca.PERK_REVIVE_DAMAGE_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.ReviveDamage, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_RUNESTONE_UPGRADE_COST_BONUS_DESCRIPTION;
            dictionary5.Add(PerkType.RunestoneUpgradeCostBonus, data);
            data = new SharedData();
            data.ModifierMin = 0.5f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_SECOND_CHANCE_DESCRIPTION;
            dictionary5.Add(PerkType.SecondChance, data);
            data = new SharedData();
            data.SkillDamageBonus = SkillType.Whirlwind;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_SKILL_BONUS_WHIRLWIND_DESCRIPTION;
            data.SmallSprite = "icon_mini_spell";
            data.LinkedToSkill = SkillType.Whirlwind;
            dictionary5.Add(PerkType.SkillBonusWhirlwind, data);
            data = new SharedData();
            data.SkillDamageBonus = SkillType.Leap;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_SKILL_BONUS_LEAP_DESCRIPTION;
            data.SmallSprite = "icon_mini_spell";
            data.LinkedToSkill = SkillType.Leap;
            dictionary5.Add(PerkType.SkillBonusLeap, data);
            data = new SharedData();
            data.SkillDamageBonus = SkillType.Omnislash;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_SKILL_BONUS_OMNISLASH_DESCRIPTION;
            data.SmallSprite = "icon_mini_spell";
            data.LinkedToSkill = SkillType.Omnislash;
            dictionary5.Add(PerkType.SkillBonusOmnislash, data);
            data = new SharedData();
            data.SkillDamageBonus = SkillType.Slam;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_SKILL_BONUS_SLAM_DESCRIPTION;
            data.SmallSprite = "icon_mini_spell";
            data.LinkedToSkill = SkillType.Slam;
            dictionary5.Add(PerkType.SkillBonusSlam, data);
            data = new SharedData();
            data.SkillDamageBonus = SkillType.Clone;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_SKILL_BONUS_CLONE_DESCRIPTION;
            data.SmallSprite = "icon_mini_spell";
            data.LinkedToSkill = SkillType.Clone;
            dictionary5.Add(PerkType.SkillBonusClone, data);
            data = new SharedData();
            data.SkillDamageBonus = SkillType.Implosion;
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.5f;
            data.Description = ConfigLoca.PERK_SKILL_BONUS_IMPLOSION_DESCRIPTION;
            data.SmallSprite = "icon_mini_spell";
            data.LinkedToSkill = SkillType.Implosion;
            dictionary5.Add(PerkType.SkillBonusImplosion, data);
            data = new SharedData();
            data.ModifierMin = 0.075f;
            data.ModifierMax = 0.075f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_CLONE1_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_CLONE1_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_CLONE1_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeClone1, data);
            data = new SharedData();
            data.ExtraSkillCharge = SkillType.Clone;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_CLONE2_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_CLONE2_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_CLONE2_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill003";
            data.Sprite = entry;
            dictionary5.Add(PerkType.SkillUpgradeClone2, data);
            data = new SharedData();
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_CLONE3_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_CLONE3_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_CLONE3_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeClone3, data);
            data = new SharedData();
            data.ModifierMin = 1f;
            data.ModifierMax = 1f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_CLONE4_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_CLONE4_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_CLONE4_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeClone4, data);
            data = new SharedData();
            data.ModifierMin = 35f;
            data.ModifierMax = 38f;
            data.SkillInvulnerability = SkillType.Whirlwind;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND1_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND1_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND1_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeWhirlwind1, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.BuffBaseStat2 = BaseStatProperty.MovementSpeed;
            data.ModifierMin = GlobalFrostEffect.SpeedModifier;
            data.ModifierMax = GlobalFrostEffect.SpeedModifier;
            data.EffectType = GlobalFrostEffect.EffectType;
            data.DurationSeconds = GlobalFrostEffect.Duration;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND2_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND2_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND2_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeWhirlwind2, data);
            data = new SharedData();
            data.ModifierMin = GlobalPoisonEffect.SkillDamagePerSecond;
            data.ModifierMax = GlobalPoisonEffect.SkillDamagePerSecond;
            data.DamagePerSecond = true;
            data.EffectType = GlobalPoisonEffect.EffectType;
            data.DurationSeconds = GlobalPoisonEffect.Duration;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND3_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND3_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND3_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeWhirlwind3, data);
            data = new SharedData();
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND4_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND4_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_WHIRLWIND4_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeWhirlwind4, data);
            data = new SharedData();
            data.ExtraSkillCharge = SkillType.Slam;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_SLAM1_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_SLAM1_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_SLAM1_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeSlam1, data);
            data = new SharedData();
            data.DurationSeconds = 3f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_SLAM2_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_SLAM2_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_SLAM2_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeSlam2, data);
            data = new SharedData();
            data.Stuns = true;
            data.DurationSeconds = 2f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_SLAM3_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_SLAM3_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_SLAM3_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeSlam3, data);
            data = new SharedData();
            data.DurationSeconds = 5f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_SLAM4_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_SLAM4_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_SLAM4_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeSlam4, data);
            data = new SharedData();
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_LEAP1_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_LEAP1_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_LEAP1_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill002";
            data.Sprite = entry;
            dictionary5.Add(PerkType.SkillUpgradeLeap1, data);
            data = new SharedData();
            data.ExtraSkillCharge = SkillType.Leap;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_LEAP2_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_LEAP2_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_LEAP2_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_skill002";
            data.Sprite = entry;
            dictionary5.Add(PerkType.SkillUpgradeLeap2, data);
            data = new SharedData();
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_LEAP3_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_LEAP3_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_LEAP3_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeLeap3, data);
            data = new SharedData();
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_LEAP4_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_LEAP4_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_LEAP4_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeLeap4, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.BuffBaseStat2 = BaseStatProperty.MovementSpeed;
            data.ModifierMin = GlobalFrostEffect.SpeedModifier;
            data.ModifierMax = GlobalFrostEffect.SpeedModifier;
            data.EffectType = GlobalFrostEffect.EffectType;
            data.DurationSeconds = GlobalFrostEffect.Duration;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH1_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH1_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH1_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeOmnislash1, data);
            data = new SharedData();
            data.SkillCooldownBonus = SkillType.Omnislash;
            data.ModifierMin = -0.75f;
            data.ModifierMax = -0.75f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH2_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH2_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH2_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeOmnislash2, data);
            data = new SharedData();
            data.ModifierMin = 0.25f;
            data.ModifierMax = 0.25f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH3_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH3_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH3_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeOmnislash3, data);
            data = new SharedData();
            data.ModifierMin = GlobalPoisonEffect.SkillDamagePerSecond;
            data.ModifierMax = GlobalPoisonEffect.SkillDamagePerSecond;
            data.DamagePerSecond = true;
            data.EffectType = GlobalPoisonEffect.EffectType;
            data.DurationSeconds = GlobalPoisonEffect.Duration;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH4_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH4_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_OMNISLASH4_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeOmnislash4, data);
            data = new SharedData();
            data.ModifierMin = 3f;
            data.ModifierMax = 3f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION1_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION1_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION1_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeImplosion1, data);
            data = new SharedData();
            data.SkillCooldownBonus = SkillType.Implosion;
            data.ModifierMin = -0.5f;
            data.ModifierMax = -0.5f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION2_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION2_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION2_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeImplosion2, data);
            data = new SharedData();
            data.Stuns = true;
            data.ModifierMin = 2f;
            data.ModifierMax = 2f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION3_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION3_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION3_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeImplosion3, data);
            data = new SharedData();
            data.ModifierMin = 0.2f;
            data.ModifierMax = 0.2f;
            data.Name = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION4_NAME;
            data.Description = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION4_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_SKILL_UPGRADE_IMPLOSION4_SHORT_DESCRIPTION;
            dictionary5.Add(PerkType.SkillUpgradeImplosion4, data);
            data = new SharedData();
            data.Description = ConfigLoca.PERK_STARTING_FLOORBONUS_DESCRIPTION;
            data.ShortDescription = ConfigLoca.PERK_STARTING_FLOORBONUS_SHORT_DESCRIPTION;
            entry = new SpriteAtlasEntry();
            entry.AtlasId = "Menu";
            entry.SpriteId = "sprite_upgrade001";
            data.Sprite = entry;
            dictionary5.Add(PerkType.StartingFloorBonus, data);
            data = new SharedData();
            data.ModifierMin = 1f;
            data.ModifierMax = 1f;
            data.Description = ConfigLoca.PERK_SUMMON_COIN_EXPLOSION_DESCRIPTION;
            dictionary5.Add(PerkType.SummonCoinExplosion, data);
            data = new SharedData();
            data.ModifierMin = 0.18f;
            data.ModifierMax = 0.18f;
            data.Description = ConfigLoca.PERK_SUMMON_CRITTER_DESCRIPTION;
            dictionary5.Add(PerkType.SummonCritter, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.UniversalArmorBonus;
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.1f;
            data.DurationSeconds = 3f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_WOUNDED_ARMOR_DESCRIPTION;
            data.SmallSprite = "icon_mini_armor";
            dictionary5.Add(PerkType.WoundedArmor, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.AttacksPerSecond;
            data.ModifierMin = 0.01f;
            data.ModifierMax = 0.05f;
            data.DurationSeconds = 3f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_WOUNDED_ATTACK_SPEED_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.WoundedAttackSpeed, data);
            data = new SharedData();
            data.BuffBaseStat1 = BaseStatProperty.DamagePerHit;
            data.BuffBaseStat2 = BaseStatProperty.SkillDamage;
            data.ModifierMin = 0.05f;
            data.ModifierMax = 0.1f;
            data.DurationSeconds = 3f;
            data.HideTimerInHud = true;
            data.ShowStackedInHud = true;
            data.Description = ConfigLoca.PERK_WOUNDED_DAMAGE_DESCRIPTION;
            data.SmallSprite = "icon_mini_weapon";
            dictionary5.Add(PerkType.WoundedDamage, data);
            dictionary5.Add(PerkType.SkillBonusAll, new SharedData());
            dictionary5.Add(PerkType.CoinBonusAll, new SharedData());
            dictionary5.Add(PerkType.TokenBonusUniversal, new SharedData());
            dictionary5.Add(PerkType.FrenzyDurationBonus, new SharedData());
            dictionary5.Add(PerkType.AtkBonusAll, new SharedData());
            SHARED_DATA = dictionary5;
        }

        public static float GetBestModifier(PerkType perkType)
        {
            SharedData data = SHARED_DATA[perkType];
            if (data.ModifierMax < 0f)
            {
                return data.ModifierMin;
            }
            return data.ModifierMax;
        }

        public static PerkType GetBossPerkType(Player player, string bossId)
        {
            Character character = GameLogic.Binder.CharacterResources.getResource(bossId);
            if (ConfigGameplay.USE_RANDOMIZED_BOSS_PERKS)
            {
                List<PerkType> list = BOSS_AI_PERK_POOLS[character.BossAiBehaviour];
                int num = Mathf.Abs(bossId.GetHashCode()) + player.CumulativeRetiredHeroStats.HeroesRetired;
                int num2 = num % list.Count;
                return list[num2];
            }
            return character.BossPerk;
        }

        public static bool ItemTypeSupportsPerk(ItemType itemType, PerkType perkType)
        {
            List<PerkType> list = RANDOM_ITEM_PERK_TYPES[itemType];
            for (int i = 0; i < list.Count; i++)
            {
                if (((PerkType) list[i]) == perkType)
                {
                    return true;
                }
            }
            return false;
        }

        public static bool PerkIsLinkedToSkill(PerkType perkType, SkillType skillType)
        {
            return (SHARED_DATA[perkType].LinkedToSkill == skillType);
        }

        public static void PreInitialize()
        {
            for (int i = 0; i < ConfigRunestones.RUNESTONES.Length; i++)
            {
                ConfigRunestones.SharedData data = ConfigRunestones.RUNESTONES[i];
                PerkType type = data.PerkInstance.Type;
                SharedData data2 = SHARED_DATA[type];
                data2.LinkedToRunestone = data.Id;
                data2.LinkedToSkill = data.LinkedToSkill;
            }
        }

        public static PerkInstance RollNewPerkInstance(PerkType perkType)
        {
            PerkInstance instance = new PerkInstance();
            instance.Type = perkType;
            instance.Modifier = UnityEngine.Random.Range(SHARED_DATA[perkType].ModifierMin, SHARED_DATA[perkType].ModifierMax);
            return instance;
        }

        public static PerkInstance RollNewRandomItemPerkInstance(ItemType itemType, PerkContainer existingPerks, Player player)
        {
            PerkType nONE = PerkType.NONE;
            for (int i = 0; (nONE == PerkType.NONE) && (i < 0x3e8); i++)
            {
                nONE = LangUtil.GetRandomValueFromList<PerkType>(RANDOM_ITEM_PERK_TYPES[itemType]);
                SharedData data = SHARED_DATA[nONE];
                if ((existingPerks.containsPerkOfType(nONE) || !player.hasUnlockedSkill(data.LinkedToSkill)) || !player.hasEncounteredCharacterType(data.LinkedToCharacterType))
                {
                    nONE = PerkType.NONE;
                }
            }
            if (nONE == PerkType.NONE)
            {
                Debug.LogError("No suitable random perk found for item type, using default perk: " + itemType);
                nONE = RANDOM_ITEM_PERK_TYPES[itemType][0];
            }
            return RollNewPerkInstance(nONE);
        }

        public static class AtkProcKnockback
        {
            public static float KnockbackForceMax = 26f;
            public static float KnockbackForceMin = 24f;
        }

        public static class AuraDamageBonus
        {
            public static float AuraRadius = 5f;
        }

        public static class AuraIce
        {
            public static float AuraRadius = 5f;
        }

        public static class Berserk
        {
            public static float ArmorModifier = -0.33f;
            public static float DamagePerHitModifier = 0.66f;
        }

        public static class BossAuras
        {
            public static float Radius = 5f;
        }

        public static class CoinExplosion
        {
            public static MinMaxInt DropCountMinMax = new MinMaxInt(3, 4);
        }

        public static class CritKnockbackSlow
        {
            public static float KnockbackForceMax = 26f;
            public static float KnockbackForceMin = 24f;
        }

        public static class EnrageEnemies
        {
            public static float AttacksPerSecondModifier = 1f;
            public static float LifeModifier = -0.5f;
        }

        public static class ExpExplosion
        {
            public static MinMaxInt DropCountMinMax = new MinMaxInt(1, 1);
        }

        public static class FullSplashDamage
        {
            public static float BaseCleaveDamagePct = 1f;
            public static float BaseCleaveRange = 5f;
        }

        public static class GlobalFrostEffect
        {
            public static float Duration = 3f;
            public static PlayerView.EffectType EffectType = PlayerView.EffectType.Debuff_Ice;
            public static float SpeedModifier = -0.333f;
        }

        public static class GlobalPoisonEffect
        {
            public static float Duration = 5f;
            public static PlayerView.EffectType EffectType = PlayerView.EffectType.Poisoned;
            public static float SkillDamagePerSecond = 0.9f;
        }

        public static class MassDamageDeflection
        {
            public static float Radius = 10f;
        }

        public static class PassiveDamage
        {
            public static float Interval = 1f;
            public static float Radius = 5f;
        }

        public class SharedData
        {
            public bool AllSkillsCooldownBonus;
            public BaseStatProperty BaseStat;
            public BaseStatProperty BuffBaseStat1;
            public BaseStatProperty BuffBaseStat2;
            public GameLogic.CharacterType CharacterTypeArmorBonus;
            public GameLogic.CharacterType CharacterTypeCoinBonus;
            public GameLogic.CharacterType CharacterTypeDmgBonus;
            public GameLogic.CharacterType CharacterTypeXpBonus;
            public bool DamagePerSecond;
            public string Description;
            public float DurationSeconds;
            public PlayerView.EffectType EffectType;
            public float EvolveBonusPerRank;
            public SkillType ExtraSkillCharge;
            public bool HideDescriptionModifierPrefix;
            public bool HideTimerInHud;
            public GameLogic.CharacterType LinkedToCharacterType;
            public string LinkedToRunestone;
            public SkillType LinkedToSkill;
            public float ModifierBuildupTick;
            public float ModifierMax;
            public float ModifierMin;
            public string Name;
            public string ShortDescription = string.Empty;
            public bool ShowModifierInHud;
            public bool ShowStackedInHud;
            public SkillType SkillCooldownBonus;
            public SkillType SkillDamageBonus;
            public SkillType SkillInvulnerability;
            public string SmallSprite = "icon_mini_perk";
            public SpriteAtlasEntry Sprite;
            public bool Stuns;
            public bool TargetsEnemies;
            public float Threshold;
            public float ViewScaleModifier;
        }
    }
}


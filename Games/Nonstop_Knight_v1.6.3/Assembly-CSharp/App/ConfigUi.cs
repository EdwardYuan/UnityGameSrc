namespace App
{
    using GameLogic;
    using PlayerView;
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    public static class ConfigUi
    {
        public static float ADDITIONAL_MOVING_TO_NEXT_FLOOR_DURATION;
        public static Color CELL_BUTTON_TEXT_COLOR_LOCKED;
        public static Color CELL_BUTTON_TEXT_COLOR_UNLOCK;
        public static Color CELL_BUTTON_TEXT_COLOR_UPGRADE;
        public static Vector3 CELL_BUTTON_TEXT_POS_LOCKED;
        public static Vector3 CELL_BUTTON_TEXT_POS_UNLOCK;
        public static Vector3 CELL_BUTTON_TEXT_POS_UPGRADE;
        public static int CELL_BUTTON_TEXT_SIZE_LOCKED;
        public static int CELL_BUTTON_TEXT_SIZE_UNLOCK;
        public static int CELL_BUTTON_TEXT_SIZE_UPGRADE;
        public static Dictionary<GameLogic.CharacterType, string> CHARACTER_TYPE_NAMES;
        public static Dictionary<ChestType, ChestBlueprint> CHEST_BLUEPRINTS;
        public static float CHEST_DROP_AUTO_COLLECT_WAIT;
        public static Color COIN_COLOR;
        public static float COIN_DROP_AUTO_COLLECT_WAIT;
        public static Color COLOR_DEHIGHLIGHTED_LOCKED;
        public static Color COLOR_DEHIGHLIGHTED_UNLOCKED;
        public static Color COLOR_HIGHLIGHTED;
        public static Color COMBAT_TEXT_MAGIC_DAMAGE_COLOR;
        public static Color COMBAT_TEXT_PET_DAMAGE_COLOR;
        public static Vector3 COMBAT_TEXT_WORLD_OFFSET;
        public static Color CROWN_COLOR;
        public static Dictionary<ResourceType, SpriteAtlasEntry> DEFAULT_RESOURCE_PILE_SPRITES;
        public static float DELAY_AFTER_DEATH;
        public static float DELAY_BEFORE_MOVING_TO_NEXT_FLOOR;
        public static bool DHUD_PANEL_ARROW_VISIBLE = false;
        public static Color DIAMOND_COLOR;
        public static float DIAMOND_DROP_AUTO_COLLECT_WAIT;
        public static bool DUNGEON_END_CEREMONY_WITH_PROGRESS_BARS;
        public static Color DUST_COLOR;
        public static float FADE_TO_BLACK_DURATION;
        public static float FADE_TO_WHITE_DURATION;
        public static float FLOATER_ENTRY_DURATION;
        public static float FLOATER_EXIT_DURATION;
        public static float FLOATER_STAY_DURATION;
        public static float HP_GAIN_INDICATOR_ANIMATION_SPEED;
        public static Vector3 HP_INDICATOR_WORLD_OFFSET;
        public static float HP_LOSS_INDICATOR_ANIMATION_SPEED;
        public static float HUD_RESOURCE_GAIN_VISUALIZATION_INTERVAL;
        public static Dictionary<ItemType, SpriteAtlasEntry> ITEM_TYPE_ABSTRACT_SPRITES_IDS;
        public static Color LEGENDARY_PERK_COLOR;
        public static Color LEGENDARY_PERK_COLOR_DIMMED;
        public static Color LIST_CELL_REGULAR_COLOR;
        public static Color LIST_CELL_STRIPED_COLOR;
        public static bool MAP_ALL_PROGRESS_BARS_ENABLED;
        public static int MAP_AREAS_VISIBLE_BEFORE_CLOUDS;
        public static Color MAP_DIM_COLOR;
        public static float MAP_EXPLORE_ANIMATION_DURATION;
        public static Easing.Function MAP_EXPLORE_CLOUD_EASING;
        public static bool MAP_PREDUNGEON_TOOLTIP_ENABLED;
        public static int MAX_RESOURCE_FLY_TO_HUD_COUNT;
        public static Color MENU_AMBIENT_COLOR;
        public static float MENU_BACKGROUND_ALPHA;
        public static Easing.Function MENU_EASING_IN;
        public static Easing.Function MENU_EASING_OUT;
        public static float MENU_ELEMENT_DROP_INTERVAL;
        public static Color MENU_EQUIPPABLE_ITEM_LEVEL_COLOR;
        public static int MENU_TIME_TIME_SLOWDOWN_FRAME_COUNT;
        public static float MENU_TO_MENU_FADE_TO_BLACK_TOTAL_DURATION;
        public static float MENU_TRANSITION_DURATION;
        public static bool MENU_UNEQUIPPABLE_ITEM_GREYSCALE_ENABLED;
        public static Color MENU_UNEQUIPPABLE_ITEM_LEVEL_COLOR;
        public static int NUM_PASSIVE_COIN_GAIN_SHOWERS_MAX;
        public static int NUM_PASSIVE_COIN_GAIN_SHOWERS_MIN;
        public static Color PERK_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR;
        public static string PERK_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR_HEX;
        public static Color PERK_DESCRIPTION_VARIABLE_TEXT_COLOR;
        public static string PERK_DESCRIPTION_VARIABLE_TEXT_COLOR_HEX;
        public static MinMax PET_POPUP_ANIMATION_INTERVAL_INITIAL = new MinMax(1f, 3f);
        public static MinMax PET_POPUP_ANIMATION_INTERVAL_STAY = new MinMax(7f, 10f);
        public static Easing.Function POPUP_EASING_IN;
        public static Easing.Function POPUP_EASING_OUT;
        public static float POPUP_TRANSITION_DURATION_IN;
        public static float POPUP_TRANSITION_DURATION_OUT;
        public static float POPUP_TRANSITION_SCALE;
        public static Dictionary<PotionType, SpriteAtlasEntry> POTION_TYPE_SPRITES;
        public static Dictionary<int, string> RARITY_BORDER_SPRITES;
        public static Dictionary<int, string> RARITY_ITEM_LEVEL_BACKGROUND_SPRITES;
        public static Dictionary<int, Color> RARITY_POPUP_BUTTON_COLORS;
        public static Dictionary<int, Color> RARITY_POPUP_TITLE_COLORS;
        public static Dictionary<int, string> RARITY_POPUP_TITLE_SPRITES;
        public static Dictionary<int, Color> RARITY_SPRITE_COLORS;
        public static Dictionary<int, string> RARITY_STRINGS;
        public static Dictionary<int, Color> RARITY_TEXT_COLORS;
        public static int RESOURCE_FLY_TO_HUD_COUNT_RANDOM_VARIATION;
        public static Dictionary<ResourceType, SpriteAtlasEntry> RESOURCE_TYPE_SPRITES;
        public static bool RETURN_TO_MAP_AFTER_GAMEPLAY;
        public static float ROOM_END_WAIT_TIME;
        public static Easing.Function SKILL_COOLDOWN_END_ENTRY_EASING;
        public static Easing.Function SKILL_COOLDOWN_END_EXIT_EASING;
        public static float SKILL_COOLDOWN_END_FLASH_DURATION;
        public static Color SKILL_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR;
        public static string SKILL_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR_HEX;
        public static Color SKILL_DESCRIPTION_VARIABLE_TEXT_COLOR;
        public static string SKILL_DESCRIPTION_VARIABLE_TEXT_COLOR_HEX;
        public static float SLIDING_PANEL_ENTRY_DURATION;
        public static float SLIDING_PANEL_EXIT_DURATION;
        public static Color STAR_GRAYSCALE_DEHIGHLIGHTED;
        public static Color STAR_GRAYSCALE_HIGHLIGHTED;
        public static bool TASK_PANEL_DO_SHOW_NEWEST_FIRST = false;
        public static Dictionary<TaskPanelItemType, TaskPanelItem.Content> TASK_PANEL_ITEM_BLUEPRINTS;
        public static int TASK_PANEL_NUM_VISIBLE_ITEMS_MAX = 4;
        public static Color TEXT_HIGHLIGHT_COLOR;
        public static string TEXT_HIGHLIGHT_COLOR_HEX;
        public static Color TEXT_SUPERHIGHLIGHT_COLOR;
        public static string TEXT_SUPERHIGHLIGHT_COLOR_HEX;
        public static bool TIME_SLOWDOWN_DURING_MENUS_ENABLED;
        public static List<string> TIPS;
        public static Color TOKEN_COLOR;
        public static Easing.Function TOOLTIP_EASING_IN;
        public static Easing.Function TOOLTIP_EASING_OUT;
        public static float TOOLTIP_MENU_BACKGROUND_ALPHA;
        public static float TOOLTIP_TRANSITION_DURATION_IN;
        public static float TOOLTIP_TRANSITION_DURATION_OUT;
        public static float TOOLTIP_TRANSITION_SCALE;
        public static bool VERTICAL_ITEM_MENU_ENABLED;
        public static Color XP_COLOR;
        public static float XP_DROP_AUTO_COLLECT_WAIT;

        static ConfigUi()
        {
            List<string> list = new List<string>();
            list.Add(ConfigLoca.TIP_001);
            list.Add(ConfigLoca.TIP_002);
            list.Add(ConfigLoca.TIP_003);
            list.Add(ConfigLoca.TIP_004);
            list.Add(ConfigLoca.TIP_005);
            list.Add(ConfigLoca.TIP_006);
            list.Add(ConfigLoca.TIP_007);
            list.Add(ConfigLoca.TIP_008);
            list.Add(ConfigLoca.TIP_009);
            list.Add(ConfigLoca.TIP_010);
            list.Add(ConfigLoca.TIP_011);
            list.Add(ConfigLoca.TIP_012);
            list.Add(ConfigLoca.TIP_013);
            list.Add(ConfigLoca.TIP_014);
            list.Add(ConfigLoca.TIP_015);
            list.Add(ConfigLoca.TIP_016);
            list.Add(ConfigLoca.TIP_017);
            list.Add(ConfigLoca.TIP_018);
            list.Add(ConfigLoca.TIP_019);
            list.Add(ConfigLoca.TIP_020);
            list.Add(ConfigLoca.TIP_021);
            list.Add(ConfigLoca.TIP_022);
            list.Add(ConfigLoca.TIP_023);
            list.Add(ConfigLoca.TIP_024);
            list.Add(ConfigLoca.TIP_025);
            list.Add(ConfigLoca.TIP_026);
            list.Add(ConfigLoca.TIP_027);
            list.Add(ConfigLoca.TIP_028);
            list.Add(ConfigLoca.TIP_029);
            list.Add(ConfigLoca.TIP_030);
            list.Add(ConfigLoca.TIP_031);
            list.Add(ConfigLoca.TIP_032);
            list.Add(ConfigLoca.TIP_033);
            TIPS = list;
            Dictionary<TaskPanelItemType, TaskPanelItem.Content> dictionary = new Dictionary<TaskPanelItemType, TaskPanelItem.Content>(new TaskPanelItemTypeBoxAvoidanceComparer());
            TaskPanelItem.Content content = new TaskPanelItem.Content();
            content.IconOffset = new Vector2(0f, 0f);
            content.IconSize = new Vector2(260f, 260f);
            content.IconSprite = new SpriteAtlasEntry("Menu", "floater_chest_wooden");
            content.SparklesColor = ColorUtil.HexToColor("7FACE0FF", 1f);
            dictionary.Add(TaskPanelItemType.BossChestDrop, content);
            TaskPanelItem.Content content2 = new TaskPanelItem.Content();
            content2.IconOffset = new Vector2(0f, 0f);
            content2.IconSize = new Vector2(200f, 200f);
            content2.IconSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            content2.SparklesColor = ColorUtil.HexToColor("7FACE0FF", 1f);
            dictionary.Add(TaskPanelItemType.NormalChestDrop, content2);
            TaskPanelItem.Content content3 = new TaskPanelItem.Content();
            content3.IconOffset = new Vector2(0f, 12f);
            content3.IconSize = new Vector2(260f, 260f);
            content3.IconSprite = new SpriteAtlasEntry("Menu", "floater_pet_dragon");
            content3.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.StarterBundle, content3);
            TaskPanelItem.Content content4 = new TaskPanelItem.Content();
            content4.IconOffset = new Vector2(0f, 0f);
            content4.IconSize = new Vector2(160f, 160f);
            content4.IconSprite = new SpriteAtlasEntry("DungeonHud", "uiz_sprite_shield");
            content4.SparklesColor = ColorUtil.HexToColor("7FACE0FF", 1f);
            dictionary.Add(TaskPanelItemType.LevelUpReward, content4);
            TaskPanelItem.Content content5 = new TaskPanelItem.Content();
            content5.IconOffset = new Vector2(0f, 0f);
            content5.IconSize = new Vector2(220f, 220f);
            content5.IconSprite = new SpriteAtlasEntry("Menu", "icon_prizeribbon_floater");
            content5.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.AchievementTask, content5);
            TaskPanelItem.Content content6 = new TaskPanelItem.Content();
            content6.IconOffset = new Vector2(0f, 0f);
            content6.IconSize = new Vector2(200f, 200f);
            content6.IconSprite = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            content6.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.LeaderboardReward, content6);
            TaskPanelItem.Content content7 = new TaskPanelItem.Content();
            content7.IconOffset = new Vector2(0f, 0f);
            content7.IconSize = new Vector2(220f, 220f);
            content7.IconSprite = new SpriteAtlasEntry("DungeonHud", "uiz_icon_shop");
            content7.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.VendorNewItems, content7);
            TaskPanelItem.Content content8 = new TaskPanelItem.Content();
            content8.IconOffset = new Vector2(0f, 0f);
            content8.IconSize = new Vector2(220f, 220f);
            content8.IconSprite = new SpriteAtlasEntry("Menu", "floater_envelope");
            content8.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.AppboyTask, content8);
            TaskPanelItem.Content content9 = new TaskPanelItem.Content();
            content9.IconOffset = new Vector2(0f, 0f);
            content9.IconSize = new Vector2(220f, 220f);
            content9.IconSprite = new SpriteAtlasEntry("Menu", "floater_envelope");
            content9.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.RateGame, content9);
            TaskPanelItem.Content content10 = new TaskPanelItem.Content();
            content10.IconOffset = new Vector2(0f, 0f);
            content10.IconSize = new Vector2(190f, 190f);
            content10.IconSprite = new SpriteAtlasEntry("Menu", "icon_mini_bubble_tutorial");
            content10.SparklesColor = ColorUtil.HexToColor("7FACE0FF", 1f);
            dictionary.Add(TaskPanelItemType.HeroNamingTutorial, content10);
            TaskPanelItem.Content content11 = new TaskPanelItem.Content();
            content11.IconOffset = new Vector2(0f, 0f);
            content11.IconSize = new Vector2(220f, 220f);
            content11.IconSprite = new SpriteAtlasEntry("Menu", "floater_envelope");
            content11.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.UpdateReward, content11);
            TaskPanelItem.Content content12 = new TaskPanelItem.Content();
            content12.IconOffset = new Vector2(0f, 0f);
            content12.IconSize = new Vector2(200f, 200f);
            content12.IconSprite = new SpriteAtlasEntry("Menu", "icon_petbox001_floater");
            content12.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.MissionCompleted, content12);
            TaskPanelItem.Content content13 = new TaskPanelItem.Content();
            content13.IconOffset = new Vector2(0f, 0f);
            content13.IconSize = new Vector2(200f, 200f);
            content13.IconSprite = new SpriteAtlasEntry("Menu", "icon_megabox_floater");
            content13.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.MissionsBigPrize, content13);
            TaskPanelItem.Content content14 = new TaskPanelItem.Content();
            content14.IconOffset = new Vector2(0f, 0f);
            content14.IconSize = new Vector2(200f, 200f);
            content14.IconSprite = new SpriteAtlasEntry("Menu", "icon_bounty001_floater");
            content14.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.NewMissions, content14);
            TaskPanelItem.Content content15 = new TaskPanelItem.Content();
            content15.IconOffset = new Vector2(0f, 0f);
            content15.IconSize = new Vector2(220f, 220f);
            content15.IconSprite = new SpriteAtlasEntry("DungeonHud", "icon_pets");
            content15.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.PetLevelUp, content15);
            TaskPanelItem.Content content16 = new TaskPanelItem.Content();
            content16.IconOffset = new Vector2(0f, 0f);
            content16.IconSize = new Vector2(220f, 220f);
            content16.IconSprite = new SpriteAtlasEntry("Menu", "floater_envelope");
            content16.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.Promotion, content16);
            TaskPanelItem.Content content17 = new TaskPanelItem.Content();
            content17.IconOffset = new Vector2(0f, 0f);
            content17.IconSize = new Vector2(200f, 200f);
            content17.IconSprite = new SpriteAtlasEntry("DungeonHud", "icon_helmet");
            content17.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.HighestFloorReached, content17);
            TaskPanelItem.Content content18 = new TaskPanelItem.Content();
            content18.IconOffset = new Vector2(0f, 0f);
            content18.IconSize = new Vector2(190f, 190f);
            content18.IconSprite = new SpriteAtlasEntry("Menu", "icon_mini_bubble_tutorial");
            content18.SparklesColor = ColorUtil.HexToColor("7FACE0FF", 1f);
            dictionary.Add(TaskPanelItemType.FrenzyPotionTutorial, content18);
            TaskPanelItem.Content content19 = new TaskPanelItem.Content();
            content19.IconOffset = new Vector2(0f, 0f);
            content19.IconSize = new Vector2(200f, 200f);
            content19.IconSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            content19.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.SocialGift, content19);
            TaskPanelItem.Content content20 = new TaskPanelItem.Content();
            content20.IconOffset = new Vector2(0f, 0f);
            content20.IconSize = new Vector2(200f, 200f);
            content20.IconSprite = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            content20.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.TournamentMilestoneMainReward, content20);
            TaskPanelItem.Content content21 = new TaskPanelItem.Content();
            content21.IconOffset = new Vector2(0f, 0f);
            content21.IconSize = new Vector2(160f, 160f);
            content21.IconSprite = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            content21.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.TournamentMilestoneContributorReward, content21);
            TaskPanelItem.Content content22 = new TaskPanelItem.Content();
            content22.IconOffset = new Vector2(0f, 0f);
            content22.IconSize = new Vector2(200f, 200f);
            content22.IconSprite = new SpriteAtlasEntry("Menu", "icon_cardpack_floater");
            content22.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.TournamentCardPack, content22);
            TaskPanelItem.Content content23 = new TaskPanelItem.Content();
            content23.IconOffset = new Vector2(0f, 0f);
            content23.IconSize = new Vector2(200f, 200f);
            content23.IconSprite = ConfigMissions.PROMOTION_EVENT_MISSION_ICON_FLOATER;
            content23.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.PromotionEventMissionCompleted, content23);
            TaskPanelItem.Content content24 = new TaskPanelItem.Content();
            content24.IconOffset = new Vector2(0f, 0f);
            content24.IconSize = new Vector2(260f, 260f);
            content24.IconSprite = ConfigMissions.PROMOTION_EVENT_MISSION_ICON_FLOATER;
            content24.SparklesColor = ColorUtil.HexToColor("FFDE26FF", 1f);
            dictionary.Add(TaskPanelItemType.PromotionEventMissionsBigPrize, content24);
            TaskPanelItem.Content content25 = new TaskPanelItem.Content();
            content25.IconOffset = new Vector2(0f, 0f);
            content25.IconSize = new Vector2(190f, 190f);
            content25.IconSprite = new SpriteAtlasEntry("Menu", "icon_mini_bubble_tutorial");
            content25.SparklesColor = ColorUtil.HexToColor("7FACE0FF", 1f);
            dictionary.Add(TaskPanelItemType.BossHuntFirstTimeTutorial, content25);
            TaskPanelItem.Content content26 = new TaskPanelItem.Content();
            content26.IconOffset = new Vector2(0f, 0f);
            content26.IconSize = new Vector2(190f, 190f);
            content26.IconSprite = new SpriteAtlasEntry("Menu", "icon_mini_bubble_tutorial");
            content26.SparklesColor = ColorUtil.HexToColor("7FACE0FF", 1f);
            dictionary.Add(TaskPanelItemType.BossHuntVeteranTutorial, content26);
            TASK_PANEL_ITEM_BLUEPRINTS = dictionary;
            Dictionary<ChestType, ChestBlueprint> dictionary2 = new Dictionary<ChestType, ChestBlueprint>(new ChestTypeBoxAvoidanceComparer());
            dictionary2.Add(ChestType.NONE, new ChestBlueprint());
            ChestBlueprint blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_VENDOR_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_VENDOR_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Vendor, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SERVER_GIFT_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SERVER_GIFT_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.ServerGift, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_RETIREMENT_TRIGGER_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_RETIREMENT_TRIGGER_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_scroll_floater");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_scroll_floater");
            blueprint.CeremonyScale = 1f;
            dictionary2.Add(ChestType.RetirementTrigger, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_REWARD_BOX_COMMON_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_REWARD_BOX_COMMON_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.RewardBoxCommon, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_REWARD_BOX_RARE_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_REWARD_BOX_RARE_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.RewardBoxRare, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_REWARD_BOX_EPIC_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_REWARD_BOX_EPIC_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_adventure_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.RewardBoxEpic, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_REWARD_BOX_MULTI_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_REWARD_BOX_MULTI_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_megabox");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_megabox_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_megabox_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.RewardBoxMulti, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_MYSTERY_STANDARD_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_MYSTERY_STANDARD_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.MysteryStandard, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_MYSTERY_SPECIAL_OFFER_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_MYSTERY_SPECIAL_OFFER_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.MysterySpecialOffer, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_MYSTERY_SPECIAL_OFFER_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_MYSTERY_SPECIAL_OFFER_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.MysterySpecialOffer_BossHunt, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_BASIC001_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_BASIC001_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_wooden");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_wooden");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_wooden");
            blueprint.CeremonyScale = 1f;
            dictionary2.Add(ChestType.Basic001, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_BASIC002_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_BASIC002_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_copper");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_copper");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_copper");
            blueprint.CeremonyScale = 1f;
            dictionary2.Add(ChestType.Basic002, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_BASIC003_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_BASIC003_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_silver");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_silver");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_silver");
            blueprint.CeremonyScale = 1f;
            dictionary2.Add(ChestType.Basic003, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL001_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL001_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_trickster");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_trickster");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_trickster");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special001, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL002_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL002_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_swamp");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_swamp");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_swamp");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special002, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL003_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL003_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_fisherman");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_fisherman");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_fisherman");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special003, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL004_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL004_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_heat");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_heat");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_heat");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special004, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL005_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL005_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_nightmare");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_nightmare");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_nightmare");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special005, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL006_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL006_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_legionnaire");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_legionnaire");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_legionnaire");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special006, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL007_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL007_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_frosty");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_frosty");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_frosty");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special007, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL008_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL008_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_mammoth");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_mammoth");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_mammoth");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special008, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_SPECIAL009_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_SPECIAL009_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_tribal");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_tribal");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_tribal");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.Special009, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_MYSTERY_STANDARD_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_MYSTERY_STANDARD_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_mystery_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.RunestoneUpdateReward, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_PET_BOX_SMALL_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_PET_BOX_SMALL_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_petbox001");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_petbox001_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_petbox001_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.PetBoxSmall, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_CHESTER_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_CHESTER_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_chester");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_chester");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_chester");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.ChesterChest, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_cardpack_floater");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_cardpack_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_cardpack_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.TournamentCards, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.TournamentMainReward, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_trophy_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.TournamentContributorReward, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_lootbox_bosshunt");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_bosshunt_floater");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "icon_lootbox_bosshunt_floater");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.LootBoxBossHunt, blueprint);
            blueprint = new ChestBlueprint();
            blueprint.Name = ConfigLoca.CHEST_HALLOWEEN_NAME;
            blueprint.ShortName = ConfigLoca.CHEST_HALLOWEEN_NAME_SHORT;
            blueprint.Icon = new SpriteAtlasEntry("Menu", "icon_chest_halloween");
            blueprint.DropSprite = new SpriteAtlasEntry("Menu", "floater_chest_halloween");
            blueprint.SoloSprite = new SpriteAtlasEntry("Menu", "floater_chest_halloween");
            blueprint.CeremonyScale = 1.1f;
            dictionary2.Add(ChestType.EventHalloween, blueprint);
            dictionary2.Add(ChestType.Wooden001, new ChestBlueprint());
            CHEST_BLUEPRINTS = dictionary2;
            Dictionary<GameLogic.CharacterType, string> dictionary3 = new Dictionary<GameLogic.CharacterType, string>(new CharacterTypeBoxAvoidanceComparer());
            dictionary3.Add(GameLogic.CharacterType.Skeleton, ConfigLoca.CHARACTER_TYPE_SKELETON);
            dictionary3.Add(GameLogic.CharacterType.Jelly, ConfigLoca.CHARACTER_TYPE_JELLY);
            dictionary3.Add(GameLogic.CharacterType.Pygmy, ConfigLoca.CHARACTER_TYPE_PYGMY);
            dictionary3.Add(GameLogic.CharacterType.Worg, ConfigLoca.CHARACTER_TYPE_WORG);
            dictionary3.Add(GameLogic.CharacterType.Dragon, ConfigLoca.CHARACTER_TYPE_DRAGON);
            dictionary3.Add(GameLogic.CharacterType.Goblin, ConfigLoca.CHARACTER_TYPE_GOBLIN);
            dictionary3.Add(GameLogic.CharacterType.Yeti, ConfigLoca.CHARACTER_TYPE_YETI);
            dictionary3.Add(GameLogic.CharacterType.Crocodile, ConfigLoca.CHARACTER_TYPE_CROCODILE);
            dictionary3.Add(GameLogic.CharacterType.Rat, ConfigLoca.CHARACTER_TYPE_RAT);
            dictionary3.Add(GameLogic.CharacterType.Mummy, ConfigLoca.CHARACTER_TYPE_MUMMY);
            dictionary3.Add(GameLogic.CharacterType.Anubis, ConfigLoca.CHARACTER_TYPE_ANUBIS);
            dictionary3.Add(GameLogic.CharacterType.Shroom, ConfigLoca.CHARACTER_TYPE_SHROOM);
            CHARACTER_TYPE_NAMES = dictionary3;
            DUNGEON_END_CEREMONY_WITH_PROGRESS_BARS = false;
            MENU_TIME_TIME_SLOWDOWN_FRAME_COUNT = 8;
            LIST_CELL_REGULAR_COLOR = new Color(0.1333333f, 0.1411765f, 0.2509804f, 0.2f);
            LIST_CELL_STRIPED_COLOR = new Color(0.2078431f, 0.2235294f, 0.3843137f, 0.2f);
            COLOR_HIGHLIGHTED = Color.white;
            COLOR_DEHIGHLIGHTED_UNLOCKED = new Color(1f, 1f, 1f, 0.5f);
            COLOR_DEHIGHLIGHTED_LOCKED = new Color(1f, 1f, 1f, 0.3f);
            TIME_SLOWDOWN_DURING_MENUS_ENABLED = true;
            SKILL_COOLDOWN_END_FLASH_DURATION = 0.4f;
            SKILL_COOLDOWN_END_ENTRY_EASING = Easing.Function.SMOOTHSTEP;
            SKILL_COOLDOWN_END_EXIT_EASING = Easing.Function.SMOOTHSTEP;
            COIN_DROP_AUTO_COLLECT_WAIT = 0.1f;
            DIAMOND_DROP_AUTO_COLLECT_WAIT = 0.1f;
            CHEST_DROP_AUTO_COLLECT_WAIT = 0.1f;
            XP_DROP_AUTO_COLLECT_WAIT = 0.12f;
            NUM_PASSIVE_COIN_GAIN_SHOWERS_MIN = 1;
            NUM_PASSIVE_COIN_GAIN_SHOWERS_MAX = 1;
            HUD_RESOURCE_GAIN_VISUALIZATION_INTERVAL = 0.15f;
            MAX_RESOURCE_FLY_TO_HUD_COUNT = 10;
            RESOURCE_FLY_TO_HUD_COUNT_RANDOM_VARIATION = 4;
            HP_GAIN_INDICATOR_ANIMATION_SPEED = 2f;
            HP_LOSS_INDICATOR_ANIMATION_SPEED = 0.2f;
            SLIDING_PANEL_ENTRY_DURATION = 0.15f;
            SLIDING_PANEL_EXIT_DURATION = 0.15f;
            TOOLTIP_EASING_IN = Easing.Function.OUT_ELASTIC;
            TOOLTIP_EASING_OUT = Easing.Function.IN_CUBIC;
            TOOLTIP_TRANSITION_DURATION_IN = 0.1f;
            TOOLTIP_TRANSITION_DURATION_OUT = 0.05f;
            TOOLTIP_TRANSITION_SCALE = 0.9f;
            TOOLTIP_MENU_BACKGROUND_ALPHA = 0.25f;
            COIN_COLOR = new Color(1f, 0.7607843f, 0.1019608f, 1f);
            DIAMOND_COLOR = new Color(0.7098039f, 0.2313726f, 1f, 1f);
            TOKEN_COLOR = new Color(0.345098f, 0.9176471f, 1f, 1f);
            CROWN_COLOR = new Color(0.345098f, 0.9176471f, 1f, 1f);
            XP_COLOR = new Color(0.345098f, 0.9176471f, 1f, 1f);
            DUST_COLOR = new Color(0.345098f, 0.9176471f, 1f, 1f);
            SKILL_DESCRIPTION_VARIABLE_TEXT_COLOR = new Color(0.9921569f, 0.9294118f, 0.7294118f, 1f);
            SKILL_DESCRIPTION_VARIABLE_TEXT_COLOR_HEX = ColorUtil.ColorToHex(SKILL_DESCRIPTION_VARIABLE_TEXT_COLOR);
            SKILL_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR = new Color(0.6235294f, 1f, 0.4431373f, 1f);
            SKILL_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR_HEX = ColorUtil.ColorToHex(SKILL_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR);
            PERK_DESCRIPTION_VARIABLE_TEXT_COLOR = new Color(0.9921569f, 0.9294118f, 0.7294118f, 1f);
            PERK_DESCRIPTION_VARIABLE_TEXT_COLOR_HEX = ColorUtil.ColorToHex(PERK_DESCRIPTION_VARIABLE_TEXT_COLOR);
            PERK_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR = new Color(0.6235294f, 1f, 0.4431373f, 1f);
            PERK_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR_HEX = ColorUtil.ColorToHex(PERK_DESCRIPTION_BONUS_VARIABLE_TEXT_COLOR);
            TEXT_HIGHLIGHT_COLOR = new Color(0.9921569f, 0.9294118f, 0.7294118f, 1f);
            TEXT_HIGHLIGHT_COLOR_HEX = ColorUtil.ColorToHex(TEXT_HIGHLIGHT_COLOR);
            TEXT_SUPERHIGHLIGHT_COLOR = new Color(1f, 0.9137255f, 0.5058824f, 1f);
            TEXT_SUPERHIGHLIGHT_COLOR_HEX = ColorUtil.ColorToHex(TEXT_SUPERHIGHLIGHT_COLOR);
            STAR_GRAYSCALE_HIGHLIGHTED = new Color(0.7843137f, 0.7843137f, 0.7843137f, 0.9019608f);
            STAR_GRAYSCALE_DEHIGHLIGHTED = new Color(0.7843137f, 0.7843137f, 0.7843137f, 0.5f);
            LEGENDARY_PERK_COLOR = new Color(1f, 0.9176471f, 0.5058824f, 1f);
            LEGENDARY_PERK_COLOR_DIMMED = new Color(1f, 0.9176471f, 0.5058824f, 0.345098f);
            CELL_BUTTON_TEXT_COLOR_LOCKED = new Color(1f, 1f, 1f, 1f);
            CELL_BUTTON_TEXT_COLOR_UNLOCK = new Color(1f, 0.945098f, 0.8588235f, 1f);
            CELL_BUTTON_TEXT_COLOR_UPGRADE = new Color(1f, 1f, 1f, 1f);
            CELL_BUTTON_TEXT_SIZE_LOCKED = 0x26;
            CELL_BUTTON_TEXT_SIZE_UNLOCK = 40;
            CELL_BUTTON_TEXT_SIZE_UPGRADE = 40;
            CELL_BUTTON_TEXT_POS_LOCKED = new Vector3(0f, -49f, 0f);
            CELL_BUTTON_TEXT_POS_UNLOCK = new Vector3(0f, -40f, 0f);
            CELL_BUTTON_TEXT_POS_UPGRADE = new Vector3(20f, -40f, 0f);
            DELAY_AFTER_DEATH = 5f;
            DELAY_BEFORE_MOVING_TO_NEXT_FLOOR = 0f;
            ADDITIONAL_MOVING_TO_NEXT_FLOOR_DURATION = 0.7f;
            FADE_TO_BLACK_DURATION = 0.3f;
            FADE_TO_WHITE_DURATION = 0.3f;
            ROOM_END_WAIT_TIME = 0.75f;
            Dictionary<int, string> dictionary4 = new Dictionary<int, string>();
            dictionary4.Add(0, "Common");
            dictionary4.Add(1, "Uncommon");
            dictionary4.Add(2, "Rare");
            dictionary4.Add(3, "Epic");
            dictionary4.Add(4, "Legendary");
            RARITY_STRINGS = dictionary4;
            Dictionary<int, Color> dictionary5 = new Dictionary<int, Color>();
            dictionary5.Add(0, new Color(0.7843137f, 0.7843137f, 0.7843137f, 1f));
            dictionary5.Add(1, new Color(0.3686275f, 0.772549f, 0.372549f, 1f));
            dictionary5.Add(2, new Color(0.3294118f, 0.6078432f, 1f, 1f));
            dictionary5.Add(3, new Color(0.6666667f, 0.3921569f, 0.9019608f, 1f));
            dictionary5.Add(4, new Color(1f, 0.7254902f, 0f, 1f));
            RARITY_TEXT_COLORS = dictionary5;
            dictionary5 = new Dictionary<int, Color>();
            dictionary5.Add(0, new Color(0.7843137f, 0.7843137f, 0.7843137f, 1f));
            dictionary5.Add(1, new Color(0.3686275f, 0.772549f, 0.372549f, 1f));
            dictionary5.Add(2, new Color(0.3294118f, 0.6078432f, 1f, 1f));
            dictionary5.Add(3, new Color(0.6666667f, 0.3921569f, 0.9019608f, 1f));
            dictionary5.Add(4, new Color(1f, 0.7254902f, 0f, 1f));
            RARITY_SPRITE_COLORS = dictionary5;
            dictionary5 = new Dictionary<int, Color>();
            dictionary5.Add(0, new Color(0.7647059f, 0.7058824f, 0.5568628f, 0.75f));
            dictionary5.Add(1, new Color(0.3686275f, 0.772549f, 0.372549f, 0.75f));
            dictionary5.Add(2, new Color(0.3294118f, 0.6078432f, 1f, 0.75f));
            dictionary5.Add(3, new Color(0.6666667f, 0.3921569f, 0.9019608f, 0.75f));
            dictionary5.Add(4, new Color(1f, 0.6705883f, 0.09803922f, 0.75f));
            RARITY_POPUP_TITLE_COLORS = dictionary5;
            dictionary5 = new Dictionary<int, Color>();
            dictionary5.Add(0, new Color(0.7647059f, 0.7058824f, 0.5568628f, 1f));
            dictionary5.Add(1, new Color(0.3686275f, 0.772549f, 0.372549f, 1f));
            dictionary5.Add(2, new Color(0.3294118f, 0.6078432f, 1f, 1f));
            dictionary5.Add(3, new Color(0.6666667f, 0.3921569f, 0.9019608f, 1f));
            dictionary5.Add(4, new Color(1f, 0.6705883f, 0.09803922f, 1f));
            RARITY_POPUP_BUTTON_COLORS = dictionary5;
            dictionary4 = new Dictionary<int, string>();
            dictionary4.Add(0, "sprite_bg_popup_top_brown");
            dictionary4.Add(1, "sprite_bg_popup_top_green");
            dictionary4.Add(2, "sprite_bg_popup_top_blue");
            dictionary4.Add(3, "sprite_bg_popup_top_purple");
            dictionary4.Add(4, "sprite_bg_popup_top_gold");
            RARITY_POPUP_TITLE_SPRITES = dictionary4;
            dictionary4 = new Dictionary<int, string>();
            dictionary4.Add(0, "sprite_ui_itemborder_common");
            dictionary4.Add(1, "sprite_ui_itemborder_uncommon");
            dictionary4.Add(2, "sprite_ui_itemborder_rare");
            dictionary4.Add(3, "sprite_ui_itemborder_epic");
            dictionary4.Add(4, "sprite_ui_itemborder_legendary");
            RARITY_BORDER_SPRITES = dictionary4;
            dictionary4 = new Dictionary<int, string>();
            dictionary4.Add(0, "sprite_ui_circle_brown");
            dictionary4.Add(1, "sprite_ui_circle_green");
            dictionary4.Add(2, "sprite_ui_circle_blue");
            dictionary4.Add(3, "sprite_ui_circle_purple");
            dictionary4.Add(4, "sprite_ui_circle_gold");
            RARITY_ITEM_LEVEL_BACKGROUND_SPRITES = dictionary4;
            Dictionary<ResourceType, SpriteAtlasEntry> dictionary6 = new Dictionary<ResourceType, SpriteAtlasEntry>(new ResourceTypeBoxAvoidanceComparer());
            dictionary6.Add(ResourceType.Energy, null);
            dictionary6.Add(ResourceType.Coin, new SpriteAtlasEntry("Menu", "icon_coin"));
            dictionary6.Add(ResourceType.Diamond, new SpriteAtlasEntry("Menu", "icon_gem"));
            dictionary6.Add(ResourceType.Xp, null);
            dictionary6.Add(ResourceType.Token, new SpriteAtlasEntry("Menu", "icon_token"));
            dictionary6.Add(ResourceType.Crown, null);
            dictionary6.Add(ResourceType.Dust, new SpriteAtlasEntry("Menu", "icon_dust"));
            DEFAULT_RESOURCE_PILE_SPRITES = dictionary6;
            dictionary6 = new Dictionary<ResourceType, SpriteAtlasEntry>(new ResourceTypeBoxAvoidanceComparer());
            dictionary6.Add(ResourceType.Energy, null);
            dictionary6.Add(ResourceType.Coin, new SpriteAtlasEntry("DungeonHud", "icon_coin_floater"));
            dictionary6.Add(ResourceType.Diamond, new SpriteAtlasEntry("DungeonHud", "icon_gem_floater"));
            dictionary6.Add(ResourceType.Xp, null);
            dictionary6.Add(ResourceType.Token, new SpriteAtlasEntry("DungeonHud", "icon_token_floater"));
            dictionary6.Add(ResourceType.Crown, new SpriteAtlasEntry("Menu", "uiz_icon_crown"));
            dictionary6.Add(ResourceType.Dust, new SpriteAtlasEntry("Menu", "icon_dust"));
            RESOURCE_TYPE_SPRITES = dictionary6;
            Dictionary<ItemType, SpriteAtlasEntry> dictionary7 = new Dictionary<ItemType, SpriteAtlasEntry>(new ItemTypeBoxAvoidanceComparer());
            dictionary7.Add(ItemType.UNSPECIFIED, null);
            dictionary7.Add(ItemType.Weapon, new SpriteAtlasEntry("Menu", "sprite_ui3_itemtype_weapon_icon"));
            dictionary7.Add(ItemType.Armor, new SpriteAtlasEntry("Menu", "sprite_ui3_itemtype_armor_icon"));
            dictionary7.Add(ItemType.Cloak, new SpriteAtlasEntry("Menu", "sprite_ui3_itemtype_cloak_icon"));
            ITEM_TYPE_ABSTRACT_SPRITES_IDS = dictionary7;
            Dictionary<PotionType, SpriteAtlasEntry> dictionary8 = new Dictionary<PotionType, SpriteAtlasEntry>(new PotionTypeBoxAvoidanceComparer());
            dictionary8.Add(PotionType.Revive, new SpriteAtlasEntry("Menu", "icon_bottle_red"));
            dictionary8.Add(PotionType.Frenzy, new SpriteAtlasEntry("Menu", "icon_bottle_frenzy"));
            dictionary8.Add(PotionType.Xp, new SpriteAtlasEntry("Menu", "icon_xp_pile1"));
            dictionary8.Add(PotionType.Boss, new SpriteAtlasEntry("Menu", "icon_bossticket"));
            POTION_TYPE_SPRITES = dictionary8;
            MAP_PREDUNGEON_TOOLTIP_ENABLED = true;
            MAP_DIM_COLOR = new Color(0.5372549f, 0.5372549f, 0.5372549f, 1f);
            MAP_EXPLORE_ANIMATION_DURATION = 0.5f;
            MAP_EXPLORE_CLOUD_EASING = Easing.Function.OUT_QUAD;
            MAP_ALL_PROGRESS_BARS_ENABLED = true;
            MAP_AREAS_VISIBLE_BEFORE_CLOUDS = 1;
            MENU_AMBIENT_COLOR = new Color(0.4941176f, 0.4470588f, 0.4313726f, 1f);
            VERTICAL_ITEM_MENU_ENABLED = false;
            RETURN_TO_MAP_AFTER_GAMEPLAY = true;
            FLOATER_ENTRY_DURATION = 0.2f;
            FLOATER_STAY_DURATION = 2f;
            FLOATER_EXIT_DURATION = 0.2f;
            MENU_BACKGROUND_ALPHA = 0.85f;
            MENU_TRANSITION_DURATION = 0.21f;
            MENU_ELEMENT_DROP_INTERVAL = 0.04f;
            MENU_EASING_IN = Easing.Function.IN_BACK;
            MENU_EASING_OUT = Easing.Function.OUT_BACK;
            POPUP_EASING_IN = Easing.Function.OUT_BACK;
            POPUP_EASING_OUT = Easing.Function.IN_BACK;
            POPUP_TRANSITION_DURATION_IN = 0.125f;
            POPUP_TRANSITION_DURATION_OUT = 0.075f;
            POPUP_TRANSITION_SCALE = 0.8f;
            MENU_TO_MENU_FADE_TO_BLACK_TOTAL_DURATION = 0f;
            MENU_UNEQUIPPABLE_ITEM_GREYSCALE_ENABLED = false;
            MENU_EQUIPPABLE_ITEM_LEVEL_COLOR = new Color(1f, 1f, 1f, 1f);
            MENU_UNEQUIPPABLE_ITEM_LEVEL_COLOR = new Color(0.7215686f, 0.6901961f, 0.6666667f, 1f);
            HP_INDICATOR_WORLD_OFFSET = new Vector3(0f, 2.25f, 0f);
            COMBAT_TEXT_WORLD_OFFSET = new Vector3(0f, 2.6f, 0f);
            COMBAT_TEXT_MAGIC_DAMAGE_COLOR = new Color(0.7843137f, 0.6117647f, 0.9137255f, 1f);
            COMBAT_TEXT_PET_DAMAGE_COLOR = new Color(0.9137255f, 0.8901961f, 0.6117647f, 1f);
        }

        public static RewardCeremonyEntry GetCeremonyEntryForReward(Reward reward)
        {
            if (reward.ChestType == ChestType.RunestoneUpdateReward)
            {
                return CeremonyEntries.RUNESTONE_UPDATE_REWARD;
            }
            if (reward.ShopEntryId == ConfigShops.IAP_STARTER_BUNDLE_ID)
            {
                return CeremonyEntries.STARTER_BUNDLE;
            }
            return CeremonyEntries.SHOP_PURCHASE;
        }

        public static EffectType GetEffectTypeForBuff(Buff buff)
        {
            EffectType nONE = EffectType.NONE;
            if ((buff.FromBoost != BoostType.UNSPECIFIED) && (ConfigBoosts.SHARED_DATA[buff.FromBoost].EffectType != EffectType.NONE))
            {
                return ConfigBoosts.SHARED_DATA[buff.FromBoost].EffectType;
            }
            if ((buff.FromPerk != PerkType.NONE) && (ConfigPerks.SHARED_DATA[buff.FromPerk].EffectType != EffectType.NONE))
            {
                return ConfigPerks.SHARED_DATA[buff.FromPerk].EffectType;
            }
            if (buff.Source.Object == ConfigDungeonModifiers.MODIFIERS[DungeonModifierType.MonsterFreeze])
            {
                nONE = ConfigPerks.GlobalFrostEffect.EffectType;
            }
            return nONE;
        }

        public static SpriteAtlasEntry GetFloaterSpriteForShopEntry(string shopEntryId)
        {
            if (!string.IsNullOrEmpty(shopEntryId))
            {
                ShopEntry shopEntry = ConfigShops.GetShopEntry(shopEntryId);
                switch (shopEntry.Type)
                {
                    case ShopEntryType.CoinBundle:
                        return RESOURCE_TYPE_SPRITES[ResourceType.Coin];

                    case ShopEntryType.TokenBundle:
                        return RESOURCE_TYPE_SPRITES[ResourceType.Token];

                    case ShopEntryType.ReviveBundle:
                        return new SpriteAtlasEntry("Menu", "icon_bottle_red_floater");

                    case ShopEntryType.FrenzyBundle:
                        return new SpriteAtlasEntry("Menu", "icon_bottle_frenzy_floater");

                    case ShopEntryType.DiamondBundle:
                        return RESOURCE_TYPE_SPRITES[ResourceType.Diamond];

                    case ShopEntryType.XpBundle:
                        return new SpriteAtlasEntry("Menu", "icon_xp_floater");

                    case ShopEntryType.BossBundle:
                        return new SpriteAtlasEntry("Menu", "icon_bossticket_floater");

                    case ShopEntryType.PetBox:
                        return CHEST_BLUEPRINTS[shopEntry.ChestType].SoloSprite;

                    case ShopEntryType.MegaBoxBundle:
                        return CHEST_BLUEPRINTS[ChestType.RewardBoxMulti].SoloSprite;

                    case ShopEntryType.LootBox:
                        return CHEST_BLUEPRINTS[shopEntry.ChestType].SoloSprite;
                }
                Debug.LogError("Unsupported shop entry type: " + shopEntry.Type);
            }
            return null;
        }

        public static class CeremonyEntries
        {
            public static RewardCeremonyEntry AD_REWARD;
            public static RewardCeremonyEntry BOSS_VICTORY;
            public static RewardCeremonyEntry GACHA;
            public static RewardCeremonyEntry LEADERBOARD_RANK_UP;
            public static RewardCeremonyEntry PASSIVE_PROGRESS_1;
            public static RewardCeremonyEntry PASSIVE_PROGRESS_2;
            public static RewardCeremonyEntry PASSIVE_PROGRESS_3;
            public static RewardCeremonyEntry PASSIVE_PROGRESS_4;
            public static RewardCeremonyEntry PET_LEVEL_UP = new RewardCeremonyEntry();
            public static RewardCeremonyEntry PET_UNLOCK = new RewardCeremonyEntry();
            public static RewardCeremonyEntry POST_RETIREMENT_FRENZY_POTIONS;
            public static RewardCeremonyEntry POST_RETIREMENT_GIFTS;
            public static RewardCeremonyEntry POST_RETIREMENT_TOKENS;
            public static RewardCeremonyEntry RANK_UP;
            public static RewardCeremonyEntry RANK_UP_MAX_LEVEL;
            public static RewardCeremonyEntry RUNESTONE_UNLOCK;
            public static RewardCeremonyEntry RUNESTONE_UPDATE_REWARD;
            public static RewardCeremonyEntry SERVER_GIFT;
            public static RewardCeremonyEntry SHOP_PURCHASE;
            public static RewardCeremonyEntry SHOP_PURCHASE_BOOST;
            public static RewardCeremonyEntry SKILL_UNLOCK;
            public static RewardCeremonyEntry STARTER_BUNDLE;
            public static RewardCeremonyEntry TALENT_UNLOCK;
            public static RewardCeremonyEntry VENDOR_ITEM_OR_CHEST;

            static CeremonyEntries()
            {
                RewardCeremonyEntry entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_VICTORY;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_BOSS_VICTORY;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                BOSS_VICTORY = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_GOLDEN_CHEST;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_GACHA;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_OPEN;
                GACHA = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_SUCCESS;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_VENDOR_ITEM_OR_CHEST;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_OPEN;
                VENDOR_ITEM_OR_CHEST = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_GREETINGS;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_PASSIVE_PROGRESS_HEADER;
                entry.Description2 = ConfigLoca.CEREMONY_DESCRIPTION_PASSIVE_PROGRESS_1;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                PASSIVE_PROGRESS_1 = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_GREETINGS;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_PASSIVE_PROGRESS_HEADER;
                entry.Description2 = ConfigLoca.CEREMONY_DESCRIPTION_PASSIVE_PROGRESS_2;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                PASSIVE_PROGRESS_2 = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_GREETINGS;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_PASSIVE_PROGRESS_HEADER;
                entry.Description2 = ConfigLoca.CEREMONY_DESCRIPTION_PASSIVE_PROGRESS_3;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                PASSIVE_PROGRESS_3 = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_GREETINGS;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_PASSIVE_PROGRESS_HEADER;
                entry.Description2 = ConfigLoca.CEREMONY_DESCRIPTION_PASSIVE_PROGRESS_4;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                PASSIVE_PROGRESS_4 = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_LEVEL_UP;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_RANK_UP;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                RANK_UP = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_MAX_LEVEL;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_RANK_UP_MAX_LEVEL;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                RANK_UP_MAX_LEVEL = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_REWARD;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_AD_REWARD;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                AD_REWARD = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_SUCCESS;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_SHOP_PURCHASE;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                SHOP_PURCHASE = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_SUCCESS;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_SHOP_PURCHASE_BOOST;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                SHOP_PURCHASE_BOOST = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_ASCENDED;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_POST_RETIREMENT_TOKENS;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                POST_RETIREMENT_TOKENS = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_ASCENDED;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_POST_RETIREMENT_FRENZY_POTIONS;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                POST_RETIREMENT_FRENZY_POTIONS = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_ASCENDED;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_POST_RETIREMENT_GIFTS;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_OPEN;
                POST_RETIREMENT_GIFTS = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_LEVEL_UP;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_SKILL_UNLOCK;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                SKILL_UNLOCK = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_LEVEL_UP;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_RUNESTONE_UNLOCK;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                RUNESTONE_UNLOCK = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_LEVEL_UP;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_TALENT_UNLOCK;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                TALENT_UNLOCK = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_ROYAL_RANK;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                LEADERBOARD_RANK_UP = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_SERVER_GIFT;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_SERVER_GIFT;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                SERVER_GIFT = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_STARTER_BUNDLE;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_STARTER_BUNDLE;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                STARTER_BUNDLE = entry;
                entry = new RewardCeremonyEntry();
                entry.Title = ConfigLoca.CEREMONY_TITLE_UPDATE;
                entry.Description = ConfigLoca.CEREMONY_DESCRIPTION_RUNESTONE_UPDATE_SHORT;
                entry.Description2 = ConfigLoca.CEREMONY_DESCRIPTION_RUNESTONE_UPDATE_LONG;
                entry.ChestOpenAtStart = true;
                entry.Prompt = ConfigLoca.CEREMONY_PROMPT_TAP_TO_CLAIM;
                RUNESTONE_UPDATE_REWARD = entry;
            }
        }

        public static class MiniPopupEntries
        {
            public static MiniPopupEntry BOSS_POTION;
            public static MiniPopupEntry CHEST_INFO;
            public static MiniPopupEntry COIN_MULTIPLIER;
            public static MiniPopupEntry FRENZY;
            public static MiniPopupEntry RATE_GAME;
            public static MiniPopupEntry RETIREMENT_CHEST;
            public static MiniPopupEntry REVIVE;
            public static MiniPopupEntry SCROLL_UPGRADE;
            public static MiniPopupEntry SHOP_OFFER;
            public static MiniPopupEntry SPECIAL_OFFER;

            static MiniPopupEntries()
            {
                MiniPopupEntry entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_SHOP_OFFER_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_SHOP_OFFER_DESCRIPTION;
                entry.ShowAdditionalShopButton = true;
                SHOP_OFFER = entry;
                entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_RETIREMENT_CHEST_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_RETIREMENT_CHEST_DESCRIPTION;
                entry.ButtonText = ConfigLoca.UI_PROMPT_ASCEND;
                RETIREMENT_CHEST = entry;
                entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_REVIVE_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_REVIVE_DESCRIPTION;
                REVIVE = entry;
                entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_SPECIAL_OFFER_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_SPECIAL_OFFER_DESCRIPTION;
                entry.ButtonText = ConfigLoca.UI_PROMPT_WATCH;
                SPECIAL_OFFER = entry;
                entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_SCROLL_UPGRADE_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_SCROLL_UPGRADE_DESCRIPTION;
                entry.ButtonText = ConfigLoca.UI_PROMPT_OK;
                entry.ButtonBackground = new SpriteAtlasEntry("Menu", "uiz_button_wide");
                SCROLL_UPGRADE = entry;
                entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_COIN_MULTIPLIER_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_COIN_MULTIPLIER_DESCRIPTION;
                entry.ButtonText = ConfigLoca.UI_PROMPT_OK;
                entry.ButtonBackground = new SpriteAtlasEntry("Menu", "uiz_button_wide");
                COIN_MULTIPLIER = entry;
                entry = new MiniPopupEntry();
                entry.DescriptionText = ConfigLoca.MINIPOPUP_CHEST_INFO_DESCRIPTION;
                entry.ButtonText = ConfigLoca.UI_PROMPT_OK;
                entry.ButtonBackground = new SpriteAtlasEntry("Menu", "uiz_button_wide");
                CHEST_INFO = entry;
                entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_FRENZY_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_FRENZY_DESCRIPTION;
                entry.ButtonText = ConfigLoca.UI_PROMPT_DRINK;
                FRENZY = entry;
                entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_RATE_GAME_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_RATE_GAME_DESCRIPTION;
                entry.ButtonText = ConfigLoca.UI_PROMPT_RATE;
                RATE_GAME = entry;
                entry = new MiniPopupEntry();
                entry.TitleText = ConfigLoca.MINIPOPUP_BOSS_POTION_TITLE;
                entry.DescriptionText = ConfigLoca.MINIPOPUP_BOSS_POTION_DESCRIPTION;
                entry.ButtonText = ConfigLoca.UI_PROMPT_USE;
                BOSS_POTION = entry;
            }
        }
    }
}


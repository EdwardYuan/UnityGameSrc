Shader "CUSTOM/Fog" {
Properties {
 _MainTex ("Tex1 (RGB)", 2D) = "white" { }
 _UvScrollSpeedX1 ("UV scroll speed X", Range(-2,2)) = 0
 _UvScrollSpeedY1 ("UV scroll speed Y", Range(-2,2)) = 0
 _UvScale1 ("UV scale", Range(0.01,2)) = 1
 _Tex2 ("Tex2 (RGB)", 2D) = "white" { }
 _UvScrollSpeedX2 ("UV scroll speed X", Range(-2,2)) = 0
 _UvScrollSpeedY2 ("UV scroll speed Y", Range(-2,2)) = 0
 _UvScale2 ("UV scale", Range(0.01,2)) = 1
 _FogDistanceFactor ("Fog distance factor", Float) = 1
 _WaveFrequency ("Wave frequency", Range(0,300)) = 150
 _WaveLength ("Wave length", Range(0,1)) = 0.5
 _WaveAmplitude ("Wave amplitude", Range(0,1)) = 0
 _Color ("Add color", Color) = (1,1,1,1)
}
SubShader { 
 LOD 100
 Tags { "QUEUE"="Overlay" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "PreviewType"="Skybox" }
 Pass {
  Tags { "QUEUE"="Overlay" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "PreviewType"="Skybox" }
  ZWrite Off
  Cull Off
  Blend SrcAlpha OneMinusSrcAlpha
  GpuProgramID 2592
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform mediump float _UvScrollSpeedX1;
uniform mediump float _UvScrollSpeedY1;
uniform mediump float _UvScrollSpeedX2;
uniform mediump float _UvScrollSpeedY2;
uniform highp float _FogDistanceFactor;
uniform mediump float _WaveFrequency;
uniform mediump float _WaveLength;
uniform mediump float _WaveAmplitude;
uniform highp vec4 _MainTex_ST;
uniform highp float _CustomFogTerm1;
uniform highp float _CustomFogTerm2;
varying highp vec2 xlv_TEXCOORD0;
varying lowp float xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp float wave_1;
  mediump float waveDirection_2;
  lowp vec4 offset_3;
  highp float tmpvar_4;
  tmpvar_4 = -(_glesVertex.x);
  waveDirection_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = sin(((_Time.x * _WaveFrequency) + (waveDirection_2 * _WaveLength)));
  wave_1 = tmpvar_5;
  offset_3.x = 0.0;
  offset_3.y = (wave_1 * _WaveAmplitude);
  offset_3.z = 0.0;
  offset_3.w = 0.0;
  highp vec2 tmpvar_6;
  tmpvar_6.x = (_Time.x * _UvScrollSpeedX1);
  tmpvar_6.y = (_Time.y * _UvScrollSpeedY1);
  highp vec2 tmpvar_7;
  tmpvar_7.x = (_Time.x * _UvScrollSpeedX2);
  tmpvar_7.y = (_Time.y * _UvScrollSpeedY2);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _WorldSpaceCameraPos;
  highp vec3 x_9;
  x_9 = (_glesVertex.xyz - (_World2Object * tmpvar_8).xyz);
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    (sqrt(dot (x_9, x_9)) * _FogDistanceFactor)
   * _CustomFogTerm1) + _CustomFogTerm2), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  gl_Position = (glstate_matrix_mvp * (_glesVertex + offset_3));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
uniform mediump float _UvScale1;
uniform sampler2D _Tex2;
uniform mediump float _UvScale2;
uniform lowp vec4 _Color;
uniform lowp vec4 _CameraBackgroundColor;
varying highp vec2 xlv_TEXCOORD0;
varying lowp float xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 color_1;
  highp vec2 P_2;
  P_2 = ((xlv_TEXCOORD0 + xlv_TEXCOORD2) * _UvScale1);
  highp vec2 P_3;
  P_3 = ((xlv_TEXCOORD0 + xlv_TEXCOORD3) * _UvScale2);
  color_1.xyz = (_CameraBackgroundColor + _Color).xyz;
  color_1.w = ((texture2D (_MainTex, P_2).w * texture2D (_Tex2, P_3).w) * 2.0);
  color_1.xyz = mix (unity_FogColor.xyz, color_1.xyz, vec3(xlv_TEXCOORD1));
  color_1.w = (color_1.w * xlv_TEXCOORD1);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _UvScrollSpeedX1;
uniform 	mediump float _UvScrollSpeedY1;
uniform 	mediump float _UvScale1;
uniform 	mediump float _UvScrollSpeedX2;
uniform 	mediump float _UvScrollSpeedY2;
uniform 	mediump float _UvScale2;
uniform 	float _FogDistanceFactor;
uniform 	lowp vec4 _Color;
uniform 	mediump float _WaveFrequency;
uniform 	mediump float _WaveLength;
uniform 	mediump float _WaveAmplitude;
uniform 	vec4 _MainTex_ST;
uniform 	float _CustomFogTerm1;
uniform 	float _CustomFogTerm2;
uniform 	lowp vec4 _CameraBackgroundColor;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out lowp float vs_TEXCOORD1;
out highp vec2 vs_TEXCOORD2;
highp  vec4 phase0_Output0_2;
out highp vec2 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
void main()
{
    //Instruction 172
    //MUL
    t16_0 = (-in_POSITION0.x) * _WaveLength;
    //Instruction 173
    //MAD
    t1.x = _Time.x * _WaveFrequency + t16_0;
    //Instruction 174
    //SINCOS
    t1.x = sin(t1.x);
    //Instruction 175
    //MAD
    t1.x = t1.x * _WaveAmplitude + in_POSITION0.y;
    //Instruction 176
    //MUL
    t0 = t1.xxxx * glstate_matrix_mvp[1];
    //Instruction 177
    //MOV
    t1.xyz = in_POSITION0.xzw;
    //Instruction 178
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 179
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.yyyy + t0;
    //Instruction 180
    //MAD
    gl_Position = glstate_matrix_mvp[3] * t1.zzzz + t0;
    //Instruction 181
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 182
    //MUL
    t1.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    //Instruction 183
    //MAD
    t1.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t1.xyz;
    //Instruction 184
    //MAD
    t1.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t1.xyz;
    //Instruction 185
    //ADD
    t1.xyz = t1.xyz + _World2Object[3].xyz;
    //Instruction 186
    //ADD
    t1.xyz = (-t1.xyz) + in_POSITION0.xyz;
    //Instruction 187
    //DP3
    t1.x = dot(t1.xyz, t1.xyz);
    //Instruction 188
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 189
    //MUL
    t1.x = t1.x * _FogDistanceFactor;
    //Instruction 190
    //MAD
    t1.x = t1.x * _CustomFogTerm1 + _CustomFogTerm2;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 191
    //MOV
    vs_TEXCOORD1 = t1.x;
    //Instruction 192
    //MUL
    phase0_Output0_2.xyz = _Time.xyx * vec3(_UvScrollSpeedX1, _UvScrollSpeedY1, _UvScrollSpeedX2);
    //Instruction 193
    //MUL
    phase0_Output0_2.w = _Time.y * _UvScrollSpeedY2;
    //Instruction 194
    //RET
    //--- Post shader code ---
vs_TEXCOORD2 = phase0_Output0_2.xy;
vs_TEXCOORD3 = phase0_Output0_2.zw;
    //--- End post shader code ---
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _UvScrollSpeedX1;
uniform 	mediump float _UvScrollSpeedY1;
uniform 	mediump float _UvScale1;
uniform 	mediump float _UvScrollSpeedX2;
uniform 	mediump float _UvScrollSpeedY2;
uniform 	mediump float _UvScale2;
uniform 	float _FogDistanceFactor;
uniform 	lowp vec4 _Color;
uniform 	mediump float _WaveFrequency;
uniform 	mediump float _WaveLength;
uniform 	mediump float _WaveAmplitude;
uniform 	vec4 _MainTex_ST;
uniform 	float _CustomFogTerm1;
uniform 	float _CustomFogTerm2;
uniform 	lowp vec4 _CameraBackgroundColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Tex2;
in highp vec2 vs_TEXCOORD0;
in lowp float vs_TEXCOORD1;
in highp vec2 vs_TEXCOORD2;
highp vec4 phase0_Input0_2;
in highp vec2 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp float t10_0;
lowp vec3 t10_1;
highp vec2 t4;
lowp float t10_4;
void main()
{
    //--- Start Early Main ---
    phase0_Input0_2 = vec4(vs_TEXCOORD2, vs_TEXCOORD3);
    //--- End Early Main ---
    //Instruction 160
    //ADD
    t0 = vs_TEXCOORD0.xyxy + phase0_Input0_2;
    //Instruction 161
    //MUL
    t0.xy = t0.xy * vec2(vec2(_UvScale1, _UvScale1));
    //Instruction 162
    //MUL
    t4.xy = vec2(t0.z * float(_UvScale2), t0.w * float(_UvScale2));
    //Instruction 163
    //SAMPLE
    t10_4 = texture(_Tex2, t4.xy).w;
    //Instruction 164
    //SAMPLE
    t10_0 = texture(_MainTex, t0.xy).w;
    //Instruction 165
    //MUL
    t10_1.x = t10_4 * t10_0;
    //Instruction 166
    //MUL
    t10_1.x = t10_1.x * vs_TEXCOORD1;
    //Instruction 167
    //MUL
    SV_Target0.w = t10_1.x * 2.0;
    //Instruction 168
    //ADD
    t10_1.xyz = _Color.xyz + _CameraBackgroundColor.xyz;
    //Instruction 169
    //ADD
    t10_1.xyz = t10_1.xyz + (-unity_FogColor.xyz);
    //Instruction 170
    //MAD
    SV_Target0.xyz = vec3(vs_TEXCOORD1) * t10_1.xyz + unity_FogColor.xyz;
    //Instruction 171
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
}
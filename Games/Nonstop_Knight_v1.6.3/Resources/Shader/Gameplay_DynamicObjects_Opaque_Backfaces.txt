Shader "CUSTOM/Gameplay_DynamicObjects_Opaque_Backfaces" {
Properties {
 _MainTex ("Diffuse (RGB)", 2D) = "white" { }
}
SubShader { 
 LOD 100
 Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry+1" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry+1" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Cull Off
  GpuProgramID 56025
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform highp vec3 _HeroLightWorldPos;
uniform highp vec4 _HeroLightColor;
uniform lowp float _HeroLightIntensity;
uniform lowp float _HeroLightRange;
uniform highp float _CustomFogTerm1;
uniform highp float _CustomFogTerm2;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_COLOR;
varying lowp float xlv_TEXCOORD1;
void main ()
{
  lowp vec3 n_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _WorldSpaceCameraPos;
  highp vec3 x_4;
  x_4 = (_glesVertex.xyz - (_World2Object * tmpvar_3).xyz);
  lowp float tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = clamp (((
    sqrt(dot (x_4, x_4))
   * _CustomFogTerm1) + _CustomFogTerm2), 0.0, 1.0);
  tmpvar_5 = tmpvar_6;
  tmpvar_2 = ((glstate_lightmodel_ambient * 2.0).xyz * 1.5);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  n_1 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex).xyz;
  highp vec3 tmpvar_12;
  highp vec3 n_13;
  n_13 = n_1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_HeroLightWorldPos - tmpvar_11);
  highp float tmpvar_15;
  tmpvar_15 = clamp ((1.0 - (
    sqrt(dot (tmpvar_14, tmpvar_14))
   / _HeroLightRange)), 0.0, 1.0);
  tmpvar_12 = (((vec3(
    max (0.0, dot (n_13, normalize((_HeroLightWorldPos - tmpvar_11))))
  ) * _HeroLightColor.xyz) * _HeroLightIntensity) * (tmpvar_15 * tmpvar_15));
  tmpvar_2 = (tmpvar_2 + (tmpvar_12 * 0.5));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 unity_FogColor;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_COLOR;
varying lowp float xlv_TEXCOORD1;
void main ()
{
  lowp vec4 color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  color_1.w = tmpvar_2.w;
  color_1.xyz = (tmpvar_2.xyz * xlv_COLOR);
  color_1.xyz = mix (unity_FogColor.xyz, color_1.xyz, vec3(xlv_TEXCOORD1));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	vec3 _HeroLightWorldPos;
uniform 	vec4 _HeroLightColor;
uniform 	lowp float _HeroLightIntensity;
uniform 	lowp float _HeroLightRange;
uniform 	float _CustomFogTerm1;
uniform 	float _CustomFogTerm2;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out lowp float vs_TEXCOORD1;
out lowp vec3 vs_COLOR0;
highp vec4 t0;
highp vec3 t1;
highp float t6;
highp float t7;
void main()
{
    //Instruction 304
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 305
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 306
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 307
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 308
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 309
    //MOV
    t0.x = _World2Object[0].y;
    //Instruction 310
    //MOV
    t0.y = _World2Object[1].y;
    //Instruction 311
    //MOV
    t0.z = _World2Object[2].y;
    //Instruction 312
    //MUL
    t0.xyz = t0.xyz * in_NORMAL0.yyy;
    //Instruction 313
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 314
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 315
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 316
    //MAD
    t0.xyz = t1.xyz * in_NORMAL0.xxx + t0.xyz;
    //Instruction 317
    //MOV
    t1.x = _World2Object[0].z;
    //Instruction 318
    //MOV
    t1.y = _World2Object[1].z;
    //Instruction 319
    //MOV
    t1.z = _World2Object[2].z;
    //Instruction 320
    //MAD
    t0.xyz = t1.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 321
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 322
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 323
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 324
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 325
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 326
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 327
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 328
    //ADD
    t1.xyz = (-t1.xyz) + _HeroLightWorldPos.xyzx.xyz;
    //Instruction 329
    //DP3
    t6 = dot(t1.xyz, t1.xyz);
    //Instruction 330
    //RSQ
    t7 = inversesqrt(t6);
    //Instruction 331
    //SQRT
    t6 = sqrt(t6);
    //Instruction 332
    //DIV
    t6 = t6 / _HeroLightRange;
    //Instruction 333
    //ADD
    t6 = (-t6) + 1.0;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 334
    //MUL
    t6 = t6 * t6;
    //Instruction 335
    //MUL
    t1.xyz = vec3(t7) * t1.xyz;
    //Instruction 336
    //DP3
    t0.x = dot(t0.xyz, t1.xyz);
    //Instruction 337
    //MAX
    t0.x = max(t0.x, 0.0);
    //Instruction 338
    //MUL
    t0.xyz = t0.xxx * _HeroLightColor.xyz;
    //Instruction 339
    //MUL
    t0.xyz = t0.xyz * vec3(_HeroLightIntensity);
    //Instruction 340
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 341
    //MUL
    t0.xyz = t0.xyz * vec3(0.5, 0.5, 0.5);
    //Instruction 342
    //MAD
    t0.xyz = glstate_lightmodel_ambient.xyz * vec3(3.0, 3.0, 3.0) + t0.xyz;
    //Instruction 343
    //MOV
    vs_COLOR0.xyz = t0.xyz;
    //Instruction 344
    //MUL
    t0.xyz = _WorldSpaceCameraPos.xyzx.yyy * _World2Object[1].xyz;
    //Instruction 345
    //MAD
    t0.xyz = _World2Object[0].xyz * _WorldSpaceCameraPos.xyzx.xxx + t0.xyz;
    //Instruction 346
    //MAD
    t0.xyz = _World2Object[2].xyz * _WorldSpaceCameraPos.xyzx.zzz + t0.xyz;
    //Instruction 347
    //ADD
    t0.xyz = t0.xyz + _World2Object[3].xyz;
    //Instruction 348
    //ADD
    t0.xyz = (-t0.xyz) + in_POSITION0.xyz;
    //Instruction 349
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 350
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 351
    //MAD
    t0.x = t0.x * _CustomFogTerm1 + _CustomFogTerm2;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 352
    //MOV
    vs_TEXCOORD1 = t0.x;
    //Instruction 353
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	vec3 _HeroLightWorldPos;
uniform 	vec4 _HeroLightColor;
uniform 	lowp float _HeroLightIntensity;
uniform 	lowp float _HeroLightRange;
uniform 	float _CustomFogTerm1;
uniform 	float _CustomFogTerm2;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in lowp float vs_TEXCOORD1;
in lowp vec3 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
lowp vec3 t10_1;
void main()
{
    //Instruction 299
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 300
    //MAD
    t10_1.xyz = t10_0.xyz * vs_COLOR0.xyz + (-unity_FogColor.xyz);
    //Instruction 301
    //MOV
    SV_Target0.w = t10_0.w;
    //Instruction 302
    //MAD
    SV_Target0.xyz = vec3(vs_TEXCOORD1) * t10_1.xyz + unity_FogColor.xyz;
    //Instruction 303
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
}
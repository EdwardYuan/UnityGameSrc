Shader "CUSTOM/HeroWeapon" {
Properties {
 _MainTex ("Diffuse (RGB)", 2D) = "white" { }
}
SubShader { 
 LOD 100
 Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry+1" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry+1" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  GpuProgramID 20786
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec3 _HeroLightWorldPos;
uniform highp vec4 _HeroLightColor;
uniform lowp float _HeroLightIntensity;
uniform lowp float _HeroLightRange;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_COLOR;
varying mediump float xlv_TEXCOORD1;
void main ()
{
  lowp vec3 n_1;
  lowp vec3 tmpvar_2;
  mediump float tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  n_1 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = (_Object2World * _glesVertex).xyz;
  highp vec3 tmpvar_9;
  highp vec3 n_10;
  n_10 = n_1;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_HeroLightWorldPos - tmpvar_8);
  highp float tmpvar_12;
  tmpvar_12 = clamp ((1.0 - (
    sqrt(dot (tmpvar_11, tmpvar_11))
   / _HeroLightRange)), 0.0, 1.0);
  tmpvar_9 = (((vec3(
    max (0.0, dot (n_10, normalize((_HeroLightWorldPos - tmpvar_8))))
  ) * _HeroLightColor.xyz) * _HeroLightIntensity) * (tmpvar_12 * tmpvar_12));
  tmpvar_2 = (tmpvar_9 * 0.5);
  highp float tmpvar_13;
  tmpvar_13 = max (0.15, dot (n_1, normalize(
    (_HeroLightWorldPos - tmpvar_8)
  )));
  tmpvar_3 = (0.5 + tmpvar_13);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_COLOR;
varying mediump float xlv_TEXCOORD1;
void main ()
{
  lowp vec4 color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  color_1.w = tmpvar_2.w;
  color_1.xyz = mix (tmpvar_2.xyz, (tmpvar_2.xyz * xlv_COLOR), vec3(0.25, 0.25, 0.25));
  color_1.xyz = (color_1.xyz * xlv_TEXCOORD1);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	vec3 _HeroLightWorldPos;
uniform 	vec4 _HeroLightColor;
uniform 	lowp float _HeroLightIntensity;
uniform 	lowp float _HeroLightRange;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump float vs_TEXCOORD1;
out lowp vec3 vs_COLOR0;
highp vec4 t0;
highp vec3 t1;
highp float t6;
highp float t7;
void main()
{
    //Instruction 64
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 65
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 66
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 67
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 68
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 69
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 70
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 71
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 72
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 73
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 74
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 75
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 76
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 77
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 78
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 79
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 80
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 81
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 82
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 83
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 84
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 85
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 86
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 87
    //ADD
    t1.xyz = (-t1.xyz) + _HeroLightWorldPos.xyzx.xyz;
    //Instruction 88
    //DP3
    t6 = dot(t1.xyz, t1.xyz);
    //Instruction 89
    //RSQ
    t7 = inversesqrt(t6);
    //Instruction 90
    //SQRT
    t6 = sqrt(t6);
    //Instruction 91
    //DIV
    t6 = t6 / _HeroLightRange;
    //Instruction 92
    //ADD
    t6 = (-t6) + 1.0;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 93
    //MUL
    t6 = t6 * t6;
    //Instruction 94
    //MUL
    t1.xyz = vec3(t7) * t1.xyz;
    //Instruction 95
    //DP3
    t0.x = dot(t0.xyz, t1.xyz);
    //Instruction 96
    //MAX
    t0.xy = max(t0.xx, vec2(0.0, 0.150000006));
    //Instruction 97
    //MUL
    t1.xyz = t0.xxx * _HeroLightColor.xyz;
    //Instruction 98
    //ADD
    t0.x = t0.y + 0.5;
    //Instruction 99
    //MOV
    vs_TEXCOORD1 = t0.x;
    //Instruction 100
    //MUL
    t0.xyz = t1.xyz * vec3(_HeroLightIntensity);
    //Instruction 101
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 102
    //MUL
    t0.xyz = t0.xyz * vec3(0.5, 0.5, 0.5);
    //Instruction 103
    //MOV
    vs_COLOR0.xyz = t0.xyz;
    //Instruction 104
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump float vs_TEXCOORD1;
in lowp vec3 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
void main()
{
    //Instruction 57
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 58
    //MAD
    t10_1.xyz = t10_0.xyz * vs_COLOR0.xyz + (-t10_0.xyz);
    //Instruction 59
    //MAD
    t10_1.xyz = t10_1.xyz * vec3(0.25, 0.25, 0.25) + t10_0.xyz;
    //Instruction 60
    //MOV
    SV_Target0.w = t10_0.w;
    //Instruction 61
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(vs_TEXCOORD1);
    //Instruction 62
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
}
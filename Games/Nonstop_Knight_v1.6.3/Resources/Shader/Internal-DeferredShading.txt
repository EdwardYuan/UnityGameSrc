Shader "Hidden/Internal-DeferredShading" {
Properties {
 _LightTexture0 ("", any) = "" { }
 _LightTextureB0 ("", 2D) = "" { }
 _ShadowMapTexture ("", any) = "" { }
 _SrcBlend ("", Float) = 1
 _DstBlend ("", Float) = 1
}
SubShader { 
 Pass {
  Tags { "SHADOWSUPPORT"="true" }
  ZWrite Off
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 36028
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(normalize(tmpvar_11));
  lightDir_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(tmpvar_13)).w;
  atten_6 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_17;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_20;
  viewDir_20 = -(tmpvar_19);
  mediump vec3 tmpvar_21;
  mediump vec3 inVec_22;
  inVec_22 = (lightDir_7 + viewDir_20);
  tmpvar_21 = (inVec_22 * inversesqrt(max (0.001, 
    dot (inVec_22, inVec_22)
  )));
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (lightDir_7, tmpvar_21));
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max ((10.0 / log2(
    (((1.0 - tmpvar_24) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_25 = (tmpvar_26 * tmpvar_26);
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_25 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_18, tmpvar_21)), tmpvar_25)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_23 * tmpvar_23)
       * gbuffer1_3.w) + (tmpvar_24 * tmpvar_24))) * tmpvar_23)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_18, lightDir_7)));
  mediump vec4 tmpvar_28;
  tmpvar_28 = exp2(-(tmpvar_27));
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4065
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4066
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4067
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4068
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4069
    //MOV
    gl_Position = t0;
    //Instruction 4070
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4071
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4072
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4073
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4074
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4075
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4076
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4077
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4078
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4079
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4080
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4081
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec2 t1;
lowp vec3 t10_1;
highp vec3 t2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_10;
highp float t13;
lowp float t10_13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
highp float t19;
mediump float t16_22;
void main()
{
    //Instruction 4002
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4003
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4004
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4005
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4006
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 4007
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 4008
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 4009
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4010
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4011
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4012
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4013
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4014
    //ADD
    t0.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4015
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 4016
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4017
    //DP3
    t13 = dot(t0.xyz, t0.xyz);
    //Instruction 4018
    //RSQ
    t19 = inversesqrt(t13);
    //Instruction 4019
    //MUL
    t13 = t13 * _LightPos.w;
    //Instruction 4020
    //SAMPLE
    t10_13 = texture(_LightTextureB0, vec2(t13)).w;
    //Instruction 4021
    //MUL
    t3.xyz = vec3(t10_13) * _LightColor.xyz;
    //Instruction 4022
    //MUL
    t0.xyz = t0.xyz * vec3(t19);
    //Instruction 4023
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + (-t0.xyz);
    //Instruction 4024
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4025
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 4026
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 4027
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 4028
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4029
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4030
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4031
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4032
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4033
    //DP3
    t16_4.w = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 4034
    //DP3
    t16_4.x = dot((-t0.xyz), t16_4.xyz);
    //Instruction 4035
    //DP3
    t16_4.y = dot(t16_5.xyz, (-t0.xyz));
    //Instruction 4036
    //MAX
    t16_0.xyz = max(t16_4.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4037
    //LOG
    t16_4.x = log2(t16_0.z);
    //Instruction 4038
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4039
    //SAMPLE
    t10_1.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4040
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 4041
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 4042
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 4043
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 4044
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 4045
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 4046
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 4047
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 4048
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 4049
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 4050
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 4051
    //MUL
    t16_16 = t16_0.y * t16_0.y;
    //Instruction 4052
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 4053
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4054
    //MAD
    t16_6 = t16_10.x * t16_0.y + 9.99999975e-05;
    //Instruction 4055
    //DIV
    t16_6 = t16_4.x / t16_6;
    //Instruction 4056
    //MAX
    t16_4.x = max(t16_6, 0.0);
    //Instruction 4057
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 4058
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_1.xyz;
    //Instruction 4059
    //MUL
    t16_4.xyz = t3.xyz * t16_4.xyz;
    //Instruction 4060
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 4061
    //MOV
    t16_0.w = 1.0;
    //Instruction 4062
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4063
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4064
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_4 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_3 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_2 = tmpvar_12;
  tmpvar_5 = _LightColor.xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((_CameraToWorld * tmpvar_8).xyz - _WorldSpaceCameraPos));
  mediump vec3 viewDir_15;
  viewDir_15 = -(tmpvar_14);
  mediump vec3 tmpvar_16;
  mediump vec3 inVec_17;
  inVec_17 = (lightDir_6 + viewDir_15);
  tmpvar_16 = (inVec_17 * inversesqrt(max (0.001, 
    dot (inVec_17, inVec_17)
  )));
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (lightDir_6, tmpvar_16));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max ((10.0 / log2(
    (((1.0 - tmpvar_19) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_20 = (tmpvar_21 * tmpvar_21);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_20 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_13, tmpvar_16)), tmpvar_20)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_18 * tmpvar_18)
       * gbuffer1_3.w) + (tmpvar_19 * tmpvar_19))) * tmpvar_18)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_13, lightDir_6)));
  mediump vec4 tmpvar_23;
  tmpvar_23 = exp2(-(tmpvar_22));
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4262
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4263
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4264
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4265
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4266
    //MOV
    gl_Position = t0;
    //Instruction 4267
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4268
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4269
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4270
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4271
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4272
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4273
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4274
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4275
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4276
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4277
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4278
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
lowp vec3 t10_0;
highp vec2 t1;
lowp vec3 t10_1;
highp vec3 t2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_5;
mediump vec3 t16_8;
mediump float t16_13;
highp float t15;
mediump float t16_18;
void main()
{
    //Instruction 4205
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4206
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4207
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4208
    //SAMPLE
    t15 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4209
    //MAD
    t15 = _ZBufferParams.x * t15 + _ZBufferParams.y;
    //Instruction 4210
    //DIV
    t15 = float(1.0) / t15;
    //Instruction 4211
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4212
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4213
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4214
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4215
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4216
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4217
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4218
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4219
    //MAD
    t16_3.xyz = (-t0.xyz) * vec3(t15) + (-_LightDir.xyz);
    //Instruction 4220
    //DP3
    t16_18 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4221
    //MAX
    t16_0.x = max(t16_18, 0.00100000005);
    //Instruction 4222
    //RSQ
    t16_18 = inversesqrt(t16_0.x);
    //Instruction 4223
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 4224
    //SAMPLE
    t10_0.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4225
    //MAD
    t16_4.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4226
    //DP3
    t16_18 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4227
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 4228
    //MUL
    t16_4.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 4229
    //DP3
    t16_3.w = dot(t16_4.xyz, t16_3.xyz);
    //Instruction 4230
    //DP3
    t16_3.x = dot((-_LightDir.xyz), t16_3.xyz);
    //Instruction 4231
    //MAX
    t16_0.x = max(t16_3.x, 0.0);
    //Instruction 4232
    //DP3
    t16_3.x = dot(t16_4.xyz, (-_LightDir.xyz));
    //Instruction 4233
    //MAX
    t16_5.xy = max(t16_3.xw, vec2(0.0, 0.0));
    //Instruction 4234
    //LOG
    t16_3.x = log2(t16_5.y);
    //Instruction 4235
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4236
    //SAMPLE
    t10_1.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4237
    //ADD
    t16_8.x = (-t10_2.w) + 1.0;
    //Instruction 4238
    //ADD
    t16_13 = (-t16_8.x) + 1.0;
    //Instruction 4239
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 4240
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 4241
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 4242
    //MAX
    t16_8.y = max(t16_13, -255.936996);
    //Instruction 4243
    //MUL
    t16_8.xz = t16_8.xy * t16_8.xy;
    //Instruction 4244
    //MAD
    t16_13 = t16_8.y * t16_8.y + 1.0;
    //Instruction 4245
    //MUL
    t16_3.x = t16_3.x * t16_8.z;
    //Instruction 4246
    //EXP
    t16_3.x = exp2(t16_3.x);
    //Instruction 4247
    //MUL
    t16_3.x = t16_3.x * t16_13;
    //Instruction 4248
    //MUL
    t16_13 = t16_0.x * t16_0.x;
    //Instruction 4249
    //MAD
    t16_8.x = t16_13 * t10_2.w + t16_8.x;
    //Instruction 4250
    //MUL
    t16_8.x = t16_8.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4251
    //MAD
    t16_0.x = t16_8.x * t16_0.x + 9.99999975e-05;
    //Instruction 4252
    //DIV
    t16_0.x = t16_3.x / t16_0.x;
    //Instruction 4253
    //MAX
    t16_3.x = max(t16_0.x, 0.0);
    //Instruction 4254
    //MIN
    t16_3.x = min(t16_3.x, 100.0);
    //Instruction 4255
    //MAD
    t16_3.xyz = t16_3.xxx * t10_2.xyz + t10_1.xyz;
    //Instruction 4256
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor.xyz;
    //Instruction 4257
    //MUL
    t16_0.xyz = t16_5.xxx * t16_3.xyz;
    //Instruction 4258
    //MOV
    t16_0.w = 1.0;
    //Instruction 4259
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4260
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4261
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_11);
  lightDir_7 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_10;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_LightTexture0, tmpvar_14).w;
  atten_6 = tmpvar_15;
  atten_6 = (atten_6 * float((tmpvar_14.w < 0.0)));
  highp float tmpvar_16;
  tmpvar_16 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  atten_6 = (atten_6 * tmpvar_17.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_20;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_23;
  viewDir_23 = -(tmpvar_22);
  mediump vec3 tmpvar_24;
  mediump vec3 inVec_25;
  inVec_25 = (lightDir_7 + viewDir_23);
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (lightDir_7, tmpvar_24));
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = max ((10.0 / log2(
    (((1.0 - tmpvar_27) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_28 = (tmpvar_29 * tmpvar_29);
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_28 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_21, tmpvar_24)), tmpvar_28)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_26 * tmpvar_26)
       * gbuffer1_3.w) + (tmpvar_27 * tmpvar_27))) * tmpvar_26)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_21, lightDir_7)));
  mediump vec4 tmpvar_31;
  tmpvar_31 = exp2(-(tmpvar_30));
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4387
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4388
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4389
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4390
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4391
    //MOV
    gl_Position = t0;
    //Instruction 4392
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4393
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4394
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4395
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4396
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4397
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4398
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4399
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4400
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4401
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4402
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4403
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp vec4 t1;
mediump float t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec4 t10_2;
highp vec3 t3;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_10;
highp float t12;
bool tb12;
highp float t13;
lowp float t10_13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
highp float t19;
mediump float t16_19;
mediump float t16_22;
void main()
{
    //Instruction 4312
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4313
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4314
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4315
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4316
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 4317
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 4318
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 4319
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4320
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4321
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4322
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4323
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4324
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 4325
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4326
    //ADD
    t3.xyz = (-t0.xyz) + _LightPos.xyz;
    //Instruction 4327
    //DP3
    t13 = dot(t3.xyz, t3.xyz);
    //Instruction 4328
    //RSQ
    t19 = inversesqrt(t13);
    //Instruction 4329
    //MUL
    t13 = t13 * _LightPos.w;
    //Instruction 4330
    //SAMPLE
    t10_13 = texture(_LightTextureB0, vec2(t13)).w;
    //Instruction 4331
    //MUL
    t3.xyz = vec3(t19) * t3.xyz;
    //Instruction 4332
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + t3.xyz;
    //Instruction 4333
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4334
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 4335
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 4336
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 4337
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4338
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4339
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4340
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4341
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4342
    //DP3
    t16_22 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 4343
    //DP3
    t16_4.x = dot(t3.xyz, t16_4.xyz);
    //Instruction 4344
    //DP3
    t16_10.x = dot(t16_5.xyz, t3.xyz);
    //Instruction 4345
    //MAX
    t16_18 = max(t16_10.x, 0.0);
    //Instruction 4346
    //MAX
    t16_19 = max(t16_4.x, 0.0);
    //Instruction 4347
    //MAX
    t16_2 = max(t16_22, 0.0);
    //Instruction 4348
    //LOG
    t16_4.x = log2(t16_2);
    //Instruction 4349
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4350
    //SAMPLE
    t10_3.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4351
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 4352
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 4353
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 4354
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 4355
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 4356
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 4357
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 4358
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 4359
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 4360
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 4361
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 4362
    //MUL
    t16_16 = t16_19 * t16_19;
    //Instruction 4363
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 4364
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4365
    //MAD
    t16_1 = t16_10.x * t16_19 + 9.99999975e-05;
    //Instruction 4366
    //DIV
    t16_1 = t16_4.x / t16_1;
    //Instruction 4367
    //MAX
    t16_4.x = max(t16_1, 0.0);
    //Instruction 4368
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 4369
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_3.xyz;
    //Instruction 4370
    //MUL
    t1.xyw = t0.yyy * _LightMatrix0[1].xyw;
    //Instruction 4371
    //MAD
    t1.xyw = _LightMatrix0[0].xyw * t0.xxx + t1.xyw;
    //Instruction 4372
    //MAD
    t0.xyz = _LightMatrix0[2].xyw * t0.zzz + t1.xyw;
    //Instruction 4373
    //ADD
    t0.xyz = t0.xyz + _LightMatrix0[3].xyw;
    //Instruction 4374
    //DIV
    t0.xy = t0.xy / t0.zz;
    //Instruction 4375
    //LT
    tb12 = t0.z<0.0;
    //Instruction 4376
    //AND
    t12 = tb12 ? 1.0 : float(0.0);
    //Instruction 4377
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xy).w;
    //Instruction 4378
    //MUL
    t0.x = t12 * t10_0;
    //Instruction 4379
    //MUL
    t0.x = t10_13 * t0.x;
    //Instruction 4380
    //MUL
    t0.xyz = t0.xxx * _LightColor.xyz;
    //Instruction 4381
    //MUL
    t16_4.xyz = t0.xyz * t16_4.xyz;
    //Instruction 4382
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 4383
    //MOV
    t16_0.w = 1.0;
    //Instruction 4384
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4385
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4386
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(normalize(tmpvar_11));
  lightDir_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(tmpvar_13)).w;
  atten_6 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  lowp vec4 tmpvar_16;
  highp vec3 P_17;
  P_17 = (_LightMatrix0 * tmpvar_15).xyz;
  tmpvar_16 = textureCube (_LightTexture0, P_17);
  atten_6 = (atten_6 * tmpvar_16.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_20;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_23;
  viewDir_23 = -(tmpvar_22);
  mediump vec3 tmpvar_24;
  mediump vec3 inVec_25;
  inVec_25 = (lightDir_7 + viewDir_23);
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (lightDir_7, tmpvar_24));
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = max ((10.0 / log2(
    (((1.0 - tmpvar_27) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_28 = (tmpvar_29 * tmpvar_29);
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_28 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_21, tmpvar_24)), tmpvar_28)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_26 * tmpvar_26)
       * gbuffer1_3.w) + (tmpvar_27 * tmpvar_27))) * tmpvar_26)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_21, lightDir_7)));
  mediump vec4 tmpvar_31;
  tmpvar_31 = exp2(-(tmpvar_30));
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3167
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3168
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3169
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3170
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3171
    //MOV
    gl_Position = t0;
    //Instruction 3172
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3173
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3174
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3175
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3176
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3177
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3178
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3179
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3180
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3181
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3182
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3183
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp vec4 t1;
mediump float t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec4 t10_2;
highp vec3 t3;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_10;
highp float t13;
lowp float t10_13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
highp float t19;
mediump float t16_19;
mediump float t16_22;
void main()
{
    //Instruction 3096
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3097
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3098
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3099
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3100
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3101
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3102
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 3103
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 3104
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 3105
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3106
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 3107
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3108
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3109
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3110
    //ADD
    t3.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 3111
    //DP3
    t13 = dot(t3.xyz, t3.xyz);
    //Instruction 3112
    //RSQ
    t19 = inversesqrt(t13);
    //Instruction 3113
    //MUL
    t13 = t13 * _LightPos.w;
    //Instruction 3114
    //SAMPLE
    t10_13 = texture(_LightTextureB0, vec2(t13)).w;
    //Instruction 3115
    //MUL
    t3.xyz = vec3(t19) * t3.xyz;
    //Instruction 3116
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + (-t3.xyz);
    //Instruction 3117
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3118
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 3119
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 3120
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 3121
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 3122
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3123
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3124
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 3125
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 3126
    //DP3
    t16_22 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 3127
    //DP3
    t16_4.x = dot((-t3.xyz), t16_4.xyz);
    //Instruction 3128
    //DP3
    t16_10.x = dot(t16_5.xyz, (-t3.xyz));
    //Instruction 3129
    //MAX
    t16_18 = max(t16_10.x, 0.0);
    //Instruction 3130
    //MAX
    t16_19 = max(t16_4.x, 0.0);
    //Instruction 3131
    //MAX
    t16_2 = max(t16_22, 0.0);
    //Instruction 3132
    //LOG
    t16_4.x = log2(t16_2);
    //Instruction 3133
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 3134
    //SAMPLE
    t10_3.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 3135
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 3136
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 3137
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 3138
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 3139
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 3140
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 3141
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 3142
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 3143
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 3144
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3145
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 3146
    //MUL
    t16_16 = t16_19 * t16_19;
    //Instruction 3147
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 3148
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3149
    //MAD
    t16_1 = t16_10.x * t16_19 + 9.99999975e-05;
    //Instruction 3150
    //DIV
    t16_1 = t16_4.x / t16_1;
    //Instruction 3151
    //MAX
    t16_4.x = max(t16_1, 0.0);
    //Instruction 3152
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 3153
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_3.xyz;
    //Instruction 3154
    //MUL
    t1.xyw = t0.yyy * _LightMatrix0[1].xyz;
    //Instruction 3155
    //MAD
    t1.xyw = _LightMatrix0[0].xyz * t0.xxx + t1.xyw;
    //Instruction 3156
    //MAD
    t0.xyz = _LightMatrix0[2].xyz * t0.zzz + t1.xyw;
    //Instruction 3157
    //ADD
    t0.xyz = t0.xyz + _LightMatrix0[3].xyz;
    //Instruction 3158
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xyz).w;
    //Instruction 3159
    //MUL
    t16_0.x = t10_0 * t10_13;
    //Instruction 3160
    //MUL
    t0.xyz = t16_0.xxx * _LightColor.xyz;
    //Instruction 3161
    //MUL
    t16_4.xyz = t0.xyz * t16_4.xyz;
    //Instruction 3162
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 3163
    //MOV
    t16_0.w = 1.0;
    //Instruction 3164
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 3165
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3166
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_10;
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (_LightMatrix0 * tmpvar_12).xy;
  tmpvar_13 = texture2D (_LightTexture0, P_14);
  atten_6 = tmpvar_13.w;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_17;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_20;
  viewDir_20 = -(tmpvar_19);
  mediump vec3 tmpvar_21;
  mediump vec3 inVec_22;
  inVec_22 = (lightDir_7 + viewDir_20);
  tmpvar_21 = (inVec_22 * inversesqrt(max (0.001, 
    dot (inVec_22, inVec_22)
  )));
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (lightDir_7, tmpvar_21));
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max ((10.0 / log2(
    (((1.0 - tmpvar_24) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_25 = (tmpvar_26 * tmpvar_26);
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_25 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_18, tmpvar_21)), tmpvar_25)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_23 * tmpvar_23)
       * gbuffer1_3.w) + (tmpvar_24 * tmpvar_24))) * tmpvar_23)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_18, lightDir_7)));
  mediump vec4 tmpvar_28;
  tmpvar_28 = exp2(-(tmpvar_27));
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4145
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4146
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4147
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4148
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4149
    //MOV
    gl_Position = t0;
    //Instruction 4150
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4151
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4152
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4153
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4154
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4155
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4156
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4157
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4158
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4159
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4160
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4161
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp vec2 t1;
lowp vec4 t10_1;
highp vec3 t2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec3 t16_4;
highp vec3 t5;
mediump vec3 t16_8;
mediump vec2 t16_11;
mediump float t16_13;
highp float t15;
mediump float t16_15;
mediump float t16_18;
void main()
{
    //Instruction 4082
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4083
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4084
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4085
    //SAMPLE
    t15 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4086
    //MAD
    t15 = _ZBufferParams.x * t15 + _ZBufferParams.y;
    //Instruction 4087
    //DIV
    t15 = float(1.0) / t15;
    //Instruction 4088
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4089
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4090
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4091
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4092
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4093
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4094
    //DP3
    t15 = dot(t2.xyz, t2.xyz);
    //Instruction 4095
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4096
    //MAD
    t16_3.xyz = (-t2.xyz) * vec3(t15) + (-_LightDir.xyz);
    //Instruction 4097
    //DP3
    t16_18 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4098
    //MAX
    t16_15 = max(t16_18, 0.00100000005);
    //Instruction 4099
    //RSQ
    t16_18 = inversesqrt(t16_15);
    //Instruction 4100
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 4101
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4102
    //MAD
    t16_4.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4103
    //DP3
    t16_18 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4104
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 4105
    //MUL
    t16_4.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 4106
    //DP3
    t16_3.w = dot(t16_4.xyz, t16_3.xyz);
    //Instruction 4107
    //DP3
    t16_3.x = dot((-_LightDir.xyz), t16_3.xyz);
    //Instruction 4108
    //MAX
    t16_15 = max(t16_3.x, 0.0);
    //Instruction 4109
    //DP3
    t16_3.x = dot(t16_4.xyz, (-_LightDir.xyz));
    //Instruction 4110
    //MAX
    t16_11.xy = max(t16_3.xw, vec2(0.0, 0.0));
    //Instruction 4111
    //LOG
    t16_3.x = log2(t16_11.y);
    //Instruction 4112
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4113
    //SAMPLE
    t10_1.xyw = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4114
    //ADD
    t16_8.x = (-t10_2.w) + 1.0;
    //Instruction 4115
    //ADD
    t16_13 = (-t16_8.x) + 1.0;
    //Instruction 4116
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 4117
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 4118
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 4119
    //MAX
    t16_8.y = max(t16_13, -255.936996);
    //Instruction 4120
    //MUL
    t16_8.xz = t16_8.xy * t16_8.xy;
    //Instruction 4121
    //MAD
    t16_13 = t16_8.y * t16_8.y + 1.0;
    //Instruction 4122
    //MUL
    t16_3.x = t16_3.x * t16_8.z;
    //Instruction 4123
    //EXP
    t16_3.x = exp2(t16_3.x);
    //Instruction 4124
    //MUL
    t16_3.x = t16_3.x * t16_13;
    //Instruction 4125
    //MUL
    t16_13 = t16_15 * t16_15;
    //Instruction 4126
    //MAD
    t16_8.x = t16_13 * t10_2.w + t16_8.x;
    //Instruction 4127
    //MUL
    t16_8.x = t16_8.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4128
    //MAD
    t16_15 = t16_8.x * t16_15 + 9.99999975e-05;
    //Instruction 4129
    //DIV
    t16_15 = t16_3.x / t16_15;
    //Instruction 4130
    //MAX
    t16_3.x = max(t16_15, 0.0);
    //Instruction 4131
    //MIN
    t16_3.x = min(t16_3.x, 100.0);
    //Instruction 4132
    //MAD
    t16_3.xyz = t16_3.xxx * t10_2.xyz + t10_1.xyw;
    //Instruction 4133
    //MUL
    t5.xz = t0.yy * _LightMatrix0[1].xy;
    //Instruction 4134
    //MAD
    t0.xy = _LightMatrix0[0].xy * t0.xx + t5.xz;
    //Instruction 4135
    //MAD
    t0.xy = _LightMatrix0[2].xy * t0.zz + t0.xy;
    //Instruction 4136
    //ADD
    t0.xy = t0.xy + _LightMatrix0[3].xy;
    //Instruction 4137
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xy).w;
    //Instruction 4138
    //MUL
    t0.xyz = vec3(t10_0) * _LightColor.xyz;
    //Instruction 4139
    //MUL
    t16_3.xyz = t0.xyz * t16_3.xyz;
    //Instruction 4140
    //MUL
    t16_0.xyz = t16_11.xxx * t16_3.xyz;
    //Instruction 4141
    //MOV
    t16_0.w = 1.0;
    //Instruction 4142
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4143
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4144
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  lightDir_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_10;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_LightTexture0, tmpvar_15).w;
  atten_6 = tmpvar_16;
  atten_6 = (atten_6 * float((tmpvar_15.w < 0.0)));
  highp float tmpvar_17;
  tmpvar_17 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(tmpvar_17));
  atten_6 = (atten_6 * tmpvar_18.w);
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (((
    mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_10;
  highp vec4 tmpvar_22;
  tmpvar_22 = (unity_World2Shadow[0] * tmpvar_21);
  lowp float tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, tmpvar_22);
  mediump float tmpvar_25;
  if ((tmpvar_24.x < (tmpvar_22.z / tmpvar_22.w))) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  tmpvar_23 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = clamp ((tmpvar_23 + tmpvar_20), 0.0, 1.0);
  tmpvar_19 = tmpvar_26;
  atten_6 = (atten_6 * tmpvar_19);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_29;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_30;
  tmpvar_30 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_32;
  viewDir_32 = -(tmpvar_31);
  mediump vec3 tmpvar_33;
  mediump vec3 inVec_34;
  inVec_34 = (lightDir_7 + viewDir_32);
  tmpvar_33 = (inVec_34 * inversesqrt(max (0.001, 
    dot (inVec_34, inVec_34)
  )));
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (lightDir_7, tmpvar_33));
  mediump float tmpvar_36;
  tmpvar_36 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = max ((10.0 / log2(
    (((1.0 - tmpvar_36) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_37 = (tmpvar_38 * tmpvar_38);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_37 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_30, tmpvar_33)), tmpvar_37)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_35 * tmpvar_35)
       * gbuffer1_3.w) + (tmpvar_36 * tmpvar_36))) * tmpvar_35)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_30, lightDir_7)));
  mediump vec4 tmpvar_40;
  tmpvar_40 = exp2(-(tmpvar_39));
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  lightDir_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_10;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_LightTexture0, tmpvar_15).w;
  atten_6 = tmpvar_16;
  atten_6 = (atten_6 * float((tmpvar_15.w < 0.0)));
  highp float tmpvar_17;
  tmpvar_17 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(tmpvar_17));
  atten_6 = (atten_6 * tmpvar_18.w);
  mediump float tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_10;
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_World2Shadow[0] * tmpvar_20);
  lowp float tmpvar_22;
  mediump float shadow_23;
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DProjEXT (_ShadowMapTexture, tmpvar_21);
  mediump float tmpvar_25;
  tmpvar_25 = tmpvar_24;
  shadow_23 = (_LightShadowData.x + (tmpvar_25 * (1.0 - _LightShadowData.x)));
  tmpvar_22 = shadow_23;
  highp float tmpvar_26;
  tmpvar_26 = clamp ((tmpvar_22 + clamp (
    ((mix (tmpvar_9.z, sqrt(
      dot (tmpvar_11, tmpvar_11)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_19 = tmpvar_26;
  atten_6 = (atten_6 * tmpvar_19);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_29;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_30;
  tmpvar_30 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_32;
  viewDir_32 = -(tmpvar_31);
  mediump vec3 tmpvar_33;
  mediump vec3 inVec_34;
  inVec_34 = (lightDir_7 + viewDir_32);
  tmpvar_33 = (inVec_34 * inversesqrt(max (0.001, 
    dot (inVec_34, inVec_34)
  )));
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (lightDir_7, tmpvar_33));
  mediump float tmpvar_36;
  tmpvar_36 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = max ((10.0 / log2(
    (((1.0 - tmpvar_36) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_37 = (tmpvar_38 * tmpvar_38);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_37 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_30, tmpvar_33)), tmpvar_37)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_35 * tmpvar_35)
       * gbuffer1_3.w) + (tmpvar_36 * tmpvar_36))) * tmpvar_35)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_30, lightDir_7)));
  mediump vec4 tmpvar_40;
  tmpvar_40 = exp2(-(tmpvar_39));
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4371
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4372
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4373
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4374
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4375
    //MOV
    gl_Position = t0;
    //Instruction 4376
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4377
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4378
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4379
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4380
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4381
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4382
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4383
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4384
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4385
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4386
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4387
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
lowp float t10_1;
highp vec2 t2;
lowp vec3 t10_2;
highp vec4 t3;
lowp vec4 t10_3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump float t16_7;
highp vec3 t8;
lowp float t10_8;
mediump vec3 t16_12;
mediump float t16_14;
highp float t15;
lowp float t10_15;
mediump float t16_21;
highp float t22;
mediump float t16_22;
bool tb22;
mediump float t16_23;
mediump float t16_24;
void main()
{
    //Instruction 4279
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4280
    //DIV
    t1.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4281
    //MUL
    t1.xyz = t1.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4282
    //DIV
    t2.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4283
    //SAMPLE
    t22 = texture(_CameraDepthTexture, t2.xy).x;
    //Instruction 4284
    //MAD
    t22 = _ZBufferParams.x * t22 + _ZBufferParams.y;
    //Instruction 4285
    //DIV
    t22 = float(1.0) / t22;
    //Instruction 4286
    //MUL
    t3.xyz = vec3(t22) * t1.xyz;
    //Instruction 4287
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 4288
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 4289
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 4290
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 4291
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 4292
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 4293
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 4294
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 4295
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 4296
    //SAMPLE_C_LZ
    vec3 txVec12 = vec3(t4.xy,t4.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    //Instruction 4297
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 4298
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4299
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 4300
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 4301
    //MAD
    t1.x = (-t1.z) * t22 + t1.x;
    //Instruction 4302
    //MAD
    t1.x = unity_ShadowFadeCenterAndType.w * t1.x + t3.z;
    //Instruction 4303
    //MAD
    t1.x = t1.x * _LightShadowData.z + _LightShadowData.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 4304
    //ADD
    t1.x = t16_0.x + t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 4305
    //MUL
    t8.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 4306
    //MAD
    t8.xyz = _LightMatrix0[0].xyw * t3.xxx + t8.xyz;
    //Instruction 4307
    //MAD
    t8.xyz = _LightMatrix0[2].xyw * t3.www + t8.xyz;
    //Instruction 4308
    //ADD
    t8.xyz = t8.xyz + _LightMatrix0[3].xyw;
    //Instruction 4309
    //DIV
    t8.xy = t8.xy / t8.zz;
    //Instruction 4310
    //LT
    tb22 = t8.z<0.0;
    //Instruction 4311
    //AND
    t22 = tb22 ? 1.0 : float(0.0);
    //Instruction 4312
    //SAMPLE
    t10_8 = texture(_LightTexture0, t8.xy).w;
    //Instruction 4313
    //MUL
    t8.x = t22 * t10_8;
    //Instruction 4314
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 4315
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4316
    //DP3
    t15 = dot(t4.xyz, t4.xyz);
    //Instruction 4317
    //MUL
    t22 = t15 * _LightPos.w;
    //Instruction 4318
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4319
    //MUL
    t4.xyz = vec3(t15) * t4.xyz;
    //Instruction 4320
    //SAMPLE
    t10_15 = texture(_LightTextureB0, vec2(t22)).w;
    //Instruction 4321
    //MUL
    t8.x = t10_15 * t8.x;
    //Instruction 4322
    //MUL
    t1.x = t1.x * t8.x;
    //Instruction 4323
    //MUL
    t1.xyz = t1.xxx * _LightColor.xyz;
    //Instruction 4324
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 4325
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 4326
    //MAD
    t16_0.xyz = (-t3.xyz) * vec3(t22) + t4.xyz;
    //Instruction 4327
    //DP3
    t16_21 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 4328
    //MAX
    t16_22 = max(t16_21, 0.00100000005);
    //Instruction 4329
    //RSQ
    t16_21 = inversesqrt(t16_22);
    //Instruction 4330
    //MUL
    t16_0.xyz = vec3(t16_21) * t16_0.xyz;
    //Instruction 4331
    //DP3
    t16_21 = dot(t4.xyz, t16_0.xyz);
    //Instruction 4332
    //MAX
    t16_22 = max(t16_21, 0.0);
    //Instruction 4333
    //MUL
    t16_21 = t16_22 * t16_22;
    //Instruction 4334
    //SAMPLE
    t10_3 = texture(_CameraGBufferTexture1, t2.xy);
    //Instruction 4335
    //ADD
    t16_5 = (-t10_3.w) + 1.0;
    //Instruction 4336
    //MUL
    t16_12.x = t16_5 * t16_5;
    //Instruction 4337
    //ADD
    t16_5 = (-t16_5) + 1.0;
    //Instruction 4338
    //MAD
    t16_5 = t16_5 * 0.967999995 + 0.0299999993;
    //Instruction 4339
    //LOG
    t16_5 = log2(t16_5);
    //Instruction 4340
    //DIV
    t16_5 = 10.0 / t16_5;
    //Instruction 4341
    //MAX
    t16_5 = max(t16_5, -255.936996);
    //Instruction 4342
    //MAD
    t16_21 = t16_21 * t10_3.w + t16_12.x;
    //Instruction 4343
    //MUL
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    //Instruction 4344
    //MAD
    t16_22 = t16_21 * t16_22 + 9.99999975e-05;
    //Instruction 4345
    //SAMPLE
    t10_6.xyz = texture(_CameraGBufferTexture2, t2.xy).xyz;
    //Instruction 4346
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture0, t2.xy).xyz;
    //Instruction 4347
    //MAD
    t16_12.xyz = t10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4348
    //DP3
    t16_21 = dot(t16_12.xyz, t16_12.xyz);
    //Instruction 4349
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 4350
    //MUL
    t16_12.xyz = vec3(t16_21) * t16_12.xyz;
    //Instruction 4351
    //DP3
    t16_0.x = dot(t16_12.xyz, t16_0.xyz);
    //Instruction 4352
    //DP3
    t16_7 = dot(t16_12.xyz, t4.xyz);
    //Instruction 4353
    //MAX
    t16_23 = max(t16_7, 0.0);
    //Instruction 4354
    //MAX
    t16_24 = max(t16_0.x, 0.0);
    //Instruction 4355
    //LOG
    t16_0.x = log2(t16_24);
    //Instruction 4356
    //MUL
    t16_7 = t16_5 * t16_5;
    //Instruction 4357
    //MAD
    t16_14 = t16_5 * t16_5 + 1.0;
    //Instruction 4358
    //MUL
    t16_0.x = t16_0.x * t16_7;
    //Instruction 4359
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 4360
    //MUL
    t16_0.x = t16_0.x * t16_14;
    //Instruction 4361
    //DIV
    t16_22 = t16_0.x / t16_22;
    //Instruction 4362
    //MAX
    t16_0.x = max(t16_22, 0.0);
    //Instruction 4363
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 4364
    //MAD
    t16_0.xyz = t16_0.xxx * t10_3.xyz + t10_2.xyz;
    //Instruction 4365
    //MUL
    t16_0.xyz = t1.xyz * t16_0.xyz;
    //Instruction 4366
    //MUL
    t16_0.xyz = vec3(t16_23) * t16_0.xyz;
    //Instruction 4367
    //MOV
    t16_0.w = 1.0;
    //Instruction 4368
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4369
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4370
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_15;
  tmpvar_15 = clamp ((tmpvar_14.x + clamp (
    ((mix (tmpvar_9.z, sqrt(
      dot (tmpvar_11, tmpvar_11)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_13 = tmpvar_15;
  atten_6 = tmpvar_13;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_18;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_19;
  tmpvar_19 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_21;
  viewDir_21 = -(tmpvar_20);
  mediump vec3 tmpvar_22;
  mediump vec3 inVec_23;
  inVec_23 = (lightDir_7 + viewDir_21);
  tmpvar_22 = (inVec_23 * inversesqrt(max (0.001, 
    dot (inVec_23, inVec_23)
  )));
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (lightDir_7, tmpvar_22));
  mediump float tmpvar_25;
  tmpvar_25 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max ((10.0 / log2(
    (((1.0 - tmpvar_25) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_26 = (tmpvar_27 * tmpvar_27);
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_26 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_19, tmpvar_22)), tmpvar_26)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_24 * tmpvar_24)
       * gbuffer1_3.w) + (tmpvar_25 * tmpvar_25))) * tmpvar_24)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_19, lightDir_7)));
  mediump vec4 tmpvar_29;
  tmpvar_29 = exp2(-(tmpvar_28));
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_15;
  tmpvar_15 = clamp ((tmpvar_14.x + clamp (
    ((mix (tmpvar_9.z, sqrt(
      dot (tmpvar_11, tmpvar_11)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_13 = tmpvar_15;
  atten_6 = tmpvar_13;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_10;
  lowp vec4 tmpvar_17;
  highp vec2 P_18;
  P_18 = (_LightMatrix0 * tmpvar_16).xy;
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  atten_6 = (atten_6 * tmpvar_17.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_21;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_22;
  tmpvar_22 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_24;
  viewDir_24 = -(tmpvar_23);
  mediump vec3 tmpvar_25;
  mediump vec3 inVec_26;
  inVec_26 = (lightDir_7 + viewDir_24);
  tmpvar_25 = (inVec_26 * inversesqrt(max (0.001, 
    dot (inVec_26, inVec_26)
  )));
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (lightDir_7, tmpvar_25));
  mediump float tmpvar_28;
  tmpvar_28 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = max ((10.0 / log2(
    (((1.0 - tmpvar_28) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_29 = (tmpvar_30 * tmpvar_30);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_29 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_22, tmpvar_25)), tmpvar_29)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_27 * tmpvar_27)
       * gbuffer1_3.w) + (tmpvar_28 * tmpvar_28))) * tmpvar_27)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_22, lightDir_7)));
  mediump vec4 tmpvar_32;
  tmpvar_32 = exp2(-(tmpvar_31));
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(normalize(tmpvar_11));
  lightDir_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(tmpvar_13)).w;
  atten_6 = tmpvar_14;
  highp float mydist_15;
  mydist_15 = ((sqrt(
    dot (tmpvar_11, tmpvar_11)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_16;
  tmpvar_16 = dot (textureCube (_ShadowMapTexture, tmpvar_11), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_17;
  if ((tmpvar_16 < mydist_15)) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  atten_6 = (atten_6 * tmpvar_17);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_20;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_23;
  viewDir_23 = -(tmpvar_22);
  mediump vec3 tmpvar_24;
  mediump vec3 inVec_25;
  inVec_25 = (lightDir_7 + viewDir_23);
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (lightDir_7, tmpvar_24));
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = max ((10.0 / log2(
    (((1.0 - tmpvar_27) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_28 = (tmpvar_29 * tmpvar_29);
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_28 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_21, tmpvar_24)), tmpvar_28)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_26 * tmpvar_26)
       * gbuffer1_3.w) + (tmpvar_27 * tmpvar_27))) * tmpvar_26)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_21, lightDir_7)));
  mediump vec4 tmpvar_31;
  tmpvar_31 = exp2(-(tmpvar_30));
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4233
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4234
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4235
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4236
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4237
    //MOV
    gl_Position = t0;
    //Instruction 4238
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4239
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4240
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4241
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4242
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4243
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4244
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4245
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4246
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4247
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4248
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4249
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec2 t1;
lowp vec4 t10_1;
highp vec3 t2;
lowp vec4 t10_2;
highp vec3 t3;
highp vec4 t4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_12;
highp float t14;
mediump float t16_14;
highp float t15;
mediump float t16_19;
highp float t21;
lowp float t10_21;
highp float t22;
mediump float t16_26;
void main()
{
    //Instruction 4162
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4163
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4164
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4165
    //SAMPLE
    t21 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4166
    //MAD
    t21 = _ZBufferParams.x * t21 + _ZBufferParams.y;
    //Instruction 4167
    //DIV
    t21 = float(1.0) / t21;
    //Instruction 4168
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 4169
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4170
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4171
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4172
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4173
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4174
    //ADD
    t0.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4175
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 4176
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 4177
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4178
    //RSQ
    t22 = inversesqrt(t15);
    //Instruction 4179
    //MUL
    t3.xyz = t0.xyz * vec3(t22);
    //Instruction 4180
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t0.xyz);
    //Instruction 4181
    //DP4
    t0.x = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4182
    //MAD
    t16_5.xyz = (-t2.xyz) * vec3(t21) + (-t3.xyz);
    //Instruction 4183
    //DP3
    t16_26 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4184
    //MAX
    t16_7.x = max(t16_26, 0.00100000005);
    //Instruction 4185
    //RSQ
    t16_26 = inversesqrt(t16_7.x);
    //Instruction 4186
    //MUL
    t16_5.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 4187
    //SAMPLE
    t10_7.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4188
    //MAD
    t16_6.xyz = t10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4189
    //DP3
    t16_26 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 4190
    //RSQ
    t16_26 = inversesqrt(t16_26);
    //Instruction 4191
    //MUL
    t16_6.xyz = vec3(t16_26) * t16_6.xyz;
    //Instruction 4192
    //DP3
    t16_5.w = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 4193
    //DP3
    t16_5.x = dot((-t3.xyz), t16_5.xyz);
    //Instruction 4194
    //DP3
    t16_5.y = dot(t16_6.xyz, (-t3.xyz));
    //Instruction 4195
    //MAX
    t16_7.xyz = max(t16_5.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4196
    //LOG
    t16_5.x = log2(t16_7.z);
    //Instruction 4197
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4198
    //SAMPLE
    t10_1.xyw = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4199
    //ADD
    t16_12.x = (-t10_2.w) + 1.0;
    //Instruction 4200
    //ADD
    t16_19 = (-t16_12.x) + 1.0;
    //Instruction 4201
    //MAD
    t16_19 = t16_19 * 0.967999995 + 0.0299999993;
    //Instruction 4202
    //LOG
    t16_19 = log2(t16_19);
    //Instruction 4203
    //DIV
    t16_19 = 10.0 / t16_19;
    //Instruction 4204
    //MAX
    t16_12.y = max(t16_19, -255.936996);
    //Instruction 4205
    //MUL
    t16_12.xz = t16_12.xy * t16_12.xy;
    //Instruction 4206
    //MAD
    t16_19 = t16_12.y * t16_12.y + 1.0;
    //Instruction 4207
    //MUL
    t16_5.x = t16_5.x * t16_12.z;
    //Instruction 4208
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 4209
    //MUL
    t16_5.x = t16_5.x * t16_19;
    //Instruction 4210
    //MUL
    t16_19 = t16_7.y * t16_7.y;
    //Instruction 4211
    //MAD
    t16_12.x = t16_19 * t10_2.w + t16_12.x;
    //Instruction 4212
    //MUL
    t16_12.x = t16_12.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4213
    //MAD
    t16_14 = t16_12.x * t16_7.y + 9.99999975e-05;
    //Instruction 4214
    //DIV
    t16_14 = t16_5.x / t16_14;
    //Instruction 4215
    //MAX
    t16_5.x = max(t16_14, 0.0);
    //Instruction 4216
    //MIN
    t16_5.x = min(t16_5.x, 100.0);
    //Instruction 4217
    //MAD
    t16_5.xyz = t16_5.xxx * t10_2.xyz + t10_1.xyw;
    //Instruction 4218
    //SQRT
    t14 = sqrt(t15);
    //Instruction 4219
    //MUL
    t21 = t15 * _LightPos.w;
    //Instruction 4220
    //SAMPLE
    t10_21 = texture(_LightTextureB0, vec2(t21)).w;
    //Instruction 4221
    //MUL
    t14 = t14 * _LightPositionRange.w;
    //Instruction 4222
    //MUL
    t14 = t14 * 0.970000029;
    //Instruction 4223
    //LT
    tb0 = t0.x<t14;
    //Instruction 4224
    //MOVC
    t16_26 = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 4225
    //MUL
    t16_0.x = t10_21 * t16_26;
    //Instruction 4226
    //MUL
    t0.xzw = t16_0.xxx * _LightColor.xyz;
    //Instruction 4227
    //MUL
    t16_5.xyz = t0.xzw * t16_5.xyz;
    //Instruction 4228
    //MUL
    t16_0.xyz = t16_7.xxx * t16_5.xyz;
    //Instruction 4229
    //MOV
    t16_0.w = 1.0;
    //Instruction 4230
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4231
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4232
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(normalize(tmpvar_11));
  lightDir_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(tmpvar_13)).w;
  atten_6 = tmpvar_14;
  highp float mydist_15;
  mydist_15 = ((sqrt(
    dot (tmpvar_11, tmpvar_11)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_16;
  tmpvar_16 = dot (textureCube (_ShadowMapTexture, tmpvar_11), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_17;
  if ((tmpvar_16 < mydist_15)) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  atten_6 = (atten_6 * tmpvar_17);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_10;
  lowp vec4 tmpvar_19;
  highp vec3 P_20;
  P_20 = (_LightMatrix0 * tmpvar_18).xyz;
  tmpvar_19 = textureCube (_LightTexture0, P_20);
  atten_6 = (atten_6 * tmpvar_19.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_23;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_26;
  viewDir_26 = -(tmpvar_25);
  mediump vec3 tmpvar_27;
  mediump vec3 inVec_28;
  inVec_28 = (lightDir_7 + viewDir_26);
  tmpvar_27 = (inVec_28 * inversesqrt(max (0.001, 
    dot (inVec_28, inVec_28)
  )));
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (lightDir_7, tmpvar_27));
  mediump float tmpvar_30;
  tmpvar_30 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = max ((10.0 / log2(
    (((1.0 - tmpvar_30) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_31 = (tmpvar_32 * tmpvar_32);
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_31 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_24, tmpvar_27)), tmpvar_31)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_29 * tmpvar_29)
       * gbuffer1_3.w) + (tmpvar_30 * tmpvar_30))) * tmpvar_29)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_24, lightDir_7)));
  mediump vec4 tmpvar_34;
  tmpvar_34 = exp2(-(tmpvar_33));
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3262
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3263
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3264
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3265
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3266
    //MOV
    gl_Position = t0;
    //Instruction 3267
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3268
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3269
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3270
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3271
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3272
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3273
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3274
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3275
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3276
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3277
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3278
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp vec2 t1;
mediump float t16_1;
highp vec3 t2;
mediump vec2 t16_2;
lowp vec3 t10_2;
highp vec4 t3;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec4 t16_5;
mediump vec3 t16_6;
highp float t7;
mediump float t16_7;
bool tb7;
lowp vec3 t10_9;
mediump vec3 t16_12;
highp float t14;
lowp float t10_14;
highp float t15;
mediump float t16_19;
highp float t21;
mediump float t16_21;
highp float t22;
mediump float t16_26;
void main()
{
    //Instruction 3184
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3185
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3186
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3187
    //SAMPLE
    t21 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3188
    //MAD
    t21 = _ZBufferParams.x * t21 + _ZBufferParams.y;
    //Instruction 3189
    //DIV
    t21 = float(1.0) / t21;
    //Instruction 3190
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 3191
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 3192
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 3193
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3194
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 3195
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3196
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 3197
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3198
    //ADD
    t3.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 3199
    //DP3
    t15 = dot(t3.xyz, t3.xyz);
    //Instruction 3200
    //RSQ
    t22 = inversesqrt(t15);
    //Instruction 3201
    //MUL
    t4.xyz = vec3(t22) * t3.xyz;
    //Instruction 3202
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t3.xyz);
    //Instruction 3203
    //DP4
    t22 = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3204
    //MAD
    t16_5.xyz = (-t2.xyz) * vec3(t21) + (-t4.xyz);
    //Instruction 3205
    //DP3
    t16_26 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3206
    //MAX
    t16_21 = max(t16_26, 0.00100000005);
    //Instruction 3207
    //RSQ
    t16_26 = inversesqrt(t16_21);
    //Instruction 3208
    //MUL
    t16_5.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 3209
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 3210
    //MAD
    t16_6.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3211
    //DP3
    t16_26 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3212
    //RSQ
    t16_26 = inversesqrt(t16_26);
    //Instruction 3213
    //MUL
    t16_6.xyz = vec3(t16_26) * t16_6.xyz;
    //Instruction 3214
    //DP3
    t16_5.w = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 3215
    //DP3
    t16_5.x = dot((-t4.xyz), t16_5.xyz);
    //Instruction 3216
    //DP3
    t16_12.x = dot(t16_6.xyz, (-t4.xyz));
    //Instruction 3217
    //MAX
    t16_21 = max(t16_12.x, 0.0);
    //Instruction 3218
    //MAX
    t16_2.xy = max(t16_5.xw, vec2(0.0, 0.0));
    //Instruction 3219
    //LOG
    t16_5.x = log2(t16_2.y);
    //Instruction 3220
    //SAMPLE
    t10_3 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 3221
    //SAMPLE
    t10_9.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 3222
    //ADD
    t16_12.x = (-t10_3.w) + 1.0;
    //Instruction 3223
    //ADD
    t16_19 = (-t16_12.x) + 1.0;
    //Instruction 3224
    //MAD
    t16_19 = t16_19 * 0.967999995 + 0.0299999993;
    //Instruction 3225
    //LOG
    t16_19 = log2(t16_19);
    //Instruction 3226
    //DIV
    t16_19 = 10.0 / t16_19;
    //Instruction 3227
    //MAX
    t16_12.y = max(t16_19, -255.936996);
    //Instruction 3228
    //MUL
    t16_12.xz = t16_12.xy * t16_12.xy;
    //Instruction 3229
    //MAD
    t16_19 = t16_12.y * t16_12.y + 1.0;
    //Instruction 3230
    //MUL
    t16_5.x = t16_5.x * t16_12.z;
    //Instruction 3231
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 3232
    //MUL
    t16_5.x = t16_5.x * t16_19;
    //Instruction 3233
    //MUL
    t16_19 = t16_2.x * t16_2.x;
    //Instruction 3234
    //MAD
    t16_12.x = t16_19 * t10_3.w + t16_12.x;
    //Instruction 3235
    //MUL
    t16_12.x = t16_12.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3236
    //MAD
    t16_1 = t16_12.x * t16_2.x + 9.99999975e-05;
    //Instruction 3237
    //DIV
    t16_1 = t16_5.x / t16_1;
    //Instruction 3238
    //MAX
    t16_5.x = max(t16_1, 0.0);
    //Instruction 3239
    //MIN
    t16_5.x = min(t16_5.x, 100.0);
    //Instruction 3240
    //MAD
    t16_5.xyz = t16_5.xxx * t10_3.xyz + t10_9.xyz;
    //Instruction 3241
    //MUL
    t2.xyz = t0.yyy * _LightMatrix0[1].xyz;
    //Instruction 3242
    //MAD
    t2.xyz = _LightMatrix0[0].xyz * t0.xxx + t2.xyz;
    //Instruction 3243
    //MAD
    t0.xyz = _LightMatrix0[2].xyz * t0.zzz + t2.xyz;
    //Instruction 3244
    //ADD
    t0.xyz = t0.xyz + _LightMatrix0[3].xyz;
    //Instruction 3245
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xyz).w;
    //Instruction 3246
    //SQRT
    t7 = sqrt(t15);
    //Instruction 3247
    //MUL
    t14 = t15 * _LightPos.w;
    //Instruction 3248
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3249
    //MUL
    t7 = t7 * _LightPositionRange.w;
    //Instruction 3250
    //MUL
    t7 = t7 * 0.970000029;
    //Instruction 3251
    //LT
    tb7 = t22<t7;
    //Instruction 3252
    //MOVC
    t16_26 = (tb7) ? _LightShadowData.x : 1.0;
    //Instruction 3253
    //MUL
    t16_7 = t10_14 * t16_26;
    //Instruction 3254
    //MUL
    t16_0.x = t10_0 * t16_7;
    //Instruction 3255
    //MUL
    t0.xyz = t16_0.xxx * _LightColor.xyz;
    //Instruction 3256
    //MUL
    t16_5.xyz = t0.xyz * t16_5.xyz;
    //Instruction 3257
    //MUL
    t16_0.xyz = vec3(t16_21) * t16_5.xyz;
    //Instruction 3258
    //MOV
    t16_0.w = 1.0;
    //Instruction 3259
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 3260
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3261
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  lightDir_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_10;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_LightTexture0, tmpvar_15).w;
  atten_6 = tmpvar_16;
  atten_6 = (atten_6 * float((tmpvar_15.w < 0.0)));
  highp float tmpvar_17;
  tmpvar_17 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(tmpvar_17));
  atten_6 = (atten_6 * tmpvar_18.w);
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (((
    mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_10;
  highp vec4 tmpvar_22;
  tmpvar_22 = (unity_World2Shadow[0] * tmpvar_21);
  lowp float tmpvar_23;
  highp vec4 shadowVals_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_22.xyz / tmpvar_22.w);
  shadowVals_24.x = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_24.y = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_24.z = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_24.w = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_24, tmpvar_25.zzzz);
  mediump vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  mediump float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  mediump float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  mediump float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_23 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp ((tmpvar_23 + tmpvar_20), 0.0, 1.0);
  tmpvar_19 = tmpvar_34;
  atten_6 = (atten_6 * tmpvar_19);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_37;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_38;
  tmpvar_38 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_40;
  viewDir_40 = -(tmpvar_39);
  mediump vec3 tmpvar_41;
  mediump vec3 inVec_42;
  inVec_42 = (lightDir_7 + viewDir_40);
  tmpvar_41 = (inVec_42 * inversesqrt(max (0.001, 
    dot (inVec_42, inVec_42)
  )));
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (lightDir_7, tmpvar_41));
  mediump float tmpvar_44;
  tmpvar_44 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = max ((10.0 / log2(
    (((1.0 - tmpvar_44) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_45 = (tmpvar_46 * tmpvar_46);
  mediump vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_45 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_38, tmpvar_41)), tmpvar_45)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_43 * tmpvar_43)
       * gbuffer1_3.w) + (tmpvar_44 * tmpvar_44))) * tmpvar_43)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_38, lightDir_7)));
  mediump vec4 tmpvar_48;
  tmpvar_48 = exp2(-(tmpvar_47));
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  lightDir_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_10;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_LightTexture0, tmpvar_15).w;
  atten_6 = tmpvar_16;
  atten_6 = (atten_6 * float((tmpvar_15.w < 0.0)));
  highp float tmpvar_17;
  tmpvar_17 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(tmpvar_17));
  atten_6 = (atten_6 * tmpvar_18.w);
  mediump float tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_10;
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_World2Shadow[0] * tmpvar_20);
  lowp float tmpvar_22;
  mediump vec4 shadows_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_21.xyz / tmpvar_21.w);
  highp vec3 coord_25;
  coord_25 = (tmpvar_24 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_26;
  tmpvar_26 = shadow2DEXT (_ShadowMapTexture, coord_25);
  shadows_23.x = tmpvar_26;
  highp vec3 coord_27;
  coord_27 = (tmpvar_24 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_28;
  tmpvar_28 = shadow2DEXT (_ShadowMapTexture, coord_27);
  shadows_23.y = tmpvar_28;
  highp vec3 coord_29;
  coord_29 = (tmpvar_24 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_30;
  tmpvar_30 = shadow2DEXT (_ShadowMapTexture, coord_29);
  shadows_23.z = tmpvar_30;
  highp vec3 coord_31;
  coord_31 = (tmpvar_24 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_32;
  tmpvar_32 = shadow2DEXT (_ShadowMapTexture, coord_31);
  shadows_23.w = tmpvar_32;
  shadows_23 = (_LightShadowData.xxxx + (shadows_23 * (1.0 - _LightShadowData.xxxx)));
  mediump float tmpvar_33;
  tmpvar_33 = dot (shadows_23, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp ((tmpvar_22 + clamp (
    ((mix (tmpvar_9.z, sqrt(
      dot (tmpvar_11, tmpvar_11)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_19 = tmpvar_34;
  atten_6 = (atten_6 * tmpvar_19);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_37;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_38;
  tmpvar_38 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_40;
  viewDir_40 = -(tmpvar_39);
  mediump vec3 tmpvar_41;
  mediump vec3 inVec_42;
  inVec_42 = (lightDir_7 + viewDir_40);
  tmpvar_41 = (inVec_42 * inversesqrt(max (0.001, 
    dot (inVec_42, inVec_42)
  )));
  mediump float tmpvar_43;
  tmpvar_43 = max (0.0, dot (lightDir_7, tmpvar_41));
  mediump float tmpvar_44;
  tmpvar_44 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = max ((10.0 / log2(
    (((1.0 - tmpvar_44) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_45 = (tmpvar_46 * tmpvar_46);
  mediump vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_45 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_38, tmpvar_41)), tmpvar_45)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_43 * tmpvar_43)
       * gbuffer1_3.w) + (tmpvar_44 * tmpvar_44))) * tmpvar_43)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_38, lightDir_7)));
  mediump vec4 tmpvar_48;
  tmpvar_48 = exp2(-(tmpvar_47));
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4504
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4505
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4506
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4507
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4508
    //MOV
    gl_Position = t0;
    //Instruction 4509
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4510
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4511
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4512
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4513
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4514
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4515
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4516
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4517
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4518
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4519
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4520
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump float t16_1;
highp vec2 t2;
lowp vec3 t10_2;
highp vec4 t3;
lowp vec4 t10_3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_5;
highp vec3 t6;
mediump float t16_7;
mediump float t16_8;
highp vec3 t9;
lowp float t10_9;
mediump vec3 t16_15;
mediump float t16_16;
highp float t17;
lowp float t10_17;
mediump float t16_24;
highp float t25;
mediump float t16_25;
bool tb25;
mediump float t16_26;
mediump float t16_27;
void main()
{
    //Instruction 4404
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4405
    //DIV
    t1.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4406
    //MUL
    t1.xyz = t1.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4407
    //DIV
    t2.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4408
    //SAMPLE
    t25 = texture(_CameraDepthTexture, t2.xy).x;
    //Instruction 4409
    //MAD
    t25 = _ZBufferParams.x * t25 + _ZBufferParams.y;
    //Instruction 4410
    //DIV
    t25 = float(1.0) / t25;
    //Instruction 4411
    //MUL
    t3.xyz = vec3(t25) * t1.xyz;
    //Instruction 4412
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 4413
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 4414
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 4415
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 4416
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 4417
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 4418
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 4419
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 4420
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 4421
    //ADD
    t5.xyz = t4.xyz + _ShadowOffsets[0].xyz;
    //Instruction 4422
    //SAMPLE_C_LZ
    vec3 txVec10 = vec3(t5.xy,t5.z);
    t5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    //Instruction 4423
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[1].xyz;
    //Instruction 4424
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(t6.xy,t6.z);
    t5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 4425
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[2].xyz;
    //Instruction 4426
    //ADD
    t4.xyz = t4.xyz + _ShadowOffsets[3].xyz;
    //Instruction 4427
    //SAMPLE_C_LZ
    vec3 txVec12 = vec3(t4.xy,t4.z);
    t5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    //Instruction 4428
    //SAMPLE_C_LZ
    vec3 txVec13 = vec3(t6.xy,t6.z);
    t5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    //Instruction 4429
    //MAD
    t16_0 = t5 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 4430
    //DP4
    t16_1 = dot(t16_0, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 4431
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4432
    //DP3
    t9.x = dot(t4.xyz, t4.xyz);
    //Instruction 4433
    //SQRT
    t9.x = sqrt(t9.x);
    //Instruction 4434
    //MAD
    t9.x = (-t1.z) * t25 + t9.x;
    //Instruction 4435
    //MAD
    t9.x = unity_ShadowFadeCenterAndType.w * t9.x + t3.z;
    //Instruction 4436
    //MAD
    t9.x = t9.x * _LightShadowData.z + _LightShadowData.w;
    t9.x = clamp(t9.x, 0.0, 1.0);
    //Instruction 4437
    //ADD
    t1.x = t9.x + t16_1;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 4438
    //MUL
    t9.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 4439
    //MAD
    t9.xyz = _LightMatrix0[0].xyw * t3.xxx + t9.xyz;
    //Instruction 4440
    //MAD
    t9.xyz = _LightMatrix0[2].xyw * t3.www + t9.xyz;
    //Instruction 4441
    //ADD
    t9.xyz = t9.xyz + _LightMatrix0[3].xyw;
    //Instruction 4442
    //DIV
    t9.xy = t9.xy / t9.zz;
    //Instruction 4443
    //LT
    tb25 = t9.z<0.0;
    //Instruction 4444
    //AND
    t25 = tb25 ? 1.0 : float(0.0);
    //Instruction 4445
    //SAMPLE
    t10_9 = texture(_LightTexture0, t9.xy).w;
    //Instruction 4446
    //MUL
    t9.x = t25 * t10_9;
    //Instruction 4447
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 4448
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4449
    //DP3
    t17 = dot(t4.xyz, t4.xyz);
    //Instruction 4450
    //MUL
    t25 = t17 * _LightPos.w;
    //Instruction 4451
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 4452
    //MUL
    t4.xyz = vec3(t17) * t4.xyz;
    //Instruction 4453
    //SAMPLE
    t10_17 = texture(_LightTextureB0, vec2(t25)).w;
    //Instruction 4454
    //MUL
    t9.x = t10_17 * t9.x;
    //Instruction 4455
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 4456
    //MUL
    t1.xyz = t1.xxx * _LightColor.xyz;
    //Instruction 4457
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 4458
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 4459
    //MAD
    t16_0.xyz = (-t3.xyz) * vec3(t25) + t4.xyz;
    //Instruction 4460
    //DP3
    t16_24 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 4461
    //MAX
    t16_25 = max(t16_24, 0.00100000005);
    //Instruction 4462
    //RSQ
    t16_24 = inversesqrt(t16_25);
    //Instruction 4463
    //MUL
    t16_0.xyz = vec3(t16_24) * t16_0.xyz;
    //Instruction 4464
    //DP3
    t16_24 = dot(t4.xyz, t16_0.xyz);
    //Instruction 4465
    //MAX
    t16_25 = max(t16_24, 0.0);
    //Instruction 4466
    //MUL
    t16_24 = t16_25 * t16_25;
    //Instruction 4467
    //SAMPLE
    t10_3 = texture(_CameraGBufferTexture1, t2.xy);
    //Instruction 4468
    //ADD
    t16_7 = (-t10_3.w) + 1.0;
    //Instruction 4469
    //MUL
    t16_15.x = t16_7 * t16_7;
    //Instruction 4470
    //ADD
    t16_7 = (-t16_7) + 1.0;
    //Instruction 4471
    //MAD
    t16_7 = t16_7 * 0.967999995 + 0.0299999993;
    //Instruction 4472
    //LOG
    t16_7 = log2(t16_7);
    //Instruction 4473
    //DIV
    t16_7 = 10.0 / t16_7;
    //Instruction 4474
    //MAX
    t16_7 = max(t16_7, -255.936996);
    //Instruction 4475
    //MAD
    t16_24 = t16_24 * t10_3.w + t16_15.x;
    //Instruction 4476
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 4477
    //MAD
    t16_25 = t16_24 * t16_25 + 9.99999975e-05;
    //Instruction 4478
    //SAMPLE
    t10_5.xyz = texture(_CameraGBufferTexture2, t2.xy).xyz;
    //Instruction 4479
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture0, t2.xy).xyz;
    //Instruction 4480
    //MAD
    t16_15.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4481
    //DP3
    t16_24 = dot(t16_15.xyz, t16_15.xyz);
    //Instruction 4482
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 4483
    //MUL
    t16_15.xyz = vec3(t16_24) * t16_15.xyz;
    //Instruction 4484
    //DP3
    t16_0.x = dot(t16_15.xyz, t16_0.xyz);
    //Instruction 4485
    //DP3
    t16_8 = dot(t16_15.xyz, t4.xyz);
    //Instruction 4486
    //MAX
    t16_26 = max(t16_8, 0.0);
    //Instruction 4487
    //MAX
    t16_27 = max(t16_0.x, 0.0);
    //Instruction 4488
    //LOG
    t16_0.x = log2(t16_27);
    //Instruction 4489
    //MUL
    t16_8 = t16_7 * t16_7;
    //Instruction 4490
    //MAD
    t16_16 = t16_7 * t16_7 + 1.0;
    //Instruction 4491
    //MUL
    t16_0.x = t16_0.x * t16_8;
    //Instruction 4492
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 4493
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 4494
    //DIV
    t16_25 = t16_0.x / t16_25;
    //Instruction 4495
    //MAX
    t16_0.x = max(t16_25, 0.0);
    //Instruction 4496
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 4497
    //MAD
    t16_0.xyz = t16_0.xxx * t10_3.xyz + t10_2.xyz;
    //Instruction 4498
    //MUL
    t16_0.xyz = t1.xyz * t16_0.xyz;
    //Instruction 4499
    //MUL
    t16_0.xyz = vec3(t16_26) * t16_0.xyz;
    //Instruction 4500
    //MOV
    t16_0.w = 1.0;
    //Instruction 4501
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4502
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4503
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(normalize(tmpvar_11));
  lightDir_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(tmpvar_13)).w;
  atten_6 = tmpvar_14;
  highp vec4 shadowVals_15;
  highp float mydist_16;
  mydist_16 = ((sqrt(
    dot (tmpvar_11, tmpvar_11)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_15.x = dot (textureCube (_ShadowMapTexture, (tmpvar_11 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_15.y = dot (textureCube (_ShadowMapTexture, (tmpvar_11 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_15.z = dot (textureCube (_ShadowMapTexture, (tmpvar_11 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_15.w = dot (textureCube (_ShadowMapTexture, (tmpvar_11 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_17;
  tmpvar_17 = lessThan (shadowVals_15, vec4(mydist_16));
  mediump vec4 tmpvar_18;
  tmpvar_18 = _LightShadowData.xxxx;
  mediump float tmpvar_19;
  if (tmpvar_17.x) {
    tmpvar_19 = tmpvar_18.x;
  } else {
    tmpvar_19 = 1.0;
  };
  mediump float tmpvar_20;
  if (tmpvar_17.y) {
    tmpvar_20 = tmpvar_18.y;
  } else {
    tmpvar_20 = 1.0;
  };
  mediump float tmpvar_21;
  if (tmpvar_17.z) {
    tmpvar_21 = tmpvar_18.z;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump float tmpvar_22;
  if (tmpvar_17.w) {
    tmpvar_22 = tmpvar_18.w;
  } else {
    tmpvar_22 = 1.0;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23.x = tmpvar_19;
  tmpvar_23.y = tmpvar_20;
  tmpvar_23.z = tmpvar_21;
  tmpvar_23.w = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec4(0.25, 0.25, 0.25, 0.25));
  atten_6 = (atten_6 * tmpvar_24);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_27;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_30;
  viewDir_30 = -(tmpvar_29);
  mediump vec3 tmpvar_31;
  mediump vec3 inVec_32;
  inVec_32 = (lightDir_7 + viewDir_30);
  tmpvar_31 = (inVec_32 * inversesqrt(max (0.001, 
    dot (inVec_32, inVec_32)
  )));
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (lightDir_7, tmpvar_31));
  mediump float tmpvar_34;
  tmpvar_34 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = max ((10.0 / log2(
    (((1.0 - tmpvar_34) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_35 = (tmpvar_36 * tmpvar_36);
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_35 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_28, tmpvar_31)), tmpvar_35)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_33 * tmpvar_33)
       * gbuffer1_3.w) + (tmpvar_34 * tmpvar_34))) * tmpvar_33)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_28, lightDir_7)));
  mediump vec4 tmpvar_38;
  tmpvar_38 = exp2(-(tmpvar_37));
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4472
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4473
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4474
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4475
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4476
    //MOV
    gl_Position = t0;
    //Instruction 4477
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4478
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4479
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4480
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4481
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4482
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4483
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4484
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4485
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4486
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4487
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4488
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
mediump float t16_1;
bvec4 tb1;
highp vec4 t2;
mediump float t16_2;
lowp vec4 t10_2;
highp vec4 t3;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
lowp float t10_6;
mediump vec3 t16_10;
highp float t13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
highp float t19;
mediump float t16_19;
mediump float t16_22;
void main()
{
    //Instruction 4388
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4389
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4390
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4391
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4392
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 4393
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 4394
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 4395
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4396
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4397
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4398
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4399
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4400
    //ADD
    t0.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4401
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 4402
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4403
    //DP3
    t13 = dot(t0.xyz, t0.xyz);
    //Instruction 4404
    //RSQ
    t19 = inversesqrt(t13);
    //Instruction 4405
    //MUL
    t3.xyz = t0.xyz * vec3(t19);
    //Instruction 4406
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + (-t3.xyz);
    //Instruction 4407
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4408
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 4409
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 4410
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 4411
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4412
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4413
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4414
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4415
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4416
    //DP3
    t16_22 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 4417
    //DP3
    t16_4.x = dot((-t3.xyz), t16_4.xyz);
    //Instruction 4418
    //DP3
    t16_10.x = dot(t16_5.xyz, (-t3.xyz));
    //Instruction 4419
    //MAX
    t16_18 = max(t16_10.x, 0.0);
    //Instruction 4420
    //MAX
    t16_19 = max(t16_4.x, 0.0);
    //Instruction 4421
    //MAX
    t16_2 = max(t16_22, 0.0);
    //Instruction 4422
    //LOG
    t16_4.x = log2(t16_2);
    //Instruction 4423
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4424
    //SAMPLE
    t10_3.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4425
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 4426
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 4427
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 4428
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 4429
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 4430
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 4431
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 4432
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 4433
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 4434
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 4435
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 4436
    //MUL
    t16_16 = t16_19 * t16_19;
    //Instruction 4437
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 4438
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4439
    //MAD
    t16_1 = t16_10.x * t16_19 + 9.99999975e-05;
    //Instruction 4440
    //DIV
    t16_1 = t16_4.x / t16_1;
    //Instruction 4441
    //MAX
    t16_4.x = max(t16_1, 0.0);
    //Instruction 4442
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 4443
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_3.xyz;
    //Instruction 4444
    //ADD
    t1.xyw = t0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 4445
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t1.xyw);
    //Instruction 4446
    //DP4
    t2.x = dot(t2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4447
    //ADD
    t1.xyw = t0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 4448
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t1.xyw);
    //Instruction 4449
    //DP4
    t2.y = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4450
    //ADD
    t1.xyw = t0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 4451
    //ADD
    t0.xyz = t0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 4452
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t0.xyz);
    //Instruction 4453
    //DP4
    t2.w = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4454
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t1.xyw);
    //Instruction 4455
    //DP4
    t2.z = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4456
    //SQRT
    t0.x = sqrt(t13);
    //Instruction 4457
    //MUL
    t6 = t13 * _LightPos.w;
    //Instruction 4458
    //SAMPLE
    t10_6 = texture(_LightTextureB0, vec2(t6)).w;
    //Instruction 4459
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 4460
    //MUL
    t0.x = t0.x * 0.970000029;
    //Instruction 4461
    //LT
    tb1 = lessThan(t2, t0.xxxx);
    //Instruction 4462
    //MOVC
    t1.x = (tb1.x) ? _LightShadowData.x : float(1.0);
    t1.y = (tb1.y) ? _LightShadowData.x : float(1.0);
    t1.z = (tb1.z) ? _LightShadowData.x : float(1.0);
    t1.w = (tb1.w) ? _LightShadowData.x : float(1.0);
    //Instruction 4463
    //DP4
    t16_22 = dot(t1, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 4464
    //MUL
    t16_0.x = t10_6 * t16_22;
    //Instruction 4465
    //MUL
    t0.xyz = t16_0.xxx * _LightColor.xyz;
    //Instruction 4466
    //MUL
    t16_4.xyz = t0.xyz * t16_4.xyz;
    //Instruction 4467
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 4468
    //MOV
    t16_0.w = 1.0;
    //Instruction 4469
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4470
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4471
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(normalize(tmpvar_11));
  lightDir_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(tmpvar_13)).w;
  atten_6 = tmpvar_14;
  highp vec4 shadowVals_15;
  highp float mydist_16;
  mydist_16 = ((sqrt(
    dot (tmpvar_11, tmpvar_11)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_15.x = dot (textureCube (_ShadowMapTexture, (tmpvar_11 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_15.y = dot (textureCube (_ShadowMapTexture, (tmpvar_11 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_15.z = dot (textureCube (_ShadowMapTexture, (tmpvar_11 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_15.w = dot (textureCube (_ShadowMapTexture, (tmpvar_11 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_17;
  tmpvar_17 = lessThan (shadowVals_15, vec4(mydist_16));
  mediump vec4 tmpvar_18;
  tmpvar_18 = _LightShadowData.xxxx;
  mediump float tmpvar_19;
  if (tmpvar_17.x) {
    tmpvar_19 = tmpvar_18.x;
  } else {
    tmpvar_19 = 1.0;
  };
  mediump float tmpvar_20;
  if (tmpvar_17.y) {
    tmpvar_20 = tmpvar_18.y;
  } else {
    tmpvar_20 = 1.0;
  };
  mediump float tmpvar_21;
  if (tmpvar_17.z) {
    tmpvar_21 = tmpvar_18.z;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump float tmpvar_22;
  if (tmpvar_17.w) {
    tmpvar_22 = tmpvar_18.w;
  } else {
    tmpvar_22 = 1.0;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23.x = tmpvar_19;
  tmpvar_23.y = tmpvar_20;
  tmpvar_23.z = tmpvar_21;
  tmpvar_23.w = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_23, vec4(0.25, 0.25, 0.25, 0.25));
  atten_6 = (atten_6 * tmpvar_24);
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_10;
  lowp vec4 tmpvar_26;
  highp vec3 P_27;
  P_27 = (_LightMatrix0 * tmpvar_25).xyz;
  tmpvar_26 = textureCube (_LightTexture0, P_27);
  atten_6 = (atten_6 * tmpvar_26.w);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_30;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_31;
  tmpvar_31 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_33;
  viewDir_33 = -(tmpvar_32);
  mediump vec3 tmpvar_34;
  mediump vec3 inVec_35;
  inVec_35 = (lightDir_7 + viewDir_33);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  tmpvar_36 = max (0.0, dot (lightDir_7, tmpvar_34));
  mediump float tmpvar_37;
  tmpvar_37 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = max ((10.0 / log2(
    (((1.0 - tmpvar_37) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_38 = (tmpvar_39 * tmpvar_39);
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_38 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_31, tmpvar_34)), tmpvar_38)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_36 * tmpvar_36)
       * gbuffer1_3.w) + (tmpvar_37 * tmpvar_37))) * tmpvar_36)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_31, lightDir_7)));
  mediump vec4 tmpvar_41;
  tmpvar_41 = exp2(-(tmpvar_40));
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4611
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4612
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4613
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4614
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4615
    //MOV
    gl_Position = t0;
    //Instruction 4616
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4617
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4618
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4619
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4620
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4621
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4622
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4623
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4624
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4625
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4626
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4627
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec2 t1;
lowp vec3 t10_1;
highp vec3 t2;
highp vec4 t3;
bvec4 tb3;
highp vec4 t4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec2 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
mediump vec3 t16_13;
highp float t15;
lowp float t10_15;
mediump float t16_19;
highp float t21;
mediump float t16_21;
lowp float t10_21;
mediump float t16_26;
void main()
{
    //Instruction 4521
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4522
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4523
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4524
    //SAMPLE
    t21 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4525
    //MAD
    t21 = _ZBufferParams.x * t21 + _ZBufferParams.y;
    //Instruction 4526
    //DIV
    t21 = float(1.0) / t21;
    //Instruction 4527
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 4528
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4529
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4530
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4531
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4532
    //ADD
    t2.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4533
    //ADD
    t3.xyz = t2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 4534
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t3.xyz);
    //Instruction 4535
    //DP4
    t3.x = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4536
    //ADD
    t4.xyz = t2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 4537
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 4538
    //DP4
    t3.y = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4539
    //ADD
    t4.xyz = t2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 4540
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 4541
    //DP4
    t3.z = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4542
    //ADD
    t4.xyz = t2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 4543
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 4544
    //DP4
    t3.w = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4545
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 4546
    //SQRT
    t15 = sqrt(t21);
    //Instruction 4547
    //MUL
    t15 = t15 * _LightPositionRange.w;
    //Instruction 4548
    //MUL
    t15 = t15 * 0.970000029;
    //Instruction 4549
    //LT
    tb3 = lessThan(t3, vec4(t15));
    //Instruction 4550
    //MOVC
    t3.x = (tb3.x) ? _LightShadowData.x : float(1.0);
    t3.y = (tb3.y) ? _LightShadowData.x : float(1.0);
    t3.z = (tb3.z) ? _LightShadowData.x : float(1.0);
    t3.w = (tb3.w) ? _LightShadowData.x : float(1.0);
    //Instruction 4551
    //DP4
    t16_5.x = dot(t3, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 4552
    //MUL
    t15 = t21 * _LightPos.w;
    //Instruction 4553
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 4554
    //MUL
    t2.xyz = vec3(t21) * t2.xyz;
    //Instruction 4555
    //SAMPLE
    t10_21 = texture(_LightTextureB0, vec2(t15)).w;
    //Instruction 4556
    //MUL
    t16_21 = t16_5.x * t10_21;
    //Instruction 4557
    //MUL
    t3.xyz = t0.yyy * _LightMatrix0[1].xyz;
    //Instruction 4558
    //MAD
    t3.xyz = _LightMatrix0[0].xyz * t0.xxx + t3.xyz;
    //Instruction 4559
    //MAD
    t3.xyz = _LightMatrix0[2].xyz * t0.zzz + t3.xyz;
    //Instruction 4560
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4561
    //ADD
    t3.xyz = t3.xyz + _LightMatrix0[3].xyz;
    //Instruction 4562
    //SAMPLE
    t10_15 = texture(_LightTexture0, t3.xyz).w;
    //Instruction 4563
    //MUL
    t16_21 = t16_21 * t10_15;
    //Instruction 4564
    //MUL
    t3.xyz = vec3(t16_21) * _LightColor.xyz;
    //Instruction 4565
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 4566
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 4567
    //MAD
    t16_5.xyz = (-t0.xyz) * vec3(t21) + (-t2.xyz);
    //Instruction 4568
    //DP3
    t16_26 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4569
    //MAX
    t16_0.x = max(t16_26, 0.00100000005);
    //Instruction 4570
    //RSQ
    t16_26 = inversesqrt(t16_0.x);
    //Instruction 4571
    //MUL
    t16_5.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 4572
    //DP3
    t16_26 = dot((-t2.xyz), t16_5.xyz);
    //Instruction 4573
    //MAX
    t16_0.x = max(t16_26, 0.0);
    //Instruction 4574
    //MUL
    t16_26 = t16_0.x * t16_0.x;
    //Instruction 4575
    //SAMPLE
    t10_4 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4576
    //ADD
    t16_6 = (-t10_4.w) + 1.0;
    //Instruction 4577
    //MUL
    t16_13.x = t16_6 * t16_6;
    //Instruction 4578
    //ADD
    t16_6 = (-t16_6) + 1.0;
    //Instruction 4579
    //MAD
    t16_6 = t16_6 * 0.967999995 + 0.0299999993;
    //Instruction 4580
    //LOG
    t16_6 = log2(t16_6);
    //Instruction 4581
    //DIV
    t16_6 = 10.0 / t16_6;
    //Instruction 4582
    //MAX
    t16_6 = max(t16_6, -255.936996);
    //Instruction 4583
    //MAD
    t16_26 = t16_26 * t10_4.w + t16_13.x;
    //Instruction 4584
    //MUL
    t16_26 = t16_26 * unity_LightGammaCorrectionConsts.z;
    //Instruction 4585
    //MAD
    t16_0.x = t16_26 * t16_0.x + 9.99999975e-05;
    //Instruction 4586
    //SAMPLE
    t10_7.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4587
    //SAMPLE
    t10_1.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4588
    //MAD
    t16_13.xyz = t10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4589
    //DP3
    t16_26 = dot(t16_13.xyz, t16_13.xyz);
    //Instruction 4590
    //RSQ
    t16_26 = inversesqrt(t16_26);
    //Instruction 4591
    //MUL
    t16_13.xyz = vec3(t16_26) * t16_13.xyz;
    //Instruction 4592
    //DP3
    t16_5.x = dot(t16_13.xyz, t16_5.xyz);
    //Instruction 4593
    //DP3
    t16_5.y = dot(t16_13.xyz, (-t2.xyz));
    //Instruction 4594
    //MAX
    t16_7.xy = max(t16_5.yx, vec2(0.0, 0.0));
    //Instruction 4595
    //LOG
    t16_5.x = log2(t16_7.y);
    //Instruction 4596
    //MUL
    t16_12 = t16_6 * t16_6;
    //Instruction 4597
    //MAD
    t16_19 = t16_6 * t16_6 + 1.0;
    //Instruction 4598
    //MUL
    t16_5.x = t16_5.x * t16_12;
    //Instruction 4599
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 4600
    //MUL
    t16_5.x = t16_5.x * t16_19;
    //Instruction 4601
    //DIV
    t16_0.x = t16_5.x / t16_0.x;
    //Instruction 4602
    //MAX
    t16_5.x = max(t16_0.x, 0.0);
    //Instruction 4603
    //MIN
    t16_5.x = min(t16_5.x, 100.0);
    //Instruction 4604
    //MAD
    t16_5.xyz = t16_5.xxx * t10_4.xyz + t10_1.xyz;
    //Instruction 4605
    //MUL
    t16_5.xyz = t3.xyz * t16_5.xyz;
    //Instruction 4606
    //MUL
    t16_0.xyz = t16_7.xxx * t16_5.xyz;
    //Instruction 4607
    //MOV
    t16_0.w = 1.0;
    //Instruction 4608
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4609
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4610
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_15;
  tmpvar_15 = clamp ((tmpvar_14.x + clamp (
    ((mix (tmpvar_9.z, sqrt(
      dot (tmpvar_11, tmpvar_11)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_13 = tmpvar_15;
  atten_6 = tmpvar_13;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_18;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_19;
  tmpvar_19 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_21;
  viewDir_21 = -(tmpvar_20);
  mediump vec3 tmpvar_22;
  mediump vec3 inVec_23;
  inVec_23 = (lightDir_7 + viewDir_21);
  tmpvar_22 = (inVec_23 * inversesqrt(max (0.001, 
    dot (inVec_23, inVec_23)
  )));
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (lightDir_7, tmpvar_22));
  mediump float tmpvar_25;
  tmpvar_25 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max ((10.0 / log2(
    (((1.0 - tmpvar_25) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_26 = (tmpvar_27 * tmpvar_27);
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_26 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_19, tmpvar_22)), tmpvar_26)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_24 * tmpvar_24)
       * gbuffer1_3.w) + (tmpvar_25 * tmpvar_25))) * tmpvar_24)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_19, lightDir_7)));
  mediump vec4 tmpvar_29;
  tmpvar_29 = exp2(-(tmpvar_28));
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4555
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4556
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4557
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4558
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4559
    //MOV
    gl_Position = t0;
    //Instruction 4560
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4561
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4562
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4563
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4564
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4565
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4566
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4567
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4568
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4569
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4570
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4571
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec2 t1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec3 t3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump float t16_6;
lowp vec3 t10_6;
mediump vec3 t16_10;
mediump vec2 t16_12;
mediump float t16_16;
highp float t18;
mediump float t16_22;
void main()
{
    //Instruction 4489
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4490
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4491
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4492
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4493
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 4494
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 4495
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 4496
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 4497
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 4498
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 4499
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 4500
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4501
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4502
    //DP3
    t0.x = dot(t2.xyw, t2.xyw);
    //Instruction 4503
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 4504
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 4505
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 4506
    //MAD
    t0.x = t0.x * _LightShadowData.z + _LightShadowData.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4507
    //DP3
    t6 = dot(t3.xyz, t3.xyz);
    //Instruction 4508
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 4509
    //MAD
    t16_4.xyz = (-t3.xyz) * vec3(t6) + (-_LightDir.xyz);
    //Instruction 4510
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4511
    //MAX
    t16_6 = max(t16_22, 0.00100000005);
    //Instruction 4512
    //RSQ
    t16_22 = inversesqrt(t16_6);
    //Instruction 4513
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 4514
    //SAMPLE
    t10_6.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4515
    //MAD
    t16_5.xyz = t10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4516
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4517
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4518
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4519
    //DP3
    t16_4.w = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 4520
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 4521
    //MAX
    t16_6 = max(t16_4.x, 0.0);
    //Instruction 4522
    //DP3
    t16_4.x = dot(t16_5.xyz, (-_LightDir.xyz));
    //Instruction 4523
    //MAX
    t16_12.xy = max(t16_4.xw, vec2(0.0, 0.0));
    //Instruction 4524
    //LOG
    t16_4.x = log2(t16_12.y);
    //Instruction 4525
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4526
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 4527
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 4528
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 4529
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 4530
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 4531
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 4532
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 4533
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 4534
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 4535
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 4536
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 4537
    //MUL
    t16_16 = t16_6 * t16_6;
    //Instruction 4538
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 4539
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4540
    //MAD
    t16_6 = t16_10.x * t16_6 + 9.99999975e-05;
    //Instruction 4541
    //DIV
    t16_6 = t16_4.x / t16_6;
    //Instruction 4542
    //MAX
    t16_4.x = max(t16_6, 0.0);
    //Instruction 4543
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 4544
    //SAMPLE
    t10_3.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4545
    //SAMPLE
    t10_6.x = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 4546
    //ADD
    t0.x = t0.x + t10_6.x;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4547
    //MUL
    t0.xyw = t0.xxx * _LightColor.xyz;
    //Instruction 4548
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_3.xyz;
    //Instruction 4549
    //MUL
    t16_4.xyz = t0.xyw * t16_4.xyz;
    //Instruction 4550
    //MUL
    t16_0.xyz = t16_12.xxx * t16_4.xyz;
    //Instruction 4551
    //MOV
    t16_0.w = 1.0;
    //Instruction 4552
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 4553
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4554
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 gbuffer2_2;
  mediump vec4 gbuffer1_3;
  mediump vec4 gbuffer0_4;
  mediump vec3 tmpvar_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_15;
  tmpvar_15 = clamp ((tmpvar_14.x + clamp (
    ((mix (tmpvar_9.z, sqrt(
      dot (tmpvar_11, tmpvar_11)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_13 = tmpvar_15;
  atten_6 = tmpvar_13;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_10;
  lowp vec4 tmpvar_17;
  highp vec2 P_18;
  P_18 = (_LightMatrix0 * tmpvar_16).xy;
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  atten_6 = (atten_6 * tmpvar_17.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture0, tmpvar_8);
  gbuffer0_4 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraGBufferTexture1, tmpvar_8);
  gbuffer1_3 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_CameraGBufferTexture2, tmpvar_8);
  gbuffer2_2 = tmpvar_21;
  tmpvar_5 = (_LightColor.xyz * atten_6);
  mediump vec3 tmpvar_22;
  tmpvar_22 = normalize(((gbuffer2_2.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((tmpvar_10 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_24;
  viewDir_24 = -(tmpvar_23);
  mediump vec3 tmpvar_25;
  mediump vec3 inVec_26;
  inVec_26 = (lightDir_7 + viewDir_24);
  tmpvar_25 = (inVec_26 * inversesqrt(max (0.001, 
    dot (inVec_26, inVec_26)
  )));
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (lightDir_7, tmpvar_25));
  mediump float tmpvar_28;
  tmpvar_28 = (1.0 - gbuffer1_3.w);
  mediump float tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = max ((10.0 / log2(
    (((1.0 - tmpvar_28) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_29 = (tmpvar_30 * tmpvar_30);
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = (((gbuffer0_4.xyz + 
    (clamp (((
      (tmpvar_29 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_22, tmpvar_25)), tmpvar_29)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_27 * tmpvar_27)
       * gbuffer1_3.w) + (tmpvar_28 * tmpvar_28))) * tmpvar_27)
     + 0.0001)), 0.0, 100.0) * gbuffer1_3.xyz)
  ) * tmpvar_5) * max (0.0, dot (tmpvar_22, lightDir_7)));
  mediump vec4 tmpvar_32;
  tmpvar_32 = exp2(-(tmpvar_31));
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3351
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3352
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3353
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3354
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3355
    //MOV
    gl_Position = t0;
    //Instruction 3356
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3357
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3358
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3359
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3360
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3361
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3362
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3363
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3364
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3365
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3366
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3367
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
highp vec2 t1;
lowp vec4 t10_1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec4 t16_4;
mediump vec3 t16_5;
highp vec2 t6;
lowp float t10_6;
mediump vec3 t16_10;
mediump vec2 t16_13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
mediump float t16_22;
void main()
{
    //Instruction 3279
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3280
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3281
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3282
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3283
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3284
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3285
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 3286
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3287
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3288
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3289
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3290
    //ADD
    t3.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3291
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3292
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3293
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 3294
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3295
    //MAD
    t0.x = t0.x * _LightShadowData.z + _LightShadowData.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3296
    //SAMPLE
    t10_6 = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 3297
    //ADD
    t0.x = t0.x + t10_6;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3298
    //MUL
    t6.xy = t2.yy * _LightMatrix0[1].xy;
    //Instruction 3299
    //MAD
    t6.xy = _LightMatrix0[0].xy * t2.xx + t6.xy;
    //Instruction 3300
    //MAD
    t6.xy = _LightMatrix0[2].xy * t2.ww + t6.xy;
    //Instruction 3301
    //ADD
    t2.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3302
    //ADD
    t6.xy = t6.xy + _LightMatrix0[3].xy;
    //Instruction 3303
    //SAMPLE
    t10_6 = texture(_LightTexture0, t6.xy).w;
    //Instruction 3304
    //MUL
    t0.x = t10_6 * t0.x;
    //Instruction 3305
    //MUL
    t0.xyz = t0.xxx * _LightColor.xyz;
    //Instruction 3306
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3307
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3308
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + (-_LightDir.xyz);
    //Instruction 3309
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3310
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 3311
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 3312
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 3313
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 3314
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3315
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3316
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 3317
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 3318
    //DP3
    t16_4.w = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 3319
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3320
    //MAX
    t16_18 = max(t16_4.x, 0.0);
    //Instruction 3321
    //DP3
    t16_4.x = dot(t16_5.xyz, (-_LightDir.xyz));
    //Instruction 3322
    //MAX
    t16_13.xy = max(t16_4.xw, vec2(0.0, 0.0));
    //Instruction 3323
    //LOG
    t16_4.x = log2(t16_13.y);
    //Instruction 3324
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 3325
    //SAMPLE
    t10_1.xyw = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 3326
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 3327
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 3328
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 3329
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 3330
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 3331
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 3332
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 3333
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 3334
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 3335
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3336
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 3337
    //MUL
    t16_16 = t16_18 * t16_18;
    //Instruction 3338
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 3339
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3340
    //MAD
    t16_18 = t16_10.x * t16_18 + 9.99999975e-05;
    //Instruction 3341
    //DIV
    t16_18 = t16_4.x / t16_18;
    //Instruction 3342
    //MAX
    t16_4.x = max(t16_18, 0.0);
    //Instruction 3343
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 3344
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_1.xyw;
    //Instruction 3345
    //MUL
    t16_4.xyz = t0.xyz * t16_4.xyz;
    //Instruction 3346
    //MUL
    t16_0.xyz = t16_13.xxx * t16_4.xyz;
    //Instruction 3347
    //MOV
    t16_0.w = 1.0;
    //Instruction 3348
    //EXP
    t16_0 = exp2((-t16_0));
    //Instruction 3349
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3350
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _LightPos.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(normalize(tmpvar_10));
  lightDir_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = (dot (tmpvar_10, tmpvar_10) * _LightPos.w);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12)).w;
  atten_5 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_16;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_17;
  tmpvar_17 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_19;
  viewDir_19 = -(tmpvar_18);
  mediump vec3 tmpvar_20;
  mediump vec3 inVec_21;
  inVec_21 = (lightDir_6 + viewDir_19);
  tmpvar_20 = (inVec_21 * inversesqrt(max (0.001, 
    dot (inVec_21, inVec_21)
  )));
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (lightDir_6, tmpvar_20));
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max ((10.0 / log2(
    (((1.0 - tmpvar_23) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_24 = (tmpvar_25 * tmpvar_25);
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_24 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_17, tmpvar_20)), tmpvar_24)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_22 * tmpvar_22)
       * gbuffer1_2.w) + (tmpvar_23 * tmpvar_23))) * tmpvar_22)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_17, lightDir_6)));
  gl_FragData[0] = tmpvar_26;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4633
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4634
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4635
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4636
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4637
    //MOV
    gl_Position = t0;
    //Instruction 4638
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4639
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4640
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4641
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4642
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4643
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4644
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4645
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4646
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4647
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4648
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4649
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump vec3 t16_0;
highp vec2 t1;
lowp vec3 t10_1;
highp vec3 t2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec4 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_10;
highp float t13;
lowp float t10_13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
highp float t19;
mediump float t16_22;
void main()
{
    //Instruction 4572
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4573
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4574
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4575
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4576
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 4577
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 4578
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 4579
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4580
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4581
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4582
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4583
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4584
    //ADD
    t0.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4585
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 4586
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4587
    //DP3
    t13 = dot(t0.xyz, t0.xyz);
    //Instruction 4588
    //RSQ
    t19 = inversesqrt(t13);
    //Instruction 4589
    //MUL
    t13 = t13 * _LightPos.w;
    //Instruction 4590
    //SAMPLE
    t10_13 = texture(_LightTextureB0, vec2(t13)).w;
    //Instruction 4591
    //MUL
    t3.xyz = vec3(t10_13) * _LightColor.xyz;
    //Instruction 4592
    //MUL
    t0.xyz = t0.xyz * vec3(t19);
    //Instruction 4593
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + (-t0.xyz);
    //Instruction 4594
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4595
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 4596
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 4597
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 4598
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4599
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4600
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4601
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4602
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4603
    //DP3
    t16_4.w = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 4604
    //DP3
    t16_4.x = dot((-t0.xyz), t16_4.xyz);
    //Instruction 4605
    //DP3
    t16_4.y = dot(t16_5.xyz, (-t0.xyz));
    //Instruction 4606
    //MAX
    t16_0.xyz = max(t16_4.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4607
    //LOG
    t16_4.x = log2(t16_0.z);
    //Instruction 4608
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4609
    //SAMPLE
    t10_1.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4610
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 4611
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 4612
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 4613
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 4614
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 4615
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 4616
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 4617
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 4618
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 4619
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 4620
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 4621
    //MUL
    t16_16 = t16_0.y * t16_0.y;
    //Instruction 4622
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 4623
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4624
    //MAD
    t16_6 = t16_10.x * t16_0.y + 9.99999975e-05;
    //Instruction 4625
    //DIV
    t16_6 = t16_4.x / t16_6;
    //Instruction 4626
    //MAX
    t16_4.x = max(t16_6, 0.0);
    //Instruction 4627
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 4628
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_1.xyz;
    //Instruction 4629
    //MUL
    t16_4.xyz = t3.xyz * t16_4.xyz;
    //Instruction 4630
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 4631
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4632
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  mediump vec3 lightDir_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_6).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_8;
  tmpvar_8 = -(_LightDir.xyz);
  lightDir_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_CameraGBufferTexture0, tmpvar_6);
  gbuffer0_3 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_CameraGBufferTexture1, tmpvar_6);
  gbuffer1_2 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_CameraGBufferTexture2, tmpvar_6);
  gbuffer2_1 = tmpvar_11;
  tmpvar_4 = _LightColor.xyz;
  mediump vec3 tmpvar_12;
  tmpvar_12 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((_CameraToWorld * tmpvar_7).xyz - _WorldSpaceCameraPos));
  mediump vec3 viewDir_14;
  viewDir_14 = -(tmpvar_13);
  mediump vec3 tmpvar_15;
  mediump vec3 inVec_16;
  inVec_16 = (lightDir_5 + viewDir_14);
  tmpvar_15 = (inVec_16 * inversesqrt(max (0.001, 
    dot (inVec_16, inVec_16)
  )));
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (lightDir_5, tmpvar_15));
  mediump float tmpvar_18;
  tmpvar_18 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max ((10.0 / log2(
    (((1.0 - tmpvar_18) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_19 = (tmpvar_20 * tmpvar_20);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_19 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_12, tmpvar_15)), tmpvar_19)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_17 * tmpvar_17)
       * gbuffer1_2.w) + (tmpvar_18 * tmpvar_18))) * tmpvar_17)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_12, lightDir_5)));
  gl_FragData[0] = tmpvar_21;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4683
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4684
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4685
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4686
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4687
    //MOV
    gl_Position = t0;
    //Instruction 4688
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4689
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4690
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4691
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4692
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4693
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4694
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4695
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4696
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4697
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4698
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4699
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
highp vec2 t1;
lowp vec3 t10_1;
highp vec3 t2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_5;
mediump vec3 t16_8;
mediump float t16_13;
highp float t15;
mediump float t16_18;
void main()
{
    //Instruction 4628
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4629
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4630
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4631
    //SAMPLE
    t15 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4632
    //MAD
    t15 = _ZBufferParams.x * t15 + _ZBufferParams.y;
    //Instruction 4633
    //DIV
    t15 = float(1.0) / t15;
    //Instruction 4634
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 4635
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4636
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4637
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4638
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4639
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4640
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4641
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 4642
    //MAD
    t16_3.xyz = (-t0.xyz) * vec3(t15) + (-_LightDir.xyz);
    //Instruction 4643
    //DP3
    t16_18 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 4644
    //MAX
    t16_0 = max(t16_18, 0.00100000005);
    //Instruction 4645
    //RSQ
    t16_18 = inversesqrt(t16_0);
    //Instruction 4646
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 4647
    //SAMPLE
    t10_0.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4648
    //MAD
    t16_4.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4649
    //DP3
    t16_18 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4650
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 4651
    //MUL
    t16_4.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 4652
    //DP3
    t16_3.w = dot(t16_4.xyz, t16_3.xyz);
    //Instruction 4653
    //DP3
    t16_3.x = dot((-_LightDir.xyz), t16_3.xyz);
    //Instruction 4654
    //MAX
    t16_0 = max(t16_3.x, 0.0);
    //Instruction 4655
    //DP3
    t16_3.x = dot(t16_4.xyz, (-_LightDir.xyz));
    //Instruction 4656
    //MAX
    t16_5.xy = max(t16_3.xw, vec2(0.0, 0.0));
    //Instruction 4657
    //LOG
    t16_3.x = log2(t16_5.y);
    //Instruction 4658
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4659
    //SAMPLE
    t10_1.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4660
    //ADD
    t16_8.x = (-t10_2.w) + 1.0;
    //Instruction 4661
    //ADD
    t16_13 = (-t16_8.x) + 1.0;
    //Instruction 4662
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 4663
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 4664
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 4665
    //MAX
    t16_8.y = max(t16_13, -255.936996);
    //Instruction 4666
    //MUL
    t16_8.xz = t16_8.xy * t16_8.xy;
    //Instruction 4667
    //MAD
    t16_13 = t16_8.y * t16_8.y + 1.0;
    //Instruction 4668
    //MUL
    t16_3.x = t16_3.x * t16_8.z;
    //Instruction 4669
    //EXP
    t16_3.x = exp2(t16_3.x);
    //Instruction 4670
    //MUL
    t16_3.x = t16_3.x * t16_13;
    //Instruction 4671
    //MUL
    t16_13 = t16_0 * t16_0;
    //Instruction 4672
    //MAD
    t16_8.x = t16_13 * t10_2.w + t16_8.x;
    //Instruction 4673
    //MUL
    t16_8.x = t16_8.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4674
    //MAD
    t16_0 = t16_8.x * t16_0 + 9.99999975e-05;
    //Instruction 4675
    //DIV
    t16_0 = t16_3.x / t16_0;
    //Instruction 4676
    //MAX
    t16_3.x = max(t16_0, 0.0);
    //Instruction 4677
    //MIN
    t16_3.x = min(t16_3.x, 100.0);
    //Instruction 4678
    //MAD
    t16_3.xyz = t16_3.xxx * t10_2.xyz + t10_1.xyz;
    //Instruction 4679
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor.xyz;
    //Instruction 4680
    //MUL
    SV_Target0.xyz = t16_5.xxx * t16_3.xyz;
    //Instruction 4681
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4682
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_LightPos.xyz - tmpvar_9);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_10);
  lightDir_6 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_9;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12);
  lowp float tmpvar_14;
  tmpvar_14 = texture2DProj (_LightTexture0, tmpvar_13).w;
  atten_5 = tmpvar_14;
  atten_5 = (atten_5 * float((tmpvar_13.w < 0.0)));
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_10, tmpvar_10) * _LightPos.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15));
  atten_5 = (atten_5 * tmpvar_16.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_19;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_22;
  viewDir_22 = -(tmpvar_21);
  mediump vec3 tmpvar_23;
  mediump vec3 inVec_24;
  inVec_24 = (lightDir_6 + viewDir_22);
  tmpvar_23 = (inVec_24 * inversesqrt(max (0.001, 
    dot (inVec_24, inVec_24)
  )));
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (lightDir_6, tmpvar_23));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = max ((10.0 / log2(
    (((1.0 - tmpvar_26) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_27 = (tmpvar_28 * tmpvar_28);
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_27 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_20, tmpvar_23)), tmpvar_27)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_25 * tmpvar_25)
       * gbuffer1_2.w) + (tmpvar_26 * tmpvar_26))) * tmpvar_25)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_20, lightDir_6)));
  gl_FragData[0] = tmpvar_29;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3441
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3442
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3443
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3444
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3445
    //MOV
    gl_Position = t0;
    //Instruction 3446
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3447
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3448
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3449
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3450
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3451
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3452
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3453
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3454
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3455
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3456
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3457
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
lowp float t10_0;
highp vec4 t1;
mediump float t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec4 t10_2;
highp vec3 t3;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_10;
highp float t12;
bool tb12;
highp float t13;
lowp float t10_13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
highp float t19;
mediump float t16_19;
mediump float t16_22;
void main()
{
    //Instruction 3368
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3369
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3370
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3371
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3372
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3373
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3374
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 3375
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 3376
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 3377
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3378
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 3379
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3380
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3381
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3382
    //ADD
    t3.xyz = (-t0.xyz) + _LightPos.xyz;
    //Instruction 3383
    //DP3
    t13 = dot(t3.xyz, t3.xyz);
    //Instruction 3384
    //RSQ
    t19 = inversesqrt(t13);
    //Instruction 3385
    //MUL
    t13 = t13 * _LightPos.w;
    //Instruction 3386
    //SAMPLE
    t10_13 = texture(_LightTextureB0, vec2(t13)).w;
    //Instruction 3387
    //MUL
    t3.xyz = vec3(t19) * t3.xyz;
    //Instruction 3388
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + t3.xyz;
    //Instruction 3389
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3390
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 3391
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 3392
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 3393
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 3394
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3395
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3396
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 3397
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 3398
    //DP3
    t16_22 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 3399
    //DP3
    t16_4.x = dot(t3.xyz, t16_4.xyz);
    //Instruction 3400
    //DP3
    t16_10.x = dot(t16_5.xyz, t3.xyz);
    //Instruction 3401
    //MAX
    t16_18 = max(t16_10.x, 0.0);
    //Instruction 3402
    //MAX
    t16_19 = max(t16_4.x, 0.0);
    //Instruction 3403
    //MAX
    t16_2 = max(t16_22, 0.0);
    //Instruction 3404
    //LOG
    t16_4.x = log2(t16_2);
    //Instruction 3405
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 3406
    //SAMPLE
    t10_3.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 3407
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 3408
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 3409
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 3410
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 3411
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 3412
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 3413
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 3414
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 3415
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 3416
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3417
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 3418
    //MUL
    t16_16 = t16_19 * t16_19;
    //Instruction 3419
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 3420
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3421
    //MAD
    t16_1 = t16_10.x * t16_19 + 9.99999975e-05;
    //Instruction 3422
    //DIV
    t16_1 = t16_4.x / t16_1;
    //Instruction 3423
    //MAX
    t16_4.x = max(t16_1, 0.0);
    //Instruction 3424
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 3425
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_3.xyz;
    //Instruction 3426
    //MUL
    t1.xyw = t0.yyy * _LightMatrix0[1].xyw;
    //Instruction 3427
    //MAD
    t1.xyw = _LightMatrix0[0].xyw * t0.xxx + t1.xyw;
    //Instruction 3428
    //MAD
    t0.xyz = _LightMatrix0[2].xyw * t0.zzz + t1.xyw;
    //Instruction 3429
    //ADD
    t0.xyz = t0.xyz + _LightMatrix0[3].xyw;
    //Instruction 3430
    //DIV
    t0.xy = t0.xy / t0.zz;
    //Instruction 3431
    //LT
    tb12 = t0.z<0.0;
    //Instruction 3432
    //AND
    t12 = tb12 ? 1.0 : float(0.0);
    //Instruction 3433
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xy).w;
    //Instruction 3434
    //MUL
    t0.x = t12 * t10_0;
    //Instruction 3435
    //MUL
    t0.x = t10_13 * t0.x;
    //Instruction 3436
    //MUL
    t0.xyz = t0.xxx * _LightColor.xyz;
    //Instruction 3437
    //MUL
    t16_4.xyz = t0.xyz * t16_4.xyz;
    //Instruction 3438
    //MUL
    SV_Target0.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 3439
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3440
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _LightPos.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(normalize(tmpvar_10));
  lightDir_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = (dot (tmpvar_10, tmpvar_10) * _LightPos.w);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12)).w;
  atten_5 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_9;
  lowp vec4 tmpvar_15;
  highp vec3 P_16;
  P_16 = (_LightMatrix0 * tmpvar_14).xyz;
  tmpvar_15 = textureCube (_LightTexture0, P_16);
  atten_5 = (atten_5 * tmpvar_15.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_19;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_22;
  viewDir_22 = -(tmpvar_21);
  mediump vec3 tmpvar_23;
  mediump vec3 inVec_24;
  inVec_24 = (lightDir_6 + viewDir_22);
  tmpvar_23 = (inVec_24 * inversesqrt(max (0.001, 
    dot (inVec_24, inVec_24)
  )));
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (lightDir_6, tmpvar_23));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = max ((10.0 / log2(
    (((1.0 - tmpvar_26) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_27 = (tmpvar_28 * tmpvar_28);
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_27 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_20, tmpvar_23)), tmpvar_27)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_25 * tmpvar_25)
       * gbuffer1_2.w) + (tmpvar_26 * tmpvar_26))) * tmpvar_25)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_20, lightDir_6)));
  gl_FragData[0] = tmpvar_29;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4769
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4770
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4771
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4772
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4773
    //MOV
    gl_Position = t0;
    //Instruction 4774
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4775
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4776
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4777
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4778
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4779
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4780
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4781
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4782
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4783
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4784
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4785
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
highp vec4 t1;
mediump float t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec4 t10_2;
highp vec3 t3;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_10;
highp float t13;
lowp float t10_13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
highp float t19;
mediump float t16_19;
mediump float t16_22;
void main()
{
    //Instruction 4700
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4701
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4702
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4703
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4704
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 4705
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 4706
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 4707
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4708
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4709
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4710
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4711
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4712
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 4713
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4714
    //ADD
    t3.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4715
    //DP3
    t13 = dot(t3.xyz, t3.xyz);
    //Instruction 4716
    //RSQ
    t19 = inversesqrt(t13);
    //Instruction 4717
    //MUL
    t13 = t13 * _LightPos.w;
    //Instruction 4718
    //SAMPLE
    t10_13 = texture(_LightTextureB0, vec2(t13)).w;
    //Instruction 4719
    //MUL
    t3.xyz = vec3(t19) * t3.xyz;
    //Instruction 4720
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + (-t3.xyz);
    //Instruction 4721
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4722
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 4723
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 4724
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 4725
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4726
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4727
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4728
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4729
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4730
    //DP3
    t16_22 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 4731
    //DP3
    t16_4.x = dot((-t3.xyz), t16_4.xyz);
    //Instruction 4732
    //DP3
    t16_10.x = dot(t16_5.xyz, (-t3.xyz));
    //Instruction 4733
    //MAX
    t16_18 = max(t16_10.x, 0.0);
    //Instruction 4734
    //MAX
    t16_19 = max(t16_4.x, 0.0);
    //Instruction 4735
    //MAX
    t16_2 = max(t16_22, 0.0);
    //Instruction 4736
    //LOG
    t16_4.x = log2(t16_2);
    //Instruction 4737
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4738
    //SAMPLE
    t10_3.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4739
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 4740
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 4741
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 4742
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 4743
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 4744
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 4745
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 4746
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 4747
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 4748
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 4749
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 4750
    //MUL
    t16_16 = t16_19 * t16_19;
    //Instruction 4751
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 4752
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4753
    //MAD
    t16_1 = t16_10.x * t16_19 + 9.99999975e-05;
    //Instruction 4754
    //DIV
    t16_1 = t16_4.x / t16_1;
    //Instruction 4755
    //MAX
    t16_4.x = max(t16_1, 0.0);
    //Instruction 4756
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 4757
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_3.xyz;
    //Instruction 4758
    //MUL
    t1.xyw = t0.yyy * _LightMatrix0[1].xyz;
    //Instruction 4759
    //MAD
    t1.xyw = _LightMatrix0[0].xyz * t0.xxx + t1.xyw;
    //Instruction 4760
    //MAD
    t0.xyz = _LightMatrix0[2].xyz * t0.zzz + t1.xyw;
    //Instruction 4761
    //ADD
    t0.xyz = t0.xyz + _LightMatrix0[3].xyz;
    //Instruction 4762
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xyz).w;
    //Instruction 4763
    //MUL
    t16_0 = t10_0 * t10_13;
    //Instruction 4764
    //MUL
    t0.xyz = vec3(t16_0) * _LightColor.xyz;
    //Instruction 4765
    //MUL
    t16_4.xyz = t0.xyz * t16_4.xyz;
    //Instruction 4766
    //MUL
    SV_Target0.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 4767
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4768
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_9;
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (_LightMatrix0 * tmpvar_11).xy;
  tmpvar_12 = texture2D (_LightTexture0, P_13);
  atten_5 = tmpvar_12.w;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_16;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_17;
  tmpvar_17 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_19;
  viewDir_19 = -(tmpvar_18);
  mediump vec3 tmpvar_20;
  mediump vec3 inVec_21;
  inVec_21 = (lightDir_6 + viewDir_19);
  tmpvar_20 = (inVec_21 * inversesqrt(max (0.001, 
    dot (inVec_21, inVec_21)
  )));
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (lightDir_6, tmpvar_20));
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max ((10.0 / log2(
    (((1.0 - tmpvar_23) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_24 = (tmpvar_25 * tmpvar_25);
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_24 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_17, tmpvar_20)), tmpvar_24)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_22 * tmpvar_22)
       * gbuffer1_2.w) + (tmpvar_23 * tmpvar_23))) * tmpvar_22)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_17, lightDir_6)));
  gl_FragData[0] = tmpvar_26;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3519
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3520
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3521
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3522
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3523
    //MOV
    gl_Position = t0;
    //Instruction 3524
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3525
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3526
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3527
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3528
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3529
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3530
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3531
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3532
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3533
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3534
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3535
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
lowp float t10_0;
highp vec2 t1;
lowp vec4 t10_1;
highp vec3 t2;
lowp vec4 t10_2;
mediump vec4 t16_3;
mediump vec3 t16_4;
highp vec3 t5;
mediump vec3 t16_8;
mediump vec2 t16_11;
mediump float t16_13;
highp float t15;
mediump float t16_15;
mediump float t16_18;
void main()
{
    //Instruction 3458
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3459
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3460
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3461
    //SAMPLE
    t15 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3462
    //MAD
    t15 = _ZBufferParams.x * t15 + _ZBufferParams.y;
    //Instruction 3463
    //DIV
    t15 = float(1.0) / t15;
    //Instruction 3464
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3465
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 3466
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 3467
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3468
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 3469
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3470
    //DP3
    t15 = dot(t2.xyz, t2.xyz);
    //Instruction 3471
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3472
    //MAD
    t16_3.xyz = (-t2.xyz) * vec3(t15) + (-_LightDir.xyz);
    //Instruction 3473
    //DP3
    t16_18 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 3474
    //MAX
    t16_15 = max(t16_18, 0.00100000005);
    //Instruction 3475
    //RSQ
    t16_18 = inversesqrt(t16_15);
    //Instruction 3476
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 3477
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 3478
    //MAD
    t16_4.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3479
    //DP3
    t16_18 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3480
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 3481
    //MUL
    t16_4.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 3482
    //DP3
    t16_3.w = dot(t16_4.xyz, t16_3.xyz);
    //Instruction 3483
    //DP3
    t16_3.x = dot((-_LightDir.xyz), t16_3.xyz);
    //Instruction 3484
    //MAX
    t16_15 = max(t16_3.x, 0.0);
    //Instruction 3485
    //DP3
    t16_3.x = dot(t16_4.xyz, (-_LightDir.xyz));
    //Instruction 3486
    //MAX
    t16_11.xy = max(t16_3.xw, vec2(0.0, 0.0));
    //Instruction 3487
    //LOG
    t16_3.x = log2(t16_11.y);
    //Instruction 3488
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 3489
    //SAMPLE
    t10_1.xyw = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 3490
    //ADD
    t16_8.x = (-t10_2.w) + 1.0;
    //Instruction 3491
    //ADD
    t16_13 = (-t16_8.x) + 1.0;
    //Instruction 3492
    //MAD
    t16_13 = t16_13 * 0.967999995 + 0.0299999993;
    //Instruction 3493
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 3494
    //DIV
    t16_13 = 10.0 / t16_13;
    //Instruction 3495
    //MAX
    t16_8.y = max(t16_13, -255.936996);
    //Instruction 3496
    //MUL
    t16_8.xz = t16_8.xy * t16_8.xy;
    //Instruction 3497
    //MAD
    t16_13 = t16_8.y * t16_8.y + 1.0;
    //Instruction 3498
    //MUL
    t16_3.x = t16_3.x * t16_8.z;
    //Instruction 3499
    //EXP
    t16_3.x = exp2(t16_3.x);
    //Instruction 3500
    //MUL
    t16_3.x = t16_3.x * t16_13;
    //Instruction 3501
    //MUL
    t16_13 = t16_15 * t16_15;
    //Instruction 3502
    //MAD
    t16_8.x = t16_13 * t10_2.w + t16_8.x;
    //Instruction 3503
    //MUL
    t16_8.x = t16_8.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3504
    //MAD
    t16_15 = t16_8.x * t16_15 + 9.99999975e-05;
    //Instruction 3505
    //DIV
    t16_15 = t16_3.x / t16_15;
    //Instruction 3506
    //MAX
    t16_3.x = max(t16_15, 0.0);
    //Instruction 3507
    //MIN
    t16_3.x = min(t16_3.x, 100.0);
    //Instruction 3508
    //MAD
    t16_3.xyz = t16_3.xxx * t10_2.xyz + t10_1.xyw;
    //Instruction 3509
    //MUL
    t5.xz = t0.yy * _LightMatrix0[1].xy;
    //Instruction 3510
    //MAD
    t0.xy = _LightMatrix0[0].xy * t0.xx + t5.xz;
    //Instruction 3511
    //MAD
    t0.xy = _LightMatrix0[2].xy * t0.zz + t0.xy;
    //Instruction 3512
    //ADD
    t0.xy = t0.xy + _LightMatrix0[3].xy;
    //Instruction 3513
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xy).w;
    //Instruction 3514
    //MUL
    t0.xyz = vec3(t10_0) * _LightColor.xyz;
    //Instruction 3515
    //MUL
    t16_3.xyz = t0.xyz * t16_3.xyz;
    //Instruction 3516
    //MUL
    SV_Target0.xyz = t16_11.xxx * t16_3.xyz;
    //Instruction 3517
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3518
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_HDR_ON" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = (_LightPos.xyz - tmpvar_9);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_11);
  lightDir_6 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_9;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_LightTexture0, tmpvar_14).w;
  atten_5 = tmpvar_15;
  atten_5 = (atten_5 * float((tmpvar_14.w < 0.0)));
  highp float tmpvar_16;
  tmpvar_16 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  atten_5 = (atten_5 * tmpvar_17.w);
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (((
    mix (tmpvar_8.z, sqrt(dot (tmpvar_10, tmpvar_10)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_9;
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_World2Shadow[0] * tmpvar_20);
  lowp float tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = texture2DProj (_ShadowMapTexture, tmpvar_21);
  mediump float tmpvar_24;
  if ((tmpvar_23.x < (tmpvar_21.z / tmpvar_21.w))) {
    tmpvar_24 = _LightShadowData.x;
  } else {
    tmpvar_24 = 1.0;
  };
  tmpvar_22 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp ((tmpvar_22 + tmpvar_19), 0.0, 1.0);
  tmpvar_18 = tmpvar_25;
  atten_5 = (atten_5 * tmpvar_18);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_28;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_29;
  tmpvar_29 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_31;
  viewDir_31 = -(tmpvar_30);
  mediump vec3 tmpvar_32;
  mediump vec3 inVec_33;
  inVec_33 = (lightDir_6 + viewDir_31);
  tmpvar_32 = (inVec_33 * inversesqrt(max (0.001, 
    dot (inVec_33, inVec_33)
  )));
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (lightDir_6, tmpvar_32));
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = max ((10.0 / log2(
    (((1.0 - tmpvar_35) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_36 = (tmpvar_37 * tmpvar_37);
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_36 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_29, tmpvar_32)), tmpvar_36)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_34 * tmpvar_34)
       * gbuffer1_2.w) + (tmpvar_35 * tmpvar_35))) * tmpvar_34)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_29, lightDir_6)));
  gl_FragData[0] = tmpvar_38;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = (_LightPos.xyz - tmpvar_9);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_11);
  lightDir_6 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_9;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_LightTexture0, tmpvar_14).w;
  atten_5 = tmpvar_15;
  atten_5 = (atten_5 * float((tmpvar_14.w < 0.0)));
  highp float tmpvar_16;
  tmpvar_16 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  atten_5 = (atten_5 * tmpvar_17.w);
  mediump float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_9;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_World2Shadow[0] * tmpvar_19);
  lowp float tmpvar_21;
  mediump float shadow_22;
  lowp float tmpvar_23;
  tmpvar_23 = shadow2DProjEXT (_ShadowMapTexture, tmpvar_20);
  mediump float tmpvar_24;
  tmpvar_24 = tmpvar_23;
  shadow_22 = (_LightShadowData.x + (tmpvar_24 * (1.0 - _LightShadowData.x)));
  tmpvar_21 = shadow_22;
  highp float tmpvar_25;
  tmpvar_25 = clamp ((tmpvar_21 + clamp (
    ((mix (tmpvar_8.z, sqrt(
      dot (tmpvar_10, tmpvar_10)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_18 = tmpvar_25;
  atten_5 = (atten_5 * tmpvar_18);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_28;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_29;
  tmpvar_29 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_31;
  viewDir_31 = -(tmpvar_30);
  mediump vec3 tmpvar_32;
  mediump vec3 inVec_33;
  inVec_33 = (lightDir_6 + viewDir_31);
  tmpvar_32 = (inVec_33 * inversesqrt(max (0.001, 
    dot (inVec_33, inVec_33)
  )));
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (lightDir_6, tmpvar_32));
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = max ((10.0 / log2(
    (((1.0 - tmpvar_35) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_36 = (tmpvar_37 * tmpvar_37);
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_36 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_29, tmpvar_32)), tmpvar_36)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_34 * tmpvar_34)
       * gbuffer1_2.w) + (tmpvar_35 * tmpvar_35))) * tmpvar_34)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_29, lightDir_6)));
  gl_FragData[0] = tmpvar_38;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3626
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3627
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3628
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3629
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3630
    //MOV
    gl_Position = t0;
    //Instruction 3631
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3632
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3633
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3634
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3635
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3636
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3637
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3638
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3639
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3640
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3641
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3642
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
lowp float t10_1;
highp vec2 t2;
lowp vec3 t10_2;
highp vec4 t3;
lowp vec4 t10_3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump float t16_7;
highp vec3 t8;
lowp float t10_8;
mediump vec3 t16_12;
mediump float t16_14;
highp float t15;
lowp float t10_15;
mediump float t16_21;
highp float t22;
mediump float t16_22;
bool tb22;
mediump float t16_23;
mediump float t16_24;
void main()
{
    //Instruction 3536
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3537
    //DIV
    t1.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3538
    //MUL
    t1.xyz = t1.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3539
    //DIV
    t2.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3540
    //SAMPLE
    t22 = texture(_CameraDepthTexture, t2.xy).x;
    //Instruction 3541
    //MAD
    t22 = _ZBufferParams.x * t22 + _ZBufferParams.y;
    //Instruction 3542
    //DIV
    t22 = float(1.0) / t22;
    //Instruction 3543
    //MUL
    t3.xyz = vec3(t22) * t1.xyz;
    //Instruction 3544
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 3545
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 3546
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 3547
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 3548
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 3549
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 3550
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 3551
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 3552
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 3553
    //SAMPLE_C_LZ
    vec3 txVec12 = vec3(t4.xy,t4.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    //Instruction 3554
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 3555
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3556
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 3557
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 3558
    //MAD
    t1.x = (-t1.z) * t22 + t1.x;
    //Instruction 3559
    //MAD
    t1.x = unity_ShadowFadeCenterAndType.w * t1.x + t3.z;
    //Instruction 3560
    //MAD
    t1.x = t1.x * _LightShadowData.z + _LightShadowData.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 3561
    //ADD
    t1.x = t16_0.x + t1.x;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 3562
    //MUL
    t8.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 3563
    //MAD
    t8.xyz = _LightMatrix0[0].xyw * t3.xxx + t8.xyz;
    //Instruction 3564
    //MAD
    t8.xyz = _LightMatrix0[2].xyw * t3.www + t8.xyz;
    //Instruction 3565
    //ADD
    t8.xyz = t8.xyz + _LightMatrix0[3].xyw;
    //Instruction 3566
    //DIV
    t8.xy = t8.xy / t8.zz;
    //Instruction 3567
    //LT
    tb22 = t8.z<0.0;
    //Instruction 3568
    //AND
    t22 = tb22 ? 1.0 : float(0.0);
    //Instruction 3569
    //SAMPLE
    t10_8 = texture(_LightTexture0, t8.xy).w;
    //Instruction 3570
    //MUL
    t8.x = t22 * t10_8;
    //Instruction 3571
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 3572
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3573
    //DP3
    t15 = dot(t4.xyz, t4.xyz);
    //Instruction 3574
    //MUL
    t22 = t15 * _LightPos.w;
    //Instruction 3575
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3576
    //MUL
    t4.xyz = vec3(t15) * t4.xyz;
    //Instruction 3577
    //SAMPLE
    t10_15 = texture(_LightTextureB0, vec2(t22)).w;
    //Instruction 3578
    //MUL
    t8.x = t10_15 * t8.x;
    //Instruction 3579
    //MUL
    t1.x = t1.x * t8.x;
    //Instruction 3580
    //MUL
    t1.xyz = t1.xxx * _LightColor.xyz;
    //Instruction 3581
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 3582
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 3583
    //MAD
    t16_0.xyz = (-t3.xyz) * vec3(t22) + t4.xyz;
    //Instruction 3584
    //DP3
    t16_21 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 3585
    //MAX
    t16_22 = max(t16_21, 0.00100000005);
    //Instruction 3586
    //RSQ
    t16_21 = inversesqrt(t16_22);
    //Instruction 3587
    //MUL
    t16_0.xyz = vec3(t16_21) * t16_0.xyz;
    //Instruction 3588
    //DP3
    t16_21 = dot(t4.xyz, t16_0.xyz);
    //Instruction 3589
    //MAX
    t16_22 = max(t16_21, 0.0);
    //Instruction 3590
    //MUL
    t16_21 = t16_22 * t16_22;
    //Instruction 3591
    //SAMPLE
    t10_3 = texture(_CameraGBufferTexture1, t2.xy);
    //Instruction 3592
    //ADD
    t16_5 = (-t10_3.w) + 1.0;
    //Instruction 3593
    //MUL
    t16_12.x = t16_5 * t16_5;
    //Instruction 3594
    //ADD
    t16_5 = (-t16_5) + 1.0;
    //Instruction 3595
    //MAD
    t16_5 = t16_5 * 0.967999995 + 0.0299999993;
    //Instruction 3596
    //LOG
    t16_5 = log2(t16_5);
    //Instruction 3597
    //DIV
    t16_5 = 10.0 / t16_5;
    //Instruction 3598
    //MAX
    t16_5 = max(t16_5, -255.936996);
    //Instruction 3599
    //MAD
    t16_21 = t16_21 * t10_3.w + t16_12.x;
    //Instruction 3600
    //MUL
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    //Instruction 3601
    //MAD
    t16_22 = t16_21 * t16_22 + 9.99999975e-05;
    //Instruction 3602
    //SAMPLE
    t10_6.xyz = texture(_CameraGBufferTexture2, t2.xy).xyz;
    //Instruction 3603
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture0, t2.xy).xyz;
    //Instruction 3604
    //MAD
    t16_12.xyz = t10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3605
    //DP3
    t16_21 = dot(t16_12.xyz, t16_12.xyz);
    //Instruction 3606
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 3607
    //MUL
    t16_12.xyz = vec3(t16_21) * t16_12.xyz;
    //Instruction 3608
    //DP3
    t16_0.x = dot(t16_12.xyz, t16_0.xyz);
    //Instruction 3609
    //DP3
    t16_7 = dot(t16_12.xyz, t4.xyz);
    //Instruction 3610
    //MAX
    t16_23 = max(t16_7, 0.0);
    //Instruction 3611
    //MAX
    t16_24 = max(t16_0.x, 0.0);
    //Instruction 3612
    //LOG
    t16_0.x = log2(t16_24);
    //Instruction 3613
    //MUL
    t16_7 = t16_5 * t16_5;
    //Instruction 3614
    //MAD
    t16_14 = t16_5 * t16_5 + 1.0;
    //Instruction 3615
    //MUL
    t16_0.x = t16_0.x * t16_7;
    //Instruction 3616
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 3617
    //MUL
    t16_0.x = t16_0.x * t16_14;
    //Instruction 3618
    //DIV
    t16_22 = t16_0.x / t16_22;
    //Instruction 3619
    //MAX
    t16_0.x = max(t16_22, 0.0);
    //Instruction 3620
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 3621
    //MAD
    t16_0.xyz = t16_0.xxx * t10_3.xyz + t10_2.xyz;
    //Instruction 3622
    //MUL
    t16_0.xyz = t1.xyz * t16_0.xyz;
    //Instruction 3623
    //MUL
    SV_Target0.xyz = vec3(t16_23) * t16_0.xyz;
    //Instruction 3624
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3625
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ShadowMapTexture, tmpvar_7);
  highp float tmpvar_14;
  tmpvar_14 = clamp ((tmpvar_13.x + clamp (
    ((mix (tmpvar_8.z, sqrt(
      dot (tmpvar_10, tmpvar_10)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_12 = tmpvar_14;
  atten_5 = tmpvar_12;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_17;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_20;
  viewDir_20 = -(tmpvar_19);
  mediump vec3 tmpvar_21;
  mediump vec3 inVec_22;
  inVec_22 = (lightDir_6 + viewDir_20);
  tmpvar_21 = (inVec_22 * inversesqrt(max (0.001, 
    dot (inVec_22, inVec_22)
  )));
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (lightDir_6, tmpvar_21));
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max ((10.0 / log2(
    (((1.0 - tmpvar_24) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_25 = (tmpvar_26 * tmpvar_26);
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_25 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_18, tmpvar_21)), tmpvar_25)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_23 * tmpvar_23)
       * gbuffer1_2.w) + (tmpvar_24 * tmpvar_24))) * tmpvar_23)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_18, lightDir_6)));
  gl_FragData[0] = tmpvar_27;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ShadowMapTexture, tmpvar_7);
  highp float tmpvar_14;
  tmpvar_14 = clamp ((tmpvar_13.x + clamp (
    ((mix (tmpvar_8.z, sqrt(
      dot (tmpvar_10, tmpvar_10)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_12 = tmpvar_14;
  atten_5 = tmpvar_12;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_9;
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = (_LightMatrix0 * tmpvar_15).xy;
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  atten_5 = (atten_5 * tmpvar_16.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_20;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_23;
  viewDir_23 = -(tmpvar_22);
  mediump vec3 tmpvar_24;
  mediump vec3 inVec_25;
  inVec_25 = (lightDir_6 + viewDir_23);
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (lightDir_6, tmpvar_24));
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = max ((10.0 / log2(
    (((1.0 - tmpvar_27) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_28 = (tmpvar_29 * tmpvar_29);
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_28 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_21, tmpvar_24)), tmpvar_28)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_26 * tmpvar_26)
       * gbuffer1_2.w) + (tmpvar_27 * tmpvar_27))) * tmpvar_26)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_21, lightDir_6)));
  gl_FragData[0] = tmpvar_30;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _LightPos.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(normalize(tmpvar_10));
  lightDir_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = (dot (tmpvar_10, tmpvar_10) * _LightPos.w);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12)).w;
  atten_5 = tmpvar_13;
  highp float mydist_14;
  mydist_14 = ((sqrt(
    dot (tmpvar_10, tmpvar_10)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_15;
  tmpvar_15 = dot (textureCube (_ShadowMapTexture, tmpvar_10), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_16;
  if ((tmpvar_15 < mydist_14)) {
    tmpvar_16 = _LightShadowData.x;
  } else {
    tmpvar_16 = 1.0;
  };
  atten_5 = (atten_5 * tmpvar_16);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_19;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_22;
  viewDir_22 = -(tmpvar_21);
  mediump vec3 tmpvar_23;
  mediump vec3 inVec_24;
  inVec_24 = (lightDir_6 + viewDir_22);
  tmpvar_23 = (inVec_24 * inversesqrt(max (0.001, 
    dot (inVec_24, inVec_24)
  )));
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (lightDir_6, tmpvar_23));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = max ((10.0 / log2(
    (((1.0 - tmpvar_26) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_27 = (tmpvar_28 * tmpvar_28);
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_27 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_20, tmpvar_23)), tmpvar_27)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_25 * tmpvar_25)
       * gbuffer1_2.w) + (tmpvar_26 * tmpvar_26))) * tmpvar_25)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_20, lightDir_6)));
  gl_FragData[0] = tmpvar_29;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4719
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4720
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4721
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4722
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4723
    //MOV
    gl_Position = t0;
    //Instruction 4724
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4725
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4726
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4727
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4728
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4729
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4730
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4731
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4732
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4733
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4734
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4735
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
bool tb0;
highp vec2 t1;
lowp vec4 t10_1;
highp vec3 t2;
lowp vec4 t10_2;
highp vec3 t3;
highp vec4 t4;
mediump vec4 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_12;
highp float t14;
mediump float t16_14;
highp float t15;
mediump float t16_19;
highp float t21;
lowp float t10_21;
highp float t22;
mediump float t16_26;
void main()
{
    //Instruction 4650
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4651
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4652
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4653
    //SAMPLE
    t21 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4654
    //MAD
    t21 = _ZBufferParams.x * t21 + _ZBufferParams.y;
    //Instruction 4655
    //DIV
    t21 = float(1.0) / t21;
    //Instruction 4656
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 4657
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4658
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4659
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4660
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4661
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4662
    //ADD
    t0.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4663
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 4664
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 4665
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 4666
    //RSQ
    t22 = inversesqrt(t15);
    //Instruction 4667
    //MUL
    t3.xyz = t0.xyz * vec3(t22);
    //Instruction 4668
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t0.xyz);
    //Instruction 4669
    //DP4
    t0.x = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4670
    //MAD
    t16_5.xyz = (-t2.xyz) * vec3(t21) + (-t3.xyz);
    //Instruction 4671
    //DP3
    t16_26 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4672
    //MAX
    t16_7.x = max(t16_26, 0.00100000005);
    //Instruction 4673
    //RSQ
    t16_26 = inversesqrt(t16_7.x);
    //Instruction 4674
    //MUL
    t16_5.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 4675
    //SAMPLE
    t10_7.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4676
    //MAD
    t16_6.xyz = t10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4677
    //DP3
    t16_26 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 4678
    //RSQ
    t16_26 = inversesqrt(t16_26);
    //Instruction 4679
    //MUL
    t16_6.xyz = vec3(t16_26) * t16_6.xyz;
    //Instruction 4680
    //DP3
    t16_5.w = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 4681
    //DP3
    t16_5.x = dot((-t3.xyz), t16_5.xyz);
    //Instruction 4682
    //DP3
    t16_5.y = dot(t16_6.xyz, (-t3.xyz));
    //Instruction 4683
    //MAX
    t16_7.xyz = max(t16_5.yxw, vec3(0.0, 0.0, 0.0));
    //Instruction 4684
    //LOG
    t16_5.x = log2(t16_7.z);
    //Instruction 4685
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4686
    //SAMPLE
    t10_1.xyw = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4687
    //ADD
    t16_12.x = (-t10_2.w) + 1.0;
    //Instruction 4688
    //ADD
    t16_19 = (-t16_12.x) + 1.0;
    //Instruction 4689
    //MAD
    t16_19 = t16_19 * 0.967999995 + 0.0299999993;
    //Instruction 4690
    //LOG
    t16_19 = log2(t16_19);
    //Instruction 4691
    //DIV
    t16_19 = 10.0 / t16_19;
    //Instruction 4692
    //MAX
    t16_12.y = max(t16_19, -255.936996);
    //Instruction 4693
    //MUL
    t16_12.xz = t16_12.xy * t16_12.xy;
    //Instruction 4694
    //MAD
    t16_19 = t16_12.y * t16_12.y + 1.0;
    //Instruction 4695
    //MUL
    t16_5.x = t16_5.x * t16_12.z;
    //Instruction 4696
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 4697
    //MUL
    t16_5.x = t16_5.x * t16_19;
    //Instruction 4698
    //MUL
    t16_19 = t16_7.y * t16_7.y;
    //Instruction 4699
    //MAD
    t16_12.x = t16_19 * t10_2.w + t16_12.x;
    //Instruction 4700
    //MUL
    t16_12.x = t16_12.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4701
    //MAD
    t16_14 = t16_12.x * t16_7.y + 9.99999975e-05;
    //Instruction 4702
    //DIV
    t16_14 = t16_5.x / t16_14;
    //Instruction 4703
    //MAX
    t16_5.x = max(t16_14, 0.0);
    //Instruction 4704
    //MIN
    t16_5.x = min(t16_5.x, 100.0);
    //Instruction 4705
    //MAD
    t16_5.xyz = t16_5.xxx * t10_2.xyz + t10_1.xyw;
    //Instruction 4706
    //SQRT
    t14 = sqrt(t15);
    //Instruction 4707
    //MUL
    t21 = t15 * _LightPos.w;
    //Instruction 4708
    //SAMPLE
    t10_21 = texture(_LightTextureB0, vec2(t21)).w;
    //Instruction 4709
    //MUL
    t14 = t14 * _LightPositionRange.w;
    //Instruction 4710
    //MUL
    t14 = t14 * 0.970000029;
    //Instruction 4711
    //LT
    tb0 = t0.x<t14;
    //Instruction 4712
    //MOVC
    t16_26 = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 4713
    //MUL
    t16_0 = t10_21 * t16_26;
    //Instruction 4714
    //MUL
    t0.xzw = vec3(t16_0) * _LightColor.xyz;
    //Instruction 4715
    //MUL
    t16_5.xyz = t0.xzw * t16_5.xyz;
    //Instruction 4716
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_5.xyz;
    //Instruction 4717
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4718
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _LightPos.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(normalize(tmpvar_10));
  lightDir_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = (dot (tmpvar_10, tmpvar_10) * _LightPos.w);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12)).w;
  atten_5 = tmpvar_13;
  highp float mydist_14;
  mydist_14 = ((sqrt(
    dot (tmpvar_10, tmpvar_10)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_15;
  tmpvar_15 = dot (textureCube (_ShadowMapTexture, tmpvar_10), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_16;
  if ((tmpvar_15 < mydist_14)) {
    tmpvar_16 = _LightShadowData.x;
  } else {
    tmpvar_16 = 1.0;
  };
  atten_5 = (atten_5 * tmpvar_16);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_9;
  lowp vec4 tmpvar_18;
  highp vec3 P_19;
  P_19 = (_LightMatrix0 * tmpvar_17).xyz;
  tmpvar_18 = textureCube (_LightTexture0, P_19);
  atten_5 = (atten_5 * tmpvar_18.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_22;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_25;
  viewDir_25 = -(tmpvar_24);
  mediump vec3 tmpvar_26;
  mediump vec3 inVec_27;
  inVec_27 = (lightDir_6 + viewDir_25);
  tmpvar_26 = (inVec_27 * inversesqrt(max (0.001, 
    dot (inVec_27, inVec_27)
  )));
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (lightDir_6, tmpvar_26));
  mediump float tmpvar_29;
  tmpvar_29 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = max ((10.0 / log2(
    (((1.0 - tmpvar_29) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_30 = (tmpvar_31 * tmpvar_31);
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_30 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_23, tmpvar_26)), tmpvar_30)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_28 * tmpvar_28)
       * gbuffer1_2.w) + (tmpvar_29 * tmpvar_29))) * tmpvar_28)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_23, lightDir_6)));
  gl_FragData[0] = tmpvar_32;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4326
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4327
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4328
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4329
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4330
    //MOV
    gl_Position = t0;
    //Instruction 4331
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4332
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4333
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4334
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4335
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4336
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4337
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4338
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4339
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4340
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4341
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4342
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
highp vec2 t1;
mediump float t16_1;
highp vec3 t2;
mediump vec2 t16_2;
lowp vec3 t10_2;
highp vec4 t3;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec4 t16_5;
mediump vec3 t16_6;
highp float t7;
mediump float t16_7;
bool tb7;
lowp vec3 t10_9;
mediump vec3 t16_12;
highp float t14;
lowp float t10_14;
highp float t15;
mediump float t16_19;
highp float t21;
mediump float t16_21;
highp float t22;
mediump float t16_26;
void main()
{
    //Instruction 4250
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4251
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4252
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4253
    //SAMPLE
    t21 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4254
    //MAD
    t21 = _ZBufferParams.x * t21 + _ZBufferParams.y;
    //Instruction 4255
    //DIV
    t21 = float(1.0) / t21;
    //Instruction 4256
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 4257
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4258
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4259
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4260
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4261
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4262
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 4263
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 4264
    //ADD
    t3.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4265
    //DP3
    t15 = dot(t3.xyz, t3.xyz);
    //Instruction 4266
    //RSQ
    t22 = inversesqrt(t15);
    //Instruction 4267
    //MUL
    t4.xyz = vec3(t22) * t3.xyz;
    //Instruction 4268
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t3.xyz);
    //Instruction 4269
    //DP4
    t22 = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4270
    //MAD
    t16_5.xyz = (-t2.xyz) * vec3(t21) + (-t4.xyz);
    //Instruction 4271
    //DP3
    t16_26 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4272
    //MAX
    t16_21 = max(t16_26, 0.00100000005);
    //Instruction 4273
    //RSQ
    t16_26 = inversesqrt(t16_21);
    //Instruction 4274
    //MUL
    t16_5.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 4275
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4276
    //MAD
    t16_6.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4277
    //DP3
    t16_26 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 4278
    //RSQ
    t16_26 = inversesqrt(t16_26);
    //Instruction 4279
    //MUL
    t16_6.xyz = vec3(t16_26) * t16_6.xyz;
    //Instruction 4280
    //DP3
    t16_5.w = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 4281
    //DP3
    t16_5.x = dot((-t4.xyz), t16_5.xyz);
    //Instruction 4282
    //DP3
    t16_12.x = dot(t16_6.xyz, (-t4.xyz));
    //Instruction 4283
    //MAX
    t16_21 = max(t16_12.x, 0.0);
    //Instruction 4284
    //MAX
    t16_2.xy = max(t16_5.xw, vec2(0.0, 0.0));
    //Instruction 4285
    //LOG
    t16_5.x = log2(t16_2.y);
    //Instruction 4286
    //SAMPLE
    t10_3 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4287
    //SAMPLE
    t10_9.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4288
    //ADD
    t16_12.x = (-t10_3.w) + 1.0;
    //Instruction 4289
    //ADD
    t16_19 = (-t16_12.x) + 1.0;
    //Instruction 4290
    //MAD
    t16_19 = t16_19 * 0.967999995 + 0.0299999993;
    //Instruction 4291
    //LOG
    t16_19 = log2(t16_19);
    //Instruction 4292
    //DIV
    t16_19 = 10.0 / t16_19;
    //Instruction 4293
    //MAX
    t16_12.y = max(t16_19, -255.936996);
    //Instruction 4294
    //MUL
    t16_12.xz = t16_12.xy * t16_12.xy;
    //Instruction 4295
    //MAD
    t16_19 = t16_12.y * t16_12.y + 1.0;
    //Instruction 4296
    //MUL
    t16_5.x = t16_5.x * t16_12.z;
    //Instruction 4297
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 4298
    //MUL
    t16_5.x = t16_5.x * t16_19;
    //Instruction 4299
    //MUL
    t16_19 = t16_2.x * t16_2.x;
    //Instruction 4300
    //MAD
    t16_12.x = t16_19 * t10_3.w + t16_12.x;
    //Instruction 4301
    //MUL
    t16_12.x = t16_12.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4302
    //MAD
    t16_1 = t16_12.x * t16_2.x + 9.99999975e-05;
    //Instruction 4303
    //DIV
    t16_1 = t16_5.x / t16_1;
    //Instruction 4304
    //MAX
    t16_5.x = max(t16_1, 0.0);
    //Instruction 4305
    //MIN
    t16_5.x = min(t16_5.x, 100.0);
    //Instruction 4306
    //MAD
    t16_5.xyz = t16_5.xxx * t10_3.xyz + t10_9.xyz;
    //Instruction 4307
    //MUL
    t2.xyz = t0.yyy * _LightMatrix0[1].xyz;
    //Instruction 4308
    //MAD
    t2.xyz = _LightMatrix0[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4309
    //MAD
    t0.xyz = _LightMatrix0[2].xyz * t0.zzz + t2.xyz;
    //Instruction 4310
    //ADD
    t0.xyz = t0.xyz + _LightMatrix0[3].xyz;
    //Instruction 4311
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xyz).w;
    //Instruction 4312
    //SQRT
    t7 = sqrt(t15);
    //Instruction 4313
    //MUL
    t14 = t15 * _LightPos.w;
    //Instruction 4314
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 4315
    //MUL
    t7 = t7 * _LightPositionRange.w;
    //Instruction 4316
    //MUL
    t7 = t7 * 0.970000029;
    //Instruction 4317
    //LT
    tb7 = t22<t7;
    //Instruction 4318
    //MOVC
    t16_26 = (tb7) ? _LightShadowData.x : 1.0;
    //Instruction 4319
    //MUL
    t16_7 = t10_14 * t16_26;
    //Instruction 4320
    //MUL
    t16_0 = t10_0 * t16_7;
    //Instruction 4321
    //MUL
    t0.xyz = vec3(t16_0) * _LightColor.xyz;
    //Instruction 4322
    //MUL
    t16_5.xyz = t0.xyz * t16_5.xyz;
    //Instruction 4323
    //MUL
    SV_Target0.xyz = vec3(t16_21) * t16_5.xyz;
    //Instruction 4324
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4325
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_HDR_ON" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = (_LightPos.xyz - tmpvar_9);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_11);
  lightDir_6 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_9;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_LightTexture0, tmpvar_14).w;
  atten_5 = tmpvar_15;
  atten_5 = (atten_5 * float((tmpvar_14.w < 0.0)));
  highp float tmpvar_16;
  tmpvar_16 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  atten_5 = (atten_5 * tmpvar_17.w);
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (((
    mix (tmpvar_8.z, sqrt(dot (tmpvar_10, tmpvar_10)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_9;
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_World2Shadow[0] * tmpvar_20);
  lowp float tmpvar_22;
  highp vec4 shadowVals_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_21.xyz / tmpvar_21.w);
  shadowVals_23.x = texture2D (_ShadowMapTexture, (tmpvar_24.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_23.y = texture2D (_ShadowMapTexture, (tmpvar_24.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_23.z = texture2D (_ShadowMapTexture, (tmpvar_24.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_23.w = texture2D (_ShadowMapTexture, (tmpvar_24.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_25;
  tmpvar_25 = lessThan (shadowVals_23, tmpvar_24.zzzz);
  mediump vec4 tmpvar_26;
  tmpvar_26 = _LightShadowData.xxxx;
  mediump float tmpvar_27;
  if (tmpvar_25.x) {
    tmpvar_27 = tmpvar_26.x;
  } else {
    tmpvar_27 = 1.0;
  };
  mediump float tmpvar_28;
  if (tmpvar_25.y) {
    tmpvar_28 = tmpvar_26.y;
  } else {
    tmpvar_28 = 1.0;
  };
  mediump float tmpvar_29;
  if (tmpvar_25.z) {
    tmpvar_29 = tmpvar_26.z;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  if (tmpvar_25.w) {
    tmpvar_30 = tmpvar_26.w;
  } else {
    tmpvar_30 = 1.0;
  };
  mediump vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_27;
  tmpvar_31.y = tmpvar_28;
  tmpvar_31.z = tmpvar_29;
  tmpvar_31.w = tmpvar_30;
  mediump float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_22 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp ((tmpvar_22 + tmpvar_19), 0.0, 1.0);
  tmpvar_18 = tmpvar_33;
  atten_5 = (atten_5 * tmpvar_18);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_36;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_39;
  viewDir_39 = -(tmpvar_38);
  mediump vec3 tmpvar_40;
  mediump vec3 inVec_41;
  inVec_41 = (lightDir_6 + viewDir_39);
  tmpvar_40 = (inVec_41 * inversesqrt(max (0.001, 
    dot (inVec_41, inVec_41)
  )));
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (lightDir_6, tmpvar_40));
  mediump float tmpvar_43;
  tmpvar_43 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = max ((10.0 / log2(
    (((1.0 - tmpvar_43) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_44 = (tmpvar_45 * tmpvar_45);
  mediump vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_44 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_37, tmpvar_40)), tmpvar_44)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_42 * tmpvar_42)
       * gbuffer1_2.w) + (tmpvar_43 * tmpvar_43))) * tmpvar_42)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_37, lightDir_6)));
  gl_FragData[0] = tmpvar_46;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = (_LightPos.xyz - tmpvar_9);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_11);
  lightDir_6 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_9;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_LightTexture0, tmpvar_14).w;
  atten_5 = tmpvar_15;
  atten_5 = (atten_5 * float((tmpvar_14.w < 0.0)));
  highp float tmpvar_16;
  tmpvar_16 = (dot (tmpvar_11, tmpvar_11) * _LightPos.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  atten_5 = (atten_5 * tmpvar_17.w);
  mediump float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_9;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_World2Shadow[0] * tmpvar_19);
  lowp float tmpvar_21;
  mediump vec4 shadows_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_20.xyz / tmpvar_20.w);
  highp vec3 coord_24;
  coord_24 = (tmpvar_23 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_25;
  tmpvar_25 = shadow2DEXT (_ShadowMapTexture, coord_24);
  shadows_22.x = tmpvar_25;
  highp vec3 coord_26;
  coord_26 = (tmpvar_23 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_27;
  tmpvar_27 = shadow2DEXT (_ShadowMapTexture, coord_26);
  shadows_22.y = tmpvar_27;
  highp vec3 coord_28;
  coord_28 = (tmpvar_23 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_29;
  tmpvar_29 = shadow2DEXT (_ShadowMapTexture, coord_28);
  shadows_22.z = tmpvar_29;
  highp vec3 coord_30;
  coord_30 = (tmpvar_23 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_31;
  tmpvar_31 = shadow2DEXT (_ShadowMapTexture, coord_30);
  shadows_22.w = tmpvar_31;
  shadows_22 = (_LightShadowData.xxxx + (shadows_22 * (1.0 - _LightShadowData.xxxx)));
  mediump float tmpvar_32;
  tmpvar_32 = dot (shadows_22, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp ((tmpvar_21 + clamp (
    ((mix (tmpvar_8.z, sqrt(
      dot (tmpvar_10, tmpvar_10)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_18 = tmpvar_33;
  atten_5 = (atten_5 * tmpvar_18);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_36;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_39;
  viewDir_39 = -(tmpvar_38);
  mediump vec3 tmpvar_40;
  mediump vec3 inVec_41;
  inVec_41 = (lightDir_6 + viewDir_39);
  tmpvar_40 = (inVec_41 * inversesqrt(max (0.001, 
    dot (inVec_41, inVec_41)
  )));
  mediump float tmpvar_42;
  tmpvar_42 = max (0.0, dot (lightDir_6, tmpvar_40));
  mediump float tmpvar_43;
  tmpvar_43 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = max ((10.0 / log2(
    (((1.0 - tmpvar_43) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_44 = (tmpvar_45 * tmpvar_45);
  mediump vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_44 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_37, tmpvar_40)), tmpvar_44)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_42 * tmpvar_42)
       * gbuffer1_2.w) + (tmpvar_43 * tmpvar_43))) * tmpvar_42)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_37, lightDir_6)));
  gl_FragData[0] = tmpvar_46;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3741
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3742
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3743
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3744
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3745
    //MOV
    gl_Position = t0;
    //Instruction 3746
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3747
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3748
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3749
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3750
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3751
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3752
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3753
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3754
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3755
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3756
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3757
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump float t16_1;
highp vec2 t2;
lowp vec3 t10_2;
highp vec4 t3;
lowp vec4 t10_3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_5;
highp vec3 t6;
mediump float t16_7;
mediump float t16_8;
highp vec3 t9;
lowp float t10_9;
mediump vec3 t16_15;
mediump float t16_16;
highp float t17;
lowp float t10_17;
mediump float t16_24;
highp float t25;
mediump float t16_25;
bool tb25;
mediump float t16_26;
mediump float t16_27;
void main()
{
    //Instruction 3643
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3644
    //DIV
    t1.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3645
    //MUL
    t1.xyz = t1.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3646
    //DIV
    t2.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3647
    //SAMPLE
    t25 = texture(_CameraDepthTexture, t2.xy).x;
    //Instruction 3648
    //MAD
    t25 = _ZBufferParams.x * t25 + _ZBufferParams.y;
    //Instruction 3649
    //DIV
    t25 = float(1.0) / t25;
    //Instruction 3650
    //MUL
    t3.xyz = vec3(t25) * t1.xyz;
    //Instruction 3651
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 3652
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 3653
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 3654
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 3655
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 3656
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 3657
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 3658
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 3659
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 3660
    //ADD
    t5.xyz = t4.xyz + _ShadowOffsets[0].xyz;
    //Instruction 3661
    //SAMPLE_C_LZ
    vec3 txVec13 = vec3(t5.xy,t5.z);
    t5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    //Instruction 3662
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[1].xyz;
    //Instruction 3663
    //SAMPLE_C_LZ
    vec3 txVec14 = vec3(t6.xy,t6.z);
    t5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    //Instruction 3664
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[2].xyz;
    //Instruction 3665
    //ADD
    t4.xyz = t4.xyz + _ShadowOffsets[3].xyz;
    //Instruction 3666
    //SAMPLE_C_LZ
    vec3 txVec15 = vec3(t4.xy,t4.z);
    t5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    //Instruction 3667
    //SAMPLE_C_LZ
    vec3 txVec16 = vec3(t6.xy,t6.z);
    t5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    //Instruction 3668
    //MAD
    t16_0 = t5 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 3669
    //DP4
    t16_1 = dot(t16_0, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 3670
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3671
    //DP3
    t9.x = dot(t4.xyz, t4.xyz);
    //Instruction 3672
    //SQRT
    t9.x = sqrt(t9.x);
    //Instruction 3673
    //MAD
    t9.x = (-t1.z) * t25 + t9.x;
    //Instruction 3674
    //MAD
    t9.x = unity_ShadowFadeCenterAndType.w * t9.x + t3.z;
    //Instruction 3675
    //MAD
    t9.x = t9.x * _LightShadowData.z + _LightShadowData.w;
    t9.x = clamp(t9.x, 0.0, 1.0);
    //Instruction 3676
    //ADD
    t1.x = t9.x + t16_1;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 3677
    //MUL
    t9.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 3678
    //MAD
    t9.xyz = _LightMatrix0[0].xyw * t3.xxx + t9.xyz;
    //Instruction 3679
    //MAD
    t9.xyz = _LightMatrix0[2].xyw * t3.www + t9.xyz;
    //Instruction 3680
    //ADD
    t9.xyz = t9.xyz + _LightMatrix0[3].xyw;
    //Instruction 3681
    //DIV
    t9.xy = t9.xy / t9.zz;
    //Instruction 3682
    //LT
    tb25 = t9.z<0.0;
    //Instruction 3683
    //AND
    t25 = tb25 ? 1.0 : float(0.0);
    //Instruction 3684
    //SAMPLE
    t10_9 = texture(_LightTexture0, t9.xy).w;
    //Instruction 3685
    //MUL
    t9.x = t25 * t10_9;
    //Instruction 3686
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 3687
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3688
    //DP3
    t17 = dot(t4.xyz, t4.xyz);
    //Instruction 3689
    //MUL
    t25 = t17 * _LightPos.w;
    //Instruction 3690
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 3691
    //MUL
    t4.xyz = vec3(t17) * t4.xyz;
    //Instruction 3692
    //SAMPLE
    t10_17 = texture(_LightTextureB0, vec2(t25)).w;
    //Instruction 3693
    //MUL
    t9.x = t10_17 * t9.x;
    //Instruction 3694
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 3695
    //MUL
    t1.xyz = t1.xxx * _LightColor.xyz;
    //Instruction 3696
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 3697
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 3698
    //MAD
    t16_0.xyz = (-t3.xyz) * vec3(t25) + t4.xyz;
    //Instruction 3699
    //DP3
    t16_24 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 3700
    //MAX
    t16_25 = max(t16_24, 0.00100000005);
    //Instruction 3701
    //RSQ
    t16_24 = inversesqrt(t16_25);
    //Instruction 3702
    //MUL
    t16_0.xyz = vec3(t16_24) * t16_0.xyz;
    //Instruction 3703
    //DP3
    t16_24 = dot(t4.xyz, t16_0.xyz);
    //Instruction 3704
    //MAX
    t16_25 = max(t16_24, 0.0);
    //Instruction 3705
    //MUL
    t16_24 = t16_25 * t16_25;
    //Instruction 3706
    //SAMPLE
    t10_3 = texture(_CameraGBufferTexture1, t2.xy);
    //Instruction 3707
    //ADD
    t16_7 = (-t10_3.w) + 1.0;
    //Instruction 3708
    //MUL
    t16_15.x = t16_7 * t16_7;
    //Instruction 3709
    //ADD
    t16_7 = (-t16_7) + 1.0;
    //Instruction 3710
    //MAD
    t16_7 = t16_7 * 0.967999995 + 0.0299999993;
    //Instruction 3711
    //LOG
    t16_7 = log2(t16_7);
    //Instruction 3712
    //DIV
    t16_7 = 10.0 / t16_7;
    //Instruction 3713
    //MAX
    t16_7 = max(t16_7, -255.936996);
    //Instruction 3714
    //MAD
    t16_24 = t16_24 * t10_3.w + t16_15.x;
    //Instruction 3715
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 3716
    //MAD
    t16_25 = t16_24 * t16_25 + 9.99999975e-05;
    //Instruction 3717
    //SAMPLE
    t10_5.xyz = texture(_CameraGBufferTexture2, t2.xy).xyz;
    //Instruction 3718
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture0, t2.xy).xyz;
    //Instruction 3719
    //MAD
    t16_15.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3720
    //DP3
    t16_24 = dot(t16_15.xyz, t16_15.xyz);
    //Instruction 3721
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 3722
    //MUL
    t16_15.xyz = vec3(t16_24) * t16_15.xyz;
    //Instruction 3723
    //DP3
    t16_0.x = dot(t16_15.xyz, t16_0.xyz);
    //Instruction 3724
    //DP3
    t16_8 = dot(t16_15.xyz, t4.xyz);
    //Instruction 3725
    //MAX
    t16_26 = max(t16_8, 0.0);
    //Instruction 3726
    //MAX
    t16_27 = max(t16_0.x, 0.0);
    //Instruction 3727
    //LOG
    t16_0.x = log2(t16_27);
    //Instruction 3728
    //MUL
    t16_8 = t16_7 * t16_7;
    //Instruction 3729
    //MAD
    t16_16 = t16_7 * t16_7 + 1.0;
    //Instruction 3730
    //MUL
    t16_0.x = t16_0.x * t16_8;
    //Instruction 3731
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 3732
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 3733
    //DIV
    t16_25 = t16_0.x / t16_25;
    //Instruction 3734
    //MAX
    t16_0.x = max(t16_25, 0.0);
    //Instruction 3735
    //MIN
    t16_0.x = min(t16_0.x, 100.0);
    //Instruction 3736
    //MAD
    t16_0.xyz = t16_0.xxx * t10_3.xyz + t10_2.xyz;
    //Instruction 3737
    //MUL
    t16_0.xyz = t1.xyz * t16_0.xyz;
    //Instruction 3738
    //MUL
    SV_Target0.xyz = vec3(t16_26) * t16_0.xyz;
    //Instruction 3739
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3740
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _LightPos.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(normalize(tmpvar_10));
  lightDir_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = (dot (tmpvar_10, tmpvar_10) * _LightPos.w);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12)).w;
  atten_5 = tmpvar_13;
  highp vec4 shadowVals_14;
  highp float mydist_15;
  mydist_15 = ((sqrt(
    dot (tmpvar_10, tmpvar_10)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_14.x = dot (textureCube (_ShadowMapTexture, (tmpvar_10 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_14.y = dot (textureCube (_ShadowMapTexture, (tmpvar_10 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_14.z = dot (textureCube (_ShadowMapTexture, (tmpvar_10 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_14.w = dot (textureCube (_ShadowMapTexture, (tmpvar_10 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_16;
  tmpvar_16 = lessThan (shadowVals_14, vec4(mydist_15));
  mediump vec4 tmpvar_17;
  tmpvar_17 = _LightShadowData.xxxx;
  mediump float tmpvar_18;
  if (tmpvar_16.x) {
    tmpvar_18 = tmpvar_17.x;
  } else {
    tmpvar_18 = 1.0;
  };
  mediump float tmpvar_19;
  if (tmpvar_16.y) {
    tmpvar_19 = tmpvar_17.y;
  } else {
    tmpvar_19 = 1.0;
  };
  mediump float tmpvar_20;
  if (tmpvar_16.z) {
    tmpvar_20 = tmpvar_17.z;
  } else {
    tmpvar_20 = 1.0;
  };
  mediump float tmpvar_21;
  if (tmpvar_16.w) {
    tmpvar_21 = tmpvar_17.w;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22.x = tmpvar_18;
  tmpvar_22.y = tmpvar_19;
  tmpvar_22.z = tmpvar_20;
  tmpvar_22.w = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_22, vec4(0.25, 0.25, 0.25, 0.25));
  atten_5 = (atten_5 * tmpvar_23);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_26;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_27;
  tmpvar_27 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_29;
  viewDir_29 = -(tmpvar_28);
  mediump vec3 tmpvar_30;
  mediump vec3 inVec_31;
  inVec_31 = (lightDir_6 + viewDir_29);
  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
    dot (inVec_31, inVec_31)
  )));
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (lightDir_6, tmpvar_30));
  mediump float tmpvar_33;
  tmpvar_33 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = max ((10.0 / log2(
    (((1.0 - tmpvar_33) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_34 = (tmpvar_35 * tmpvar_35);
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_34 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_27, tmpvar_30)), tmpvar_34)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_32 * tmpvar_32)
       * gbuffer1_2.w) + (tmpvar_33 * tmpvar_33))) * tmpvar_32)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_27, lightDir_6)));
  gl_FragData[0] = tmpvar_36;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4868
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4869
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4870
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4871
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4872
    //MOV
    gl_Position = t0;
    //Instruction 4873
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4874
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4875
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4876
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4877
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4878
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4879
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4880
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4881
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4882
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4883
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4884
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump float t16_1;
bvec4 tb1;
highp vec4 t2;
mediump float t16_2;
lowp vec4 t10_2;
highp vec4 t3;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
lowp float t10_6;
mediump vec3 t16_10;
highp float t13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
highp float t19;
mediump float t16_19;
mediump float t16_22;
void main()
{
    //Instruction 4786
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4787
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4788
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4789
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4790
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 4791
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 4792
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 4793
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 4794
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4795
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 4796
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 4797
    //ADD
    t2.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4798
    //ADD
    t0.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 4799
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 4800
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 4801
    //DP3
    t13 = dot(t0.xyz, t0.xyz);
    //Instruction 4802
    //RSQ
    t19 = inversesqrt(t13);
    //Instruction 4803
    //MUL
    t3.xyz = t0.xyz * vec3(t19);
    //Instruction 4804
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + (-t3.xyz);
    //Instruction 4805
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4806
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 4807
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 4808
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 4809
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4810
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4811
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4812
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4813
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4814
    //DP3
    t16_22 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 4815
    //DP3
    t16_4.x = dot((-t3.xyz), t16_4.xyz);
    //Instruction 4816
    //DP3
    t16_10.x = dot(t16_5.xyz, (-t3.xyz));
    //Instruction 4817
    //MAX
    t16_18 = max(t16_10.x, 0.0);
    //Instruction 4818
    //MAX
    t16_19 = max(t16_4.x, 0.0);
    //Instruction 4819
    //MAX
    t16_2 = max(t16_22, 0.0);
    //Instruction 4820
    //LOG
    t16_4.x = log2(t16_2);
    //Instruction 4821
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4822
    //SAMPLE
    t10_3.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4823
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 4824
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 4825
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 4826
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 4827
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 4828
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 4829
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 4830
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 4831
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 4832
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 4833
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 4834
    //MUL
    t16_16 = t16_19 * t16_19;
    //Instruction 4835
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 4836
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4837
    //MAD
    t16_1 = t16_10.x * t16_19 + 9.99999975e-05;
    //Instruction 4838
    //DIV
    t16_1 = t16_4.x / t16_1;
    //Instruction 4839
    //MAX
    t16_4.x = max(t16_1, 0.0);
    //Instruction 4840
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 4841
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_3.xyz;
    //Instruction 4842
    //ADD
    t1.xyw = t0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 4843
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t1.xyw);
    //Instruction 4844
    //DP4
    t2.x = dot(t2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4845
    //ADD
    t1.xyw = t0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 4846
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t1.xyw);
    //Instruction 4847
    //DP4
    t2.y = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4848
    //ADD
    t1.xyw = t0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 4849
    //ADD
    t0.xyz = t0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 4850
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t0.xyz);
    //Instruction 4851
    //DP4
    t2.w = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4852
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t1.xyw);
    //Instruction 4853
    //DP4
    t2.z = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4854
    //SQRT
    t0.x = sqrt(t13);
    //Instruction 4855
    //MUL
    t6 = t13 * _LightPos.w;
    //Instruction 4856
    //SAMPLE
    t10_6 = texture(_LightTextureB0, vec2(t6)).w;
    //Instruction 4857
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 4858
    //MUL
    t0.x = t0.x * 0.970000029;
    //Instruction 4859
    //LT
    tb1 = lessThan(t2, t0.xxxx);
    //Instruction 4860
    //MOVC
    t1.x = (tb1.x) ? _LightShadowData.x : float(1.0);
    t1.y = (tb1.y) ? _LightShadowData.x : float(1.0);
    t1.z = (tb1.z) ? _LightShadowData.x : float(1.0);
    t1.w = (tb1.w) ? _LightShadowData.x : float(1.0);
    //Instruction 4861
    //DP4
    t16_22 = dot(t1, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 4862
    //MUL
    t16_0 = t10_6 * t16_22;
    //Instruction 4863
    //MUL
    t0.xyz = vec3(t16_0) * _LightColor.xyz;
    //Instruction 4864
    //MUL
    t16_4.xyz = t0.xyz * t16_4.xyz;
    //Instruction 4865
    //MUL
    SV_Target0.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 4866
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4867
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _LightPos.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(normalize(tmpvar_10));
  lightDir_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = (dot (tmpvar_10, tmpvar_10) * _LightPos.w);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12)).w;
  atten_5 = tmpvar_13;
  highp vec4 shadowVals_14;
  highp float mydist_15;
  mydist_15 = ((sqrt(
    dot (tmpvar_10, tmpvar_10)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_14.x = dot (textureCube (_ShadowMapTexture, (tmpvar_10 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_14.y = dot (textureCube (_ShadowMapTexture, (tmpvar_10 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_14.z = dot (textureCube (_ShadowMapTexture, (tmpvar_10 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_14.w = dot (textureCube (_ShadowMapTexture, (tmpvar_10 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_16;
  tmpvar_16 = lessThan (shadowVals_14, vec4(mydist_15));
  mediump vec4 tmpvar_17;
  tmpvar_17 = _LightShadowData.xxxx;
  mediump float tmpvar_18;
  if (tmpvar_16.x) {
    tmpvar_18 = tmpvar_17.x;
  } else {
    tmpvar_18 = 1.0;
  };
  mediump float tmpvar_19;
  if (tmpvar_16.y) {
    tmpvar_19 = tmpvar_17.y;
  } else {
    tmpvar_19 = 1.0;
  };
  mediump float tmpvar_20;
  if (tmpvar_16.z) {
    tmpvar_20 = tmpvar_17.z;
  } else {
    tmpvar_20 = 1.0;
  };
  mediump float tmpvar_21;
  if (tmpvar_16.w) {
    tmpvar_21 = tmpvar_17.w;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump vec4 tmpvar_22;
  tmpvar_22.x = tmpvar_18;
  tmpvar_22.y = tmpvar_19;
  tmpvar_22.z = tmpvar_20;
  tmpvar_22.w = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_22, vec4(0.25, 0.25, 0.25, 0.25));
  atten_5 = (atten_5 * tmpvar_23);
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_9;
  lowp vec4 tmpvar_25;
  highp vec3 P_26;
  P_26 = (_LightMatrix0 * tmpvar_24).xyz;
  tmpvar_25 = textureCube (_LightTexture0, P_26);
  atten_5 = (atten_5 * tmpvar_25.w);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_29;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_30;
  tmpvar_30 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_32;
  viewDir_32 = -(tmpvar_31);
  mediump vec3 tmpvar_33;
  mediump vec3 inVec_34;
  inVec_34 = (lightDir_6 + viewDir_32);
  tmpvar_33 = (inVec_34 * inversesqrt(max (0.001, 
    dot (inVec_34, inVec_34)
  )));
  mediump float tmpvar_35;
  tmpvar_35 = max (0.0, dot (lightDir_6, tmpvar_33));
  mediump float tmpvar_36;
  tmpvar_36 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = max ((10.0 / log2(
    (((1.0 - tmpvar_36) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_37 = (tmpvar_38 * tmpvar_38);
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_37 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_30, tmpvar_33)), tmpvar_37)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_35 * tmpvar_35)
       * gbuffer1_2.w) + (tmpvar_36 * tmpvar_36))) * tmpvar_35)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_30, lightDir_6)));
  gl_FragData[0] = tmpvar_39;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3846
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3847
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3848
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3849
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3850
    //MOV
    gl_Position = t0;
    //Instruction 3851
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3852
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3853
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3854
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3855
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3856
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3857
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3858
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3859
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3860
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3861
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3862
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
highp vec2 t1;
lowp vec3 t10_1;
highp vec3 t2;
highp vec4 t3;
bvec4 tb3;
highp vec4 t4;
lowp vec4 t10_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec2 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
mediump vec3 t16_13;
highp float t15;
lowp float t10_15;
mediump float t16_19;
highp float t21;
mediump float t16_21;
lowp float t10_21;
mediump float t16_26;
void main()
{
    //Instruction 3758
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3759
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3760
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3761
    //SAMPLE
    t21 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3762
    //MAD
    t21 = _ZBufferParams.x * t21 + _ZBufferParams.y;
    //Instruction 3763
    //DIV
    t21 = float(1.0) / t21;
    //Instruction 3764
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 3765
    //MUL
    t2.xyz = t0.yyy * _CameraToWorld[1].xyz;
    //Instruction 3766
    //MAD
    t0.xyw = _CameraToWorld[0].xyz * t0.xxx + t2.xyz;
    //Instruction 3767
    //MAD
    t0.xyz = _CameraToWorld[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3768
    //ADD
    t0.xyz = t0.xyz + _CameraToWorld[3].xyz;
    //Instruction 3769
    //ADD
    t2.xyz = t0.xyz + (-_LightPos.xyz);
    //Instruction 3770
    //ADD
    t3.xyz = t2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 3771
    //SAMPLE
    t3 = texture(_ShadowMapTexture, t3.xyz);
    //Instruction 3772
    //DP4
    t3.x = dot(t3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3773
    //ADD
    t4.xyz = t2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 3774
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 3775
    //DP4
    t3.y = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3776
    //ADD
    t4.xyz = t2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 3777
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 3778
    //DP4
    t3.z = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3779
    //ADD
    t4.xyz = t2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 3780
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 3781
    //DP4
    t3.w = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3782
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 3783
    //SQRT
    t15 = sqrt(t21);
    //Instruction 3784
    //MUL
    t15 = t15 * _LightPositionRange.w;
    //Instruction 3785
    //MUL
    t15 = t15 * 0.970000029;
    //Instruction 3786
    //LT
    tb3 = lessThan(t3, vec4(t15));
    //Instruction 3787
    //MOVC
    t3.x = (tb3.x) ? _LightShadowData.x : float(1.0);
    t3.y = (tb3.y) ? _LightShadowData.x : float(1.0);
    t3.z = (tb3.z) ? _LightShadowData.x : float(1.0);
    t3.w = (tb3.w) ? _LightShadowData.x : float(1.0);
    //Instruction 3788
    //DP4
    t16_5.x = dot(t3, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 3789
    //MUL
    t15 = t21 * _LightPos.w;
    //Instruction 3790
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3791
    //MUL
    t2.xyz = vec3(t21) * t2.xyz;
    //Instruction 3792
    //SAMPLE
    t10_21 = texture(_LightTextureB0, vec2(t15)).w;
    //Instruction 3793
    //MUL
    t16_21 = t16_5.x * t10_21;
    //Instruction 3794
    //MUL
    t3.xyz = t0.yyy * _LightMatrix0[1].xyz;
    //Instruction 3795
    //MAD
    t3.xyz = _LightMatrix0[0].xyz * t0.xxx + t3.xyz;
    //Instruction 3796
    //MAD
    t3.xyz = _LightMatrix0[2].xyz * t0.zzz + t3.xyz;
    //Instruction 3797
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3798
    //ADD
    t3.xyz = t3.xyz + _LightMatrix0[3].xyz;
    //Instruction 3799
    //SAMPLE
    t10_15 = texture(_LightTexture0, t3.xyz).w;
    //Instruction 3800
    //MUL
    t16_21 = t16_21 * t10_15;
    //Instruction 3801
    //MUL
    t3.xyz = vec3(t16_21) * _LightColor.xyz;
    //Instruction 3802
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 3803
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3804
    //MAD
    t16_5.xyz = (-t0.xyz) * vec3(t21) + (-t2.xyz);
    //Instruction 3805
    //DP3
    t16_26 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3806
    //MAX
    t16_0 = max(t16_26, 0.00100000005);
    //Instruction 3807
    //RSQ
    t16_26 = inversesqrt(t16_0);
    //Instruction 3808
    //MUL
    t16_5.xyz = vec3(t16_26) * t16_5.xyz;
    //Instruction 3809
    //DP3
    t16_26 = dot((-t2.xyz), t16_5.xyz);
    //Instruction 3810
    //MAX
    t16_0 = max(t16_26, 0.0);
    //Instruction 3811
    //MUL
    t16_26 = t16_0 * t16_0;
    //Instruction 3812
    //SAMPLE
    t10_4 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 3813
    //ADD
    t16_6 = (-t10_4.w) + 1.0;
    //Instruction 3814
    //MUL
    t16_13.x = t16_6 * t16_6;
    //Instruction 3815
    //ADD
    t16_6 = (-t16_6) + 1.0;
    //Instruction 3816
    //MAD
    t16_6 = t16_6 * 0.967999995 + 0.0299999993;
    //Instruction 3817
    //LOG
    t16_6 = log2(t16_6);
    //Instruction 3818
    //DIV
    t16_6 = 10.0 / t16_6;
    //Instruction 3819
    //MAX
    t16_6 = max(t16_6, -255.936996);
    //Instruction 3820
    //MAD
    t16_26 = t16_26 * t10_4.w + t16_13.x;
    //Instruction 3821
    //MUL
    t16_26 = t16_26 * unity_LightGammaCorrectionConsts.z;
    //Instruction 3822
    //MAD
    t16_0 = t16_26 * t16_0 + 9.99999975e-05;
    //Instruction 3823
    //SAMPLE
    t10_7.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 3824
    //SAMPLE
    t10_1.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 3825
    //MAD
    t16_13.xyz = t10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3826
    //DP3
    t16_26 = dot(t16_13.xyz, t16_13.xyz);
    //Instruction 3827
    //RSQ
    t16_26 = inversesqrt(t16_26);
    //Instruction 3828
    //MUL
    t16_13.xyz = vec3(t16_26) * t16_13.xyz;
    //Instruction 3829
    //DP3
    t16_5.x = dot(t16_13.xyz, t16_5.xyz);
    //Instruction 3830
    //DP3
    t16_5.y = dot(t16_13.xyz, (-t2.xyz));
    //Instruction 3831
    //MAX
    t16_7.xy = max(t16_5.yx, vec2(0.0, 0.0));
    //Instruction 3832
    //LOG
    t16_5.x = log2(t16_7.y);
    //Instruction 3833
    //MUL
    t16_12 = t16_6 * t16_6;
    //Instruction 3834
    //MAD
    t16_19 = t16_6 * t16_6 + 1.0;
    //Instruction 3835
    //MUL
    t16_5.x = t16_5.x * t16_12;
    //Instruction 3836
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 3837
    //MUL
    t16_5.x = t16_5.x * t16_19;
    //Instruction 3838
    //DIV
    t16_0 = t16_5.x / t16_0;
    //Instruction 3839
    //MAX
    t16_5.x = max(t16_0, 0.0);
    //Instruction 3840
    //MIN
    t16_5.x = min(t16_5.x, 100.0);
    //Instruction 3841
    //MAD
    t16_5.xyz = t16_5.xxx * t10_4.xyz + t10_1.xyz;
    //Instruction 3842
    //MUL
    t16_5.xyz = t3.xyz * t16_5.xyz;
    //Instruction 3843
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_5.xyz;
    //Instruction 3844
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3845
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ShadowMapTexture, tmpvar_7);
  highp float tmpvar_14;
  tmpvar_14 = clamp ((tmpvar_13.x + clamp (
    ((mix (tmpvar_8.z, sqrt(
      dot (tmpvar_10, tmpvar_10)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_12 = tmpvar_14;
  atten_5 = tmpvar_12;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_17;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_20;
  viewDir_20 = -(tmpvar_19);
  mediump vec3 tmpvar_21;
  mediump vec3 inVec_22;
  inVec_22 = (lightDir_6 + viewDir_20);
  tmpvar_21 = (inVec_22 * inversesqrt(max (0.001, 
    dot (inVec_22, inVec_22)
  )));
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (lightDir_6, tmpvar_21));
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max ((10.0 / log2(
    (((1.0 - tmpvar_24) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_25 = (tmpvar_26 * tmpvar_26);
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_25 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_18, tmpvar_21)), tmpvar_25)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_23 * tmpvar_23)
       * gbuffer1_2.w) + (tmpvar_24 * tmpvar_24))) * tmpvar_23)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_18, lightDir_6)));
  gl_FragData[0] = tmpvar_27;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4949
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4950
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4951
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4952
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4953
    //MOV
    gl_Position = t0;
    //Instruction 4954
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4955
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4956
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4957
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4958
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4959
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4960
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4961
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4962
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4963
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4964
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4965
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
highp vec2 t1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec3 t3;
lowp vec3 t10_3;
mediump vec4 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump float t16_6;
lowp vec3 t10_6;
mediump vec3 t16_10;
mediump vec2 t16_12;
mediump float t16_16;
highp float t18;
mediump float t16_22;
void main()
{
    //Instruction 4885
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4886
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4887
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4888
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4889
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 4890
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 4891
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 4892
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 4893
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 4894
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 4895
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 4896
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4897
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4898
    //DP3
    t0.x = dot(t2.xyw, t2.xyw);
    //Instruction 4899
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 4900
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 4901
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 4902
    //MAD
    t0.x = t0.x * _LightShadowData.z + _LightShadowData.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4903
    //DP3
    t6 = dot(t3.xyz, t3.xyz);
    //Instruction 4904
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 4905
    //MAD
    t16_4.xyz = (-t3.xyz) * vec3(t6) + (-_LightDir.xyz);
    //Instruction 4906
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 4907
    //MAX
    t16_6 = max(t16_22, 0.00100000005);
    //Instruction 4908
    //RSQ
    t16_22 = inversesqrt(t16_6);
    //Instruction 4909
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 4910
    //SAMPLE
    t10_6.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 4911
    //MAD
    t16_5.xyz = t10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4912
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4913
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 4914
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 4915
    //DP3
    t16_4.w = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 4916
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 4917
    //MAX
    t16_6 = max(t16_4.x, 0.0);
    //Instruction 4918
    //DP3
    t16_4.x = dot(t16_5.xyz, (-_LightDir.xyz));
    //Instruction 4919
    //MAX
    t16_12.xy = max(t16_4.xw, vec2(0.0, 0.0));
    //Instruction 4920
    //LOG
    t16_4.x = log2(t16_12.y);
    //Instruction 4921
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 4922
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 4923
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 4924
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 4925
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 4926
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 4927
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 4928
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 4929
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 4930
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 4931
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 4932
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 4933
    //MUL
    t16_16 = t16_6 * t16_6;
    //Instruction 4934
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 4935
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 4936
    //MAD
    t16_6 = t16_10.x * t16_6 + 9.99999975e-05;
    //Instruction 4937
    //DIV
    t16_6 = t16_4.x / t16_6;
    //Instruction 4938
    //MAX
    t16_4.x = max(t16_6, 0.0);
    //Instruction 4939
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 4940
    //SAMPLE
    t10_3.xyz = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 4941
    //SAMPLE
    t10_6.x = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 4942
    //ADD
    t0.x = t0.x + t10_6.x;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4943
    //MUL
    t0.xyw = t0.xxx * _LightColor.xyz;
    //Instruction 4944
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_3.xyz;
    //Instruction 4945
    //MUL
    t16_4.xyz = t0.xyw * t16_4.xyz;
    //Instruction 4946
    //MUL
    SV_Target0.xyz = t16_12.xxx * t16_4.xyz;
    //Instruction 4947
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4948
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform mediump vec4 unity_LightGammaCorrectionConsts;
uniform sampler2D _CameraGBufferTexture0;
uniform sampler2D _CameraGBufferTexture1;
uniform sampler2D _CameraGBufferTexture2;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 gbuffer2_1;
  mediump vec4 gbuffer1_2;
  mediump vec4 gbuffer0_3;
  mediump vec3 tmpvar_4;
  highp float atten_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ShadowMapTexture, tmpvar_7);
  highp float tmpvar_14;
  tmpvar_14 = clamp ((tmpvar_13.x + clamp (
    ((mix (tmpvar_8.z, sqrt(
      dot (tmpvar_10, tmpvar_10)
    ), unity_ShadowFadeCenterAndType.w) * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_12 = tmpvar_14;
  atten_5 = tmpvar_12;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_9;
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = (_LightMatrix0 * tmpvar_15).xy;
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  atten_5 = (atten_5 * tmpvar_16.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_CameraGBufferTexture0, tmpvar_7);
  gbuffer0_3 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraGBufferTexture1, tmpvar_7);
  gbuffer1_2 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraGBufferTexture2, tmpvar_7);
  gbuffer2_1 = tmpvar_20;
  tmpvar_4 = (_LightColor.xyz * atten_5);
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((gbuffer2_1.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
  mediump vec3 viewDir_23;
  viewDir_23 = -(tmpvar_22);
  mediump vec3 tmpvar_24;
  mediump vec3 inVec_25;
  inVec_25 = (lightDir_6 + viewDir_23);
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (lightDir_6, tmpvar_24));
  mediump float tmpvar_27;
  tmpvar_27 = (1.0 - gbuffer1_2.w);
  mediump float tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = max ((10.0 / log2(
    (((1.0 - tmpvar_27) * 0.968) + 0.03)
  )), -255.937);
  tmpvar_28 = (tmpvar_29 * tmpvar_29);
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = (((gbuffer0_3.xyz + 
    (clamp (((
      (tmpvar_28 + 1.0)
     * 
      pow (max (0.0, dot (tmpvar_21, tmpvar_24)), tmpvar_28)
    ) / (
      ((unity_LightGammaCorrectionConsts.z * ((
        (tmpvar_26 * tmpvar_26)
       * gbuffer1_2.w) + (tmpvar_27 * tmpvar_27))) * tmpvar_26)
     + 0.0001)), 0.0, 100.0) * gbuffer1_2.xyz)
  ) * tmpvar_4) * max (0.0, dot (tmpvar_21, lightDir_6)));
  gl_FragData[0] = tmpvar_30;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3933
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3934
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3935
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3936
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3937
    //MOV
    gl_Position = t0;
    //Instruction 3938
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3939
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3940
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3941
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3942
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3943
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3944
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3945
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3946
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3947
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3948
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3949
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraGBufferTexture0;
uniform lowp sampler2D _CameraGBufferTexture1;
uniform lowp sampler2D _CameraGBufferTexture2;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec3 t0;
highp vec2 t1;
lowp vec4 t10_1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec4 t16_4;
mediump vec3 t16_5;
highp vec2 t6;
lowp float t10_6;
mediump vec3 t16_10;
mediump vec2 t16_13;
mediump float t16_16;
highp float t18;
mediump float t16_18;
mediump float t16_22;
void main()
{
    //Instruction 3863
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3864
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3865
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3866
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3867
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3868
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3869
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 3870
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3871
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3872
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3873
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3874
    //ADD
    t3.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3875
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3876
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3877
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 3878
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3879
    //MAD
    t0.x = t0.x * _LightShadowData.z + _LightShadowData.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3880
    //SAMPLE
    t10_6 = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 3881
    //ADD
    t0.x = t0.x + t10_6;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3882
    //MUL
    t6.xy = t2.yy * _LightMatrix0[1].xy;
    //Instruction 3883
    //MAD
    t6.xy = _LightMatrix0[0].xy * t2.xx + t6.xy;
    //Instruction 3884
    //MAD
    t6.xy = _LightMatrix0[2].xy * t2.ww + t6.xy;
    //Instruction 3885
    //ADD
    t2.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3886
    //ADD
    t6.xy = t6.xy + _LightMatrix0[3].xy;
    //Instruction 3887
    //SAMPLE
    t10_6 = texture(_LightTexture0, t6.xy).w;
    //Instruction 3888
    //MUL
    t0.x = t10_6 * t0.x;
    //Instruction 3889
    //MUL
    t0.xyz = t0.xxx * _LightColor.xyz;
    //Instruction 3890
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3891
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3892
    //MAD
    t16_4.xyz = (-t2.xyz) * vec3(t18) + (-_LightDir.xyz);
    //Instruction 3893
    //DP3
    t16_22 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3894
    //MAX
    t16_18 = max(t16_22, 0.00100000005);
    //Instruction 3895
    //RSQ
    t16_22 = inversesqrt(t16_18);
    //Instruction 3896
    //MUL
    t16_4.xyz = vec3(t16_22) * t16_4.xyz;
    //Instruction 3897
    //SAMPLE
    t10_2.xyz = texture(_CameraGBufferTexture2, t1.xy).xyz;
    //Instruction 3898
    //MAD
    t16_5.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3899
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3900
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 3901
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 3902
    //DP3
    t16_4.w = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 3903
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3904
    //MAX
    t16_18 = max(t16_4.x, 0.0);
    //Instruction 3905
    //DP3
    t16_4.x = dot(t16_5.xyz, (-_LightDir.xyz));
    //Instruction 3906
    //MAX
    t16_13.xy = max(t16_4.xw, vec2(0.0, 0.0));
    //Instruction 3907
    //LOG
    t16_4.x = log2(t16_13.y);
    //Instruction 3908
    //SAMPLE
    t10_2 = texture(_CameraGBufferTexture1, t1.xy);
    //Instruction 3909
    //SAMPLE
    t10_1.xyw = texture(_CameraGBufferTexture0, t1.xy).xyz;
    //Instruction 3910
    //ADD
    t16_10.x = (-t10_2.w) + 1.0;
    //Instruction 3911
    //ADD
    t16_16 = (-t16_10.x) + 1.0;
    //Instruction 3912
    //MAD
    t16_16 = t16_16 * 0.967999995 + 0.0299999993;
    //Instruction 3913
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 3914
    //DIV
    t16_16 = 10.0 / t16_16;
    //Instruction 3915
    //MAX
    t16_10.y = max(t16_16, -255.936996);
    //Instruction 3916
    //MUL
    t16_10.xz = t16_10.xy * t16_10.xy;
    //Instruction 3917
    //MAD
    t16_16 = t16_10.y * t16_10.y + 1.0;
    //Instruction 3918
    //MUL
    t16_4.x = t16_4.x * t16_10.z;
    //Instruction 3919
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3920
    //MUL
    t16_4.x = t16_4.x * t16_16;
    //Instruction 3921
    //MUL
    t16_16 = t16_18 * t16_18;
    //Instruction 3922
    //MAD
    t16_10.x = t16_16 * t10_2.w + t16_10.x;
    //Instruction 3923
    //MUL
    t16_10.x = t16_10.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 3924
    //MAD
    t16_18 = t16_10.x * t16_18 + 9.99999975e-05;
    //Instruction 3925
    //DIV
    t16_18 = t16_4.x / t16_18;
    //Instruction 3926
    //MAX
    t16_4.x = max(t16_18, 0.0);
    //Instruction 3927
    //MIN
    t16_4.x = min(t16_4.x, 100.0);
    //Instruction 3928
    //MAD
    t16_4.xyz = t16_4.xxx * t10_2.xyz + t10_1.xyw;
    //Instruction 3929
    //MUL
    t16_4.xyz = t0.xyz * t16_4.xyz;
    //Instruction 3930
    //MUL
    SV_Target0.xyz = t16_13.xxx * t16_4.xyz;
    //Instruction 3931
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3932
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_HDR_ON" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_HDR_ON" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "UNITY_HDR_ON" }
"!!GLES3"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Stencil {
   Ref [_StencilNonBackground]
   ReadMask [_StencilNonBackground]
   CompFront Equal
   CompBack Equal
  }
  GpuProgramID 123303
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = -(log2(texture2D (_LightBuffer, xlv_TEXCOORD0)));
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
highp vec4 t0;
void main()
{
    //Instruction 4740
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4741
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4742
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4743
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4744
    //MOV
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    //Instruction 4745
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform lowp sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
void main()
{
    //Instruction 4736
    //SAMPLE
    t10_0 = texture(_LightBuffer, vs_TEXCOORD0.xy);
    //Instruction 4737
    //LOG
    t16_0 = log2(t10_0);
    //Instruction 4738
    //MOV
    SV_Target0 = (-t16_0);
    //Instruction 4739
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
Fallback Off
}
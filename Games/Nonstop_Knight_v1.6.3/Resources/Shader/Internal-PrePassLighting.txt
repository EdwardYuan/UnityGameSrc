Shader "Hidden/Internal-PrePassLighting" {
Properties {
 _LightTexture0 ("", any) = "" { }
 _LightTextureB0 ("", 2D) = "" { }
 _ShadowMapTexture ("", any) = "" { }
}
SubShader { 
 Pass {
  Tags { "SHADOWSUPPORT"="true" }
  ZWrite Off
  Blend DstColor Zero
  GpuProgramID 57115
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(normalize(tmpvar_12));
  lightDir_7 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTextureB0, vec2(tmpvar_14)).w;
  atten_6 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = pow (max (0.0, dot (h_4, tmpvar_17)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_19;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_17)
  ) * atten_6));
  mediump vec3 c_20;
  c_20 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_20, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_21);
  mediump vec4 tmpvar_22;
  tmpvar_22 = exp2(-(res_2));
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3615
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3616
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3617
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3618
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3619
    //MOV
    gl_Position = t0;
    //Instruction 3620
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3621
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3622
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3623
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3624
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3625
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3626
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3627
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3628
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3629
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3630
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3631
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
highp float t14;
mediump float t16_14;
lowp float t10_14;
highp float t21;
mediump float t16_26;
void main()
{
    //Instruction 3561
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3562
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3563
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3564
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 3565
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3566
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3567
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3568
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 3569
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3570
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3571
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3572
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3573
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3574
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3575
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3576
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3577
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3578
    //DP3
    t14 = dot(t2.xyw, t2.xyw);
    //Instruction 3579
    //SQRT
    t14 = sqrt(t14);
    //Instruction 3580
    //MAD
    t0.x = (-t7.z) * t0.x + t14;
    //Instruction 3581
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3582
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3583
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3584
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 3585
    //RSQ
    t21 = inversesqrt(t14);
    //Instruction 3586
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 3587
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3588
    //MUL
    t2.xyz = vec3(t21) * t4.xyz;
    //Instruction 3589
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t2.xyz);
    //Instruction 3590
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3591
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3592
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 3593
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3594
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 3595
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3596
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 3597
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 3598
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 3599
    //DP3
    t16_5.x = dot((-t2.xyz), t16_5.xyz);
    //Instruction 3600
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 3601
    //MUL
    t16_7 = t10_14 * t16_5.x;
    //Instruction 3602
    //MOV
    t16_14 = t10_14;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 3603
    //MUL
    t1.xyz = vec3(t16_7) * _LightColor.xyz;
    //Instruction 3604
    //MAX
    t16_5.x = max(t16_6, 0.0);
    //Instruction 3605
    //LOG
    t16_5.x = log2(t16_5.x);
    //Instruction 3606
    //MUL
    t16_5.x = t16_5.x * t16_26;
    //Instruction 3607
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 3608
    //MUL
    t16_7 = t16_14 * t16_5.x;
    //Instruction 3609
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3610
    //MUL
    t1.w = t16_7 * t16_5.x;
    //Instruction 3611
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3612
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3613
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3614
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_CameraNormalsTexture, tmpvar_7);
  nspec_5 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((lightDir_6 - normalize(
    (tmpvar_9 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = pow (max (0.0, dot (h_4, tmpvar_13)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_15;
  spec_3 = (spec_3 * clamp (1.0, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * max (0.0, dot (lightDir_6, tmpvar_13)));
  mediump vec3 c_16;
  c_16 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_16, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_17;
  tmpvar_17 = clamp ((1.0 - (
    (mix (tmpvar_8.z, sqrt(dot (tmpvar_10, tmpvar_10)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_17);
  mediump vec4 tmpvar_18;
  tmpvar_18 = exp2(-(res_2));
  tmpvar_1 = tmpvar_18;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 2978
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2979
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2980
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2981
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2982
    //MOV
    gl_Position = t0;
    //Instruction 2983
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 2984
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 2985
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 2986
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 2987
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 2988
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2989
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2990
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2991
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 2992
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 2993
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 2994
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_10;
highp float t12;
mediump float t16_22;
void main()
{
    //Instruction 2933
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2934
    //SAMPLE
    t12 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 2935
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 2936
    //MAD
    t0.x = _ZBufferParams.x * t12 + _ZBufferParams.y;
    //Instruction 2937
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 2938
    //DIV
    t6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2939
    //MUL
    t6.xyz = t6.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2940
    //MUL
    t2.xyz = t0.xxx * t6.xyz;
    //Instruction 2941
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 2942
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 2943
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 2944
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 2945
    //ADD
    t3.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2946
    //ADD
    t2.xyw = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2947
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 2948
    //SQRT
    t6.x = sqrt(t6.x);
    //Instruction 2949
    //MAD
    t0.x = (-t6.z) * t0.x + t6.x;
    //Instruction 2950
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 2951
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2952
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2953
    //DP3
    t6.x = dot(t2.xyw, t2.xyw);
    //Instruction 2954
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 2955
    //MAD
    t6.xyz = (-t2.xyw) * t6.xxx + (-_LightDir.xyz);
    //Instruction 2956
    //DP3
    t2.x = dot(t6.xyz, t6.xyz);
    //Instruction 2957
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 2958
    //MUL
    t6.xyz = t6.xyz * t2.xxx;
    //Instruction 2959
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2960
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 2961
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 2962
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 2963
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 2964
    //DP3
    t16_5 = dot(t6.xyz, t16_4.xyz);
    //Instruction 2965
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 2966
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 2967
    //MUL
    t1.xyz = t16_4.xxx * _LightColor.xyz;
    //Instruction 2968
    //MAX
    t16_4.x = max(t16_5, 0.0);
    //Instruction 2969
    //LOG
    t16_4.x = log2(t16_4.x);
    //Instruction 2970
    //MUL
    t16_4.x = t16_4.x * t16_22;
    //Instruction 2971
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 2972
    //DP3
    t16_10 = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 2973
    //MUL
    t1.w = t16_10 * t16_4.x;
    //Instruction 2974
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 2975
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 2976
    //MOV
    SV_Target0 = t16_0;
    //Instruction 2977
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  lightDir_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_10;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_LightTexture0, tmpvar_15).w;
  atten_6 = tmpvar_16;
  atten_6 = (atten_6 * float((tmpvar_15.w < 0.0)));
  highp float tmpvar_17;
  tmpvar_17 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(tmpvar_17));
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = pow (max (0.0, dot (h_4, tmpvar_20)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_22;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_20)
  ) * atten_6));
  mediump vec3 c_23;
  c_23 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_23, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_24);
  mediump vec4 tmpvar_25;
  tmpvar_25 = exp2(-(res_2));
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 2433
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2434
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2435
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2436
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2437
    //MOV
    gl_Position = t0;
    //Instruction 2438
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 2439
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 2440
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 2441
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 2442
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 2443
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2444
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2445
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2446
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 2447
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 2448
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 2449
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
lowp float t10_7;
mediump float t16_12;
highp float t14;
lowp float t10_14;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 2369
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2370
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 2371
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 2372
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 2373
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 2374
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2375
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2376
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 2377
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 2378
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 2379
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 2380
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 2381
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2382
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2383
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2384
    //ADD
    t4.xyz = (-t2.xyw) + _LightPos.xyz;
    //Instruction 2385
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 2386
    //RSQ
    t24 = inversesqrt(t14);
    //Instruction 2387
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 2388
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 2389
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 2390
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + t4.xyz;
    //Instruction 2391
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2392
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2393
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2394
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2395
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 2396
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2397
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 2398
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 2399
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 2400
    //DP3
    t16_5.x = dot(t4.xyz, t16_5.xyz);
    //Instruction 2401
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 2402
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 2403
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 2404
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 2405
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 2406
    //MUL
    t1.xyz = t2.yyy * _LightMatrix0[1].xyw;
    //Instruction 2407
    //MAD
    t1.xyz = _LightMatrix0[0].xyw * t2.xxx + t1.xyz;
    //Instruction 2408
    //MAD
    t1.xyz = _LightMatrix0[2].xyw * t2.www + t1.xyz;
    //Instruction 2409
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2410
    //DP3
    t7.x = dot(t2.xyw, t2.xyw);
    //Instruction 2411
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 2412
    //MAD
    t0.x = (-t7.z) * t0.x + t7.x;
    //Instruction 2413
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 2414
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2415
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2416
    //ADD
    t1.xyz = t1.xyz + _LightMatrix0[3].xyw;
    //Instruction 2417
    //DIV
    t7.xz = t1.xy / t1.zz;
    //Instruction 2418
    //LT
    tb1 = t1.z<0.0;
    //Instruction 2419
    //AND
    t1.x = tb1 ? 1.0 : float(0.0);
    //Instruction 2420
    //SAMPLE
    t10_7 = texture(_LightTexture0, t7.xz).w;
    //Instruction 2421
    //MUL
    t7.x = t1.x * t10_7;
    //Instruction 2422
    //MUL
    t7.x = t10_14 * t7.x;
    //Instruction 2423
    //MOV
    t14 = t7.x;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 2424
    //MUL
    t7.x = t7.x * t16_5.x;
    //Instruction 2425
    //MUL
    t1.xyz = t7.xxx * _LightColor.xyz;
    //Instruction 2426
    //MUL
    t7.x = t14 * t16_12;
    //Instruction 2427
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 2428
    //MUL
    t1.w = t7.x * t16_5.x;
    //Instruction 2429
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 2430
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 2431
    //MOV
    SV_Target0 = t16_0;
    //Instruction 2432
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(normalize(tmpvar_12));
  lightDir_7 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTextureB0, vec2(tmpvar_14)).w;
  atten_6 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_10;
  lowp vec4 tmpvar_17;
  highp vec3 P_18;
  P_18 = (_LightMatrix0 * tmpvar_16).xyz;
  tmpvar_17 = textureCube (_LightTexture0, P_18);
  atten_6 = (atten_6 * tmpvar_17.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = pow (max (0.0, dot (h_4, tmpvar_20)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_22;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_20)
  ) * atten_6));
  mediump vec3 c_23;
  c_23 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_23, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_24);
  mediump vec4 tmpvar_25;
  tmpvar_25 = exp2(-(res_2));
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3692
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3693
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3694
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3695
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3696
    //MOV
    gl_Position = t0;
    //Instruction 3697
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3698
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3699
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3700
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3701
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3702
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3703
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3704
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3705
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3706
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3707
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3708
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
mediump float t16_12;
highp float t14;
mediump float t16_14;
lowp float t10_14;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 3632
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3633
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3634
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3635
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 3636
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3637
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3638
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3639
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 3640
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3641
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3642
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3643
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3644
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3645
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3646
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3647
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3648
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 3649
    //RSQ
    t24 = inversesqrt(t14);
    //Instruction 3650
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 3651
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3652
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 3653
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t4.xyz);
    //Instruction 3654
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3655
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3656
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 3657
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3658
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 3659
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3660
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 3661
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 3662
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 3663
    //DP3
    t16_5.x = dot((-t4.xyz), t16_5.xyz);
    //Instruction 3664
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 3665
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 3666
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 3667
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 3668
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 3669
    //MUL
    t1.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 3670
    //MAD
    t1.xyz = _LightMatrix0[0].xyz * t2.xxx + t1.xyz;
    //Instruction 3671
    //MAD
    t1.xyz = _LightMatrix0[2].xyz * t2.www + t1.xyz;
    //Instruction 3672
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3673
    //DP3
    t7.x = dot(t2.xyw, t2.xyw);
    //Instruction 3674
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 3675
    //MAD
    t0.x = (-t7.z) * t0.x + t7.x;
    //Instruction 3676
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3677
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3678
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3679
    //ADD
    t1.xyz = t1.xyz + _LightMatrix0[3].xyz;
    //Instruction 3680
    //SAMPLE
    t10_7 = texture(_LightTexture0, t1.xyz).w;
    //Instruction 3681
    //MUL
    t16_7 = t10_7 * t10_14;
    //Instruction 3682
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 3683
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 3684
    //MUL
    t1.xyz = vec3(t16_7) * _LightColor.xyz;
    //Instruction 3685
    //MUL
    t16_7 = t16_14 * t16_12;
    //Instruction 3686
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3687
    //MUL
    t1.w = t16_7 * t16_5.x;
    //Instruction 3688
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3689
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3690
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3691
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_10;
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (_LightMatrix0 * tmpvar_13).xy;
  tmpvar_14 = texture2D (_LightTexture0, P_15);
  atten_6 = tmpvar_14.w;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = pow (max (0.0, dot (h_4, tmpvar_17)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_19;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_17)
  ) * atten_6));
  mediump vec3 c_20;
  c_20 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_20, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_21);
  mediump vec4 tmpvar_22;
  tmpvar_22 = exp2(-(res_2));
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3048
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3049
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3050
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3051
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3052
    //MOV
    gl_Position = t0;
    //Instruction 3053
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3054
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3055
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3056
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3057
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3058
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3059
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3060
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3061
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3062
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3063
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3064
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_6;
lowp float t10_6;
mediump float t16_10;
highp float t12;
mediump float t16_12;
mediump float t16_22;
void main()
{
    //Instruction 2995
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2996
    //SAMPLE
    t12 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 2997
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 2998
    //MAD
    t0.x = _ZBufferParams.x * t12 + _ZBufferParams.y;
    //Instruction 2999
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3000
    //DIV
    t6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3001
    //MUL
    t6.xyz = t6.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3002
    //MUL
    t2.xyz = t0.xxx * t6.xyz;
    //Instruction 3003
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3004
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3005
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3006
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3007
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3008
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3009
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3010
    //MAD
    t3.xyz = (-t3.xyz) * t6.xxx + (-_LightDir.xyz);
    //Instruction 3011
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3012
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3013
    //MUL
    t3.xyz = t6.xxx * t3.xyz;
    //Instruction 3014
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3015
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 3016
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3017
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3018
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3019
    //DP3
    t16_5 = dot(t3.xyz, t16_4.xyz);
    //Instruction 3020
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3021
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3022
    //MAX
    t16_10 = max(t16_5, 0.0);
    //Instruction 3023
    //LOG
    t16_10 = log2(t16_10);
    //Instruction 3024
    //MUL
    t16_10 = t16_10 * t16_22;
    //Instruction 3025
    //EXP
    t16_10 = exp2(t16_10);
    //Instruction 3026
    //MUL
    t6.xy = t2.yy * _LightMatrix0[1].xy;
    //Instruction 3027
    //MAD
    t6.xy = _LightMatrix0[0].xy * t2.xx + t6.xy;
    //Instruction 3028
    //MAD
    t6.xy = _LightMatrix0[2].xy * t2.ww + t6.xy;
    //Instruction 3029
    //ADD
    t1.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3030
    //DP3
    t1.x = dot(t1.xyz, t1.xyz);
    //Instruction 3031
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 3032
    //MAD
    t0.x = (-t6.z) * t0.x + t1.x;
    //Instruction 3033
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3034
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3035
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3036
    //ADD
    t6.xy = t6.xy + _LightMatrix0[3].xy;
    //Instruction 3037
    //SAMPLE
    t10_6 = texture(_LightTexture0, t6.xy).w;
    //Instruction 3038
    //MOV
    t16_12 = t10_6;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 3039
    //MUL
    t16_6 = t10_6 * t16_4.x;
    //Instruction 3040
    //MUL
    t1.xyz = vec3(t16_6) * _LightColor.xyz;
    //Instruction 3041
    //MUL
    t16_6 = t16_12 * t16_10;
    //Instruction 3042
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3043
    //MUL
    t1.w = t16_6 * t16_4.x;
    //Instruction 3044
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3045
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3046
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3047
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_10;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_World2Shadow[0] * tmpvar_22);
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, tmpvar_23);
  mediump float tmpvar_26;
  if ((tmpvar_25.x < (tmpvar_23.z / tmpvar_23.w))) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  tmpvar_24 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp ((tmpvar_24 + tmpvar_21), 0.0, 1.0);
  tmpvar_20 = tmpvar_27;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (0.0, dot (h_4, tmpvar_29)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_31;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_29)
  ) * atten_6));
  mediump vec3 c_32;
  c_32 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_32, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_33;
  tmpvar_33 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_33);
  mediump vec4 tmpvar_34;
  tmpvar_34 = exp2(-(res_2));
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_10;
  highp vec4 tmpvar_22;
  tmpvar_22 = (unity_World2Shadow[0] * tmpvar_21);
  lowp float tmpvar_23;
  mediump float shadow_24;
  lowp float tmpvar_25;
  tmpvar_25 = shadow2DProjEXT (_ShadowMapTexture, tmpvar_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25;
  shadow_24 = (_LightShadowData.x + (tmpvar_26 * (1.0 - _LightShadowData.x)));
  tmpvar_23 = shadow_24;
  highp float tmpvar_27;
  tmpvar_27 = clamp ((tmpvar_23 + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_20 = tmpvar_27;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (0.0, dot (h_4, tmpvar_29)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_31;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_29)
  ) * atten_6));
  mediump vec3 c_32;
  c_32 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_32, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_33;
  tmpvar_33 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_33);
  mediump vec4 tmpvar_34;
  tmpvar_34 = exp2(-(res_2));
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3721
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3722
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3723
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3724
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3725
    //MOV
    gl_Position = t0;
    //Instruction 3726
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3727
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3728
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3729
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3730
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3731
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3732
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3733
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3734
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3735
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3736
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3737
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec2 t1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
highp vec3 t7;
lowp float t10_7;
highp vec2 t13;
lowp float t10_13;
highp float t15;
bool tb15;
mediump float t16_18;
highp float t19;
lowp float t10_19;
highp float t21;
void main()
{
    //Instruction 3646
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3647
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3648
    //SAMPLE
    t13.x = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3649
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 3650
    //MAD
    t1.x = _ZBufferParams.x * t13.x + _ZBufferParams.y;
    //Instruction 3651
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 3652
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3653
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3654
    //MUL
    t3.xyz = t1.xxx * t7.xyz;
    //Instruction 3655
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 3656
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 3657
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 3658
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 3659
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 3660
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 3661
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 3662
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 3663
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 3664
    //SAMPLE_C_LZ
    vec3 txVec8 = vec3(t4.xy,t4.z);
    t10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    //Instruction 3665
    //MAD
    t16_0.x = t10_7 * t16_0.x + _LightShadowData.x;
    //Instruction 3666
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3667
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 3668
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 3669
    //MAD
    t1.x = (-t7.z) * t1.x + t7.x;
    //Instruction 3670
    //MAD
    t1.x = unity_ShadowFadeCenterAndType.w * t1.x + t3.z;
    //Instruction 3671
    //MAD
    t7.x = t1.x * _LightShadowData.z + _LightShadowData.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 3672
    //MAD
    t1.x = t1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3673
    //ADD
    t1.x = (-t1.x) + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 3674
    //ADD
    t7.x = t16_0.x + t7.x;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 3675
    //MUL
    t4.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 3676
    //MAD
    t4.xyz = _LightMatrix0[0].xyw * t3.xxx + t4.xyz;
    //Instruction 3677
    //MAD
    t4.xyz = _LightMatrix0[2].xyw * t3.www + t4.xyz;
    //Instruction 3678
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyw;
    //Instruction 3679
    //DIV
    t13.xy = t4.xy / t4.zz;
    //Instruction 3680
    //LT
    tb15 = t4.z<0.0;
    //Instruction 3681
    //AND
    t15 = tb15 ? 1.0 : float(0.0);
    //Instruction 3682
    //SAMPLE
    t10_13 = texture(_LightTexture0, t13.xy).w;
    //Instruction 3683
    //MUL
    t13.x = t15 * t10_13;
    //Instruction 3684
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 3685
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3686
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 3687
    //MUL
    t21 = t19 * _LightPos.w;
    //Instruction 3688
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 3689
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 3690
    //SAMPLE
    t10_19 = texture(_LightTextureB0, vec2(t21)).w;
    //Instruction 3691
    //MUL
    t13.x = t10_19 * t13.x;
    //Instruction 3692
    //MUL
    t7.x = t7.x * t13.x;
    //Instruction 3693
    //MOV
    t13.x = t7.x;
    t13.x = clamp(t13.x, 0.0, 1.0);
    //Instruction 3694
    //DP3
    t19 = dot(t3.xyz, t3.xyz);
    //Instruction 3695
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 3696
    //MAD
    t3.xyz = (-t3.xyz) * vec3(t19) + t4.xyz;
    //Instruction 3697
    //DP3
    t19 = dot(t3.xyz, t3.xyz);
    //Instruction 3698
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 3699
    //MUL
    t3.xyz = vec3(t19) * t3.xyz;
    //Instruction 3700
    //MAD
    t16_0.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3701
    //MUL
    t16_18 = t10_2.w * 128.0;
    //Instruction 3702
    //DP3
    t16_5 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 3703
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3704
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_5);
    //Instruction 3705
    //DP3
    t16_5 = dot(t3.xyz, t16_0.xyz);
    //Instruction 3706
    //DP3
    t16_0.x = dot(t4.xyz, t16_0.xyz);
    //Instruction 3707
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 3708
    //MUL
    t7.x = t7.x * t16_0.x;
    //Instruction 3709
    //MUL
    t2.xyz = t7.xxx * _LightColor.xyz;
    //Instruction 3710
    //MAX
    t16_0.x = max(t16_5, 0.0);
    //Instruction 3711
    //LOG
    t16_0.x = log2(t16_0.x);
    //Instruction 3712
    //MUL
    t16_0.x = t16_0.x * t16_18;
    //Instruction 3713
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 3714
    //MUL
    t7.x = t13.x * t16_0.x;
    //Instruction 3715
    //DP3
    t16_0.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3716
    //MUL
    t2.w = t16_0.x * t7.x;
    //Instruction 3717
    //MUL
    t0 = t1.xxxx * t2;
    //Instruction 3718
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3719
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3720
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (0.0, dot (h_4, tmpvar_18)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_20;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_18)
  ) * atten_6));
  mediump vec3 c_21;
  c_21 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_21, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_22);
  mediump vec4 tmpvar_23;
  tmpvar_23 = exp2(-(res_2));
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_10;
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (_LightMatrix0 * tmpvar_17).xy;
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  mediump vec4 tmpvar_26;
  tmpvar_26 = exp2(-(res_2));
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp float mydist_17;
  mydist_17 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_18;
  tmpvar_18 = dot (textureCube (_ShadowMapTexture, tmpvar_13), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_19;
  if ((tmpvar_18 < mydist_17)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  atten_6 = (atten_6 * tmpvar_19);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  mediump vec4 tmpvar_26;
  tmpvar_26 = exp2(-(res_2));
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3127
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3128
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3129
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3130
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3131
    //MOV
    gl_Position = t0;
    //Instruction 3132
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3133
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3134
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3135
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3136
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3137
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3138
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3139
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3140
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3141
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3142
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3143
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
bool tb7;
mediump float t16_12;
highp float t14;
mediump float t16_14;
lowp float t10_14;
mediump float t16_19;
highp float t21;
mediump float t16_26;
void main()
{
    //Instruction 3065
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3066
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3067
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3068
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 3069
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3070
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3071
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3072
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 3073
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3074
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3075
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3076
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3077
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3078
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3079
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3080
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3081
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3082
    //DP3
    t14 = dot(t2.xyw, t2.xyw);
    //Instruction 3083
    //SQRT
    t14 = sqrt(t14);
    //Instruction 3084
    //MAD
    t0.x = (-t7.z) * t0.x + t14;
    //Instruction 3085
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3086
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3087
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3088
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 3089
    //RSQ
    t21 = inversesqrt(t14);
    //Instruction 3090
    //MUL
    t2.xyz = vec3(t21) * t4.xyz;
    //Instruction 3091
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 3092
    //DP4
    t21 = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3093
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t2.xyz);
    //Instruction 3094
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3095
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3096
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 3097
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3098
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 3099
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3100
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 3101
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 3102
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 3103
    //DP3
    t16_5.x = dot((-t2.xyz), t16_5.xyz);
    //Instruction 3104
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 3105
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 3106
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 3107
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 3108
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 3109
    //SQRT
    t7.x = sqrt(t14);
    //Instruction 3110
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 3111
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3112
    //MUL
    t7.x = t7.x * _LightPositionRange.w;
    //Instruction 3113
    //MUL
    t7.x = t7.x * 0.970000029;
    //Instruction 3114
    //LT
    tb7 = t21<t7.x;
    //Instruction 3115
    //MOVC
    t16_19 = (tb7) ? _LightShadowData.x : 1.0;
    //Instruction 3116
    //MUL
    t16_7 = t10_14 * t16_19;
    //Instruction 3117
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 3118
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 3119
    //MUL
    t1.xyz = vec3(t16_7) * _LightColor.xyz;
    //Instruction 3120
    //MUL
    t16_7 = t16_14 * t16_12;
    //Instruction 3121
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3122
    //MUL
    t1.w = t16_7 * t16_5.x;
    //Instruction 3123
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3124
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3125
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3126
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp float mydist_17;
  mydist_17 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_18;
  tmpvar_18 = dot (textureCube (_ShadowMapTexture, tmpvar_13), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_19;
  if ((tmpvar_18 < mydist_17)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  atten_6 = (atten_6 * tmpvar_19);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_10;
  lowp vec4 tmpvar_21;
  highp vec3 P_22;
  P_22 = (_LightMatrix0 * tmpvar_20).xyz;
  tmpvar_21 = textureCube (_LightTexture0, P_22);
  atten_6 = (atten_6 * tmpvar_21.w);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (0.0, dot (h_4, tmpvar_24)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_26;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_24)
  ) * atten_6));
  mediump vec3 c_27;
  c_27 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_27, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_28);
  mediump vec4 tmpvar_29;
  tmpvar_29 = exp2(-(res_2));
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3806
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3807
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3808
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3809
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3810
    //MOV
    gl_Position = t0;
    //Instruction 3811
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3812
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3813
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3814
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3815
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3816
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3817
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3818
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3819
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3820
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3821
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3822
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
highp float t14;
mediump float t16_14;
lowp float t10_14;
bool tb14;
highp float t21;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 3738
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3739
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3740
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3741
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 3742
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3743
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3744
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3745
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 3746
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3747
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3748
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3749
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3750
    //MUL
    t3.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 3751
    //MAD
    t3.xyz = _LightMatrix0[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3752
    //MAD
    t3.xyz = _LightMatrix0[2].xyz * t2.www + t3.xyz;
    //Instruction 3753
    //ADD
    t3.xyz = t3.xyz + _LightMatrix0[3].xyz;
    //Instruction 3754
    //SAMPLE
    t10_7 = texture(_LightTexture0, t3.xyz).w;
    //Instruction 3755
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3756
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t3.xyz);
    //Instruction 3757
    //DP4
    t14 = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3758
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 3759
    //SQRT
    t4.x = sqrt(t24);
    //Instruction 3760
    //MUL
    t4.x = t4.x * _LightPositionRange.w;
    //Instruction 3761
    //MUL
    t4.x = t4.x * 0.970000029;
    //Instruction 3762
    //LT
    tb14 = t14<t4.x;
    //Instruction 3763
    //MOVC
    t16_5.x = (tb14) ? _LightShadowData.x : 1.0;
    //Instruction 3764
    //MUL
    t14 = t24 * _LightPos.w;
    //Instruction 3765
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3766
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 3767
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3768
    //MUL
    t16_14 = t16_5.x * t10_14;
    //Instruction 3769
    //MUL
    t16_7 = t10_7 * t16_14;
    //Instruction 3770
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 3771
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3772
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3773
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 3774
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 3775
    //MAD
    t0.x = (-t7.z) * t0.x + t2.x;
    //Instruction 3776
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3777
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3778
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3779
    //DP3
    t21 = dot(t4.xyz, t4.xyz);
    //Instruction 3780
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3781
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t21) + (-t3.xyz);
    //Instruction 3782
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 3783
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3784
    //MUL
    t2.xyz = vec3(t21) * t2.xyz;
    //Instruction 3785
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3786
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 3787
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3788
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 3789
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 3790
    //DP3
    t16_6 = dot(t2.xyz, t16_5.xyz);
    //Instruction 3791
    //DP3
    t16_5.x = dot((-t3.xyz), t16_5.xyz);
    //Instruction 3792
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 3793
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 3794
    //MUL
    t1.xyz = vec3(t16_7) * _LightColor.xyz;
    //Instruction 3795
    //MAX
    t16_5.x = max(t16_6, 0.0);
    //Instruction 3796
    //LOG
    t16_5.x = log2(t16_5.x);
    //Instruction 3797
    //MUL
    t16_5.x = t16_5.x * t16_26;
    //Instruction 3798
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 3799
    //MUL
    t16_7 = t16_14 * t16_5.x;
    //Instruction 3800
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3801
    //MUL
    t1.w = t16_7 * t16_5.x;
    //Instruction 3802
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3803
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3804
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3805
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_10;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_World2Shadow[0] * tmpvar_22);
  lowp float tmpvar_24;
  highp vec4 shadowVals_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_23.xyz / tmpvar_23.w);
  shadowVals_25.x = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_25.y = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_25.z = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_25.w = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_25, tmpvar_26.zzzz);
  mediump vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  mediump float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  mediump float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  mediump float tmpvar_34;
  tmpvar_34 = dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_24 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp ((tmpvar_24 + tmpvar_21), 0.0, 1.0);
  tmpvar_20 = tmpvar_35;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = pow (max (0.0, dot (h_4, tmpvar_37)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_39;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_37)
  ) * atten_6));
  mediump vec3 c_40;
  c_40 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_40, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_41);
  mediump vec4 tmpvar_42;
  tmpvar_42 = exp2(-(res_2));
  tmpvar_1 = tmpvar_42;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_10;
  highp vec4 tmpvar_22;
  tmpvar_22 = (unity_World2Shadow[0] * tmpvar_21);
  lowp float tmpvar_23;
  mediump vec4 shadows_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_22.xyz / tmpvar_22.w);
  highp vec3 coord_26;
  coord_26 = (tmpvar_25 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_27;
  tmpvar_27 = shadow2DEXT (_ShadowMapTexture, coord_26);
  shadows_24.x = tmpvar_27;
  highp vec3 coord_28;
  coord_28 = (tmpvar_25 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_29;
  tmpvar_29 = shadow2DEXT (_ShadowMapTexture, coord_28);
  shadows_24.y = tmpvar_29;
  highp vec3 coord_30;
  coord_30 = (tmpvar_25 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_31;
  tmpvar_31 = shadow2DEXT (_ShadowMapTexture, coord_30);
  shadows_24.z = tmpvar_31;
  highp vec3 coord_32;
  coord_32 = (tmpvar_25 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_33;
  tmpvar_33 = shadow2DEXT (_ShadowMapTexture, coord_32);
  shadows_24.w = tmpvar_33;
  shadows_24 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  mediump float tmpvar_34;
  tmpvar_34 = dot (shadows_24, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_23 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp ((tmpvar_23 + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_20 = tmpvar_35;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = pow (max (0.0, dot (h_4, tmpvar_37)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_39;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_37)
  ) * atten_6));
  mediump vec3 c_40;
  c_40 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_40, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_41);
  mediump vec4 tmpvar_42;
  tmpvar_42 = exp2(-(res_2));
  tmpvar_1 = tmpvar_42;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3227
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3228
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3229
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3230
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3231
    //MOV
    gl_Position = t0;
    //Instruction 3232
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3233
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3234
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3235
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3236
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3237
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3238
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3239
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3240
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3241
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3242
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3243
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec2 t1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump float t16_7;
highp vec3 t9;
mediump float t16_9;
highp vec2 t17;
lowp float t10_17;
highp float t19;
bool tb19;
mediump float t16_24;
highp float t25;
lowp float t10_25;
highp float t27;
void main()
{
    //Instruction 3144
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3145
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3146
    //SAMPLE
    t17.x = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3147
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 3148
    //MAD
    t1.x = _ZBufferParams.x * t17.x + _ZBufferParams.y;
    //Instruction 3149
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 3150
    //DIV
    t9.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3151
    //MUL
    t9.xyz = t9.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3152
    //MUL
    t3.xyz = t1.xxx * t9.xyz;
    //Instruction 3153
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 3154
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 3155
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 3156
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 3157
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 3158
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 3159
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 3160
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 3161
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 3162
    //ADD
    t5.xyz = t4.xyz + _ShadowOffsets[0].xyz;
    //Instruction 3163
    //SAMPLE_C_LZ
    vec3 txVec9 = vec3(t5.xy,t5.z);
    t5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    //Instruction 3164
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[1].xyz;
    //Instruction 3165
    //SAMPLE_C_LZ
    vec3 txVec10 = vec3(t6.xy,t6.z);
    t5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    //Instruction 3166
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[2].xyz;
    //Instruction 3167
    //ADD
    t4.xyz = t4.xyz + _ShadowOffsets[3].xyz;
    //Instruction 3168
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(t4.xy,t4.z);
    t5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 3169
    //SAMPLE_C_LZ
    vec3 txVec12 = vec3(t6.xy,t6.z);
    t5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    //Instruction 3170
    //MAD
    t16_0 = t5 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 3171
    //DP4
    t16_9 = dot(t16_0, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 3172
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3173
    //DP3
    t17.x = dot(t4.xyz, t4.xyz);
    //Instruction 3174
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 3175
    //MAD
    t1.x = (-t9.z) * t1.x + t17.x;
    //Instruction 3176
    //MAD
    t1.x = unity_ShadowFadeCenterAndType.w * t1.x + t3.z;
    //Instruction 3177
    //MAD
    t17.x = t1.x * _LightShadowData.z + _LightShadowData.w;
    t17.x = clamp(t17.x, 0.0, 1.0);
    //Instruction 3178
    //MAD
    t1.x = t1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3179
    //ADD
    t1.x = (-t1.x) + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 3180
    //ADD
    t9.x = t17.x + t16_9;
    t9.x = clamp(t9.x, 0.0, 1.0);
    //Instruction 3181
    //MUL
    t4.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 3182
    //MAD
    t4.xyz = _LightMatrix0[0].xyw * t3.xxx + t4.xyz;
    //Instruction 3183
    //MAD
    t4.xyz = _LightMatrix0[2].xyw * t3.www + t4.xyz;
    //Instruction 3184
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyw;
    //Instruction 3185
    //DIV
    t17.xy = t4.xy / t4.zz;
    //Instruction 3186
    //LT
    tb19 = t4.z<0.0;
    //Instruction 3187
    //AND
    t19 = tb19 ? 1.0 : float(0.0);
    //Instruction 3188
    //SAMPLE
    t10_17 = texture(_LightTexture0, t17.xy).w;
    //Instruction 3189
    //MUL
    t17.x = t19 * t10_17;
    //Instruction 3190
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 3191
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3192
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 3193
    //MUL
    t27 = t25 * _LightPos.w;
    //Instruction 3194
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 3195
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 3196
    //SAMPLE
    t10_25 = texture(_LightTextureB0, vec2(t27)).w;
    //Instruction 3197
    //MUL
    t17.x = t10_25 * t17.x;
    //Instruction 3198
    //MUL
    t9.x = t9.x * t17.x;
    //Instruction 3199
    //MOV
    t17.x = t9.x;
    t17.x = clamp(t17.x, 0.0, 1.0);
    //Instruction 3200
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 3201
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 3202
    //MAD
    t3.xyz = (-t3.xyz) * vec3(t25) + t4.xyz;
    //Instruction 3203
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 3204
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 3205
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 3206
    //MAD
    t16_0.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3207
    //MUL
    t16_24 = t10_2.w * 128.0;
    //Instruction 3208
    //DP3
    t16_7 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 3209
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 3210
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_7);
    //Instruction 3211
    //DP3
    t16_7 = dot(t3.xyz, t16_0.xyz);
    //Instruction 3212
    //DP3
    t16_0.x = dot(t4.xyz, t16_0.xyz);
    //Instruction 3213
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 3214
    //MUL
    t9.x = t9.x * t16_0.x;
    //Instruction 3215
    //MUL
    t2.xyz = t9.xxx * _LightColor.xyz;
    //Instruction 3216
    //MAX
    t16_0.x = max(t16_7, 0.0);
    //Instruction 3217
    //LOG
    t16_0.x = log2(t16_0.x);
    //Instruction 3218
    //MUL
    t16_0.x = t16_0.x * t16_24;
    //Instruction 3219
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 3220
    //MUL
    t9.x = t17.x * t16_0.x;
    //Instruction 3221
    //DP3
    t16_0.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3222
    //MUL
    t2.w = t16_0.x * t9.x;
    //Instruction 3223
    //MUL
    t0 = t1.xxxx * t2;
    //Instruction 3224
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3225
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3226
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_17.x = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.y = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.z = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.w = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_20;
  tmpvar_20 = _LightShadowData.xxxx;
  mediump float tmpvar_21;
  if (tmpvar_19.x) {
    tmpvar_21 = tmpvar_20.x;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump float tmpvar_22;
  if (tmpvar_19.y) {
    tmpvar_22 = tmpvar_20.y;
  } else {
    tmpvar_22 = 1.0;
  };
  mediump float tmpvar_23;
  if (tmpvar_19.z) {
    tmpvar_23 = tmpvar_20.z;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  if (tmpvar_19.w) {
    tmpvar_24 = tmpvar_20.w;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25.x = tmpvar_21;
  tmpvar_25.y = tmpvar_22;
  tmpvar_25.z = tmpvar_23;
  tmpvar_25.w = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec4(0.25, 0.25, 0.25, 0.25));
  atten_6 = (atten_6 * tmpvar_26);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (0.0, dot (h_4, tmpvar_28)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_30;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_28)
  ) * atten_6));
  mediump vec3 c_31;
  c_31 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_31, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_32;
  tmpvar_32 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_32);
  mediump vec4 tmpvar_33;
  tmpvar_33 = exp2(-(res_2));
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3896
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3897
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3898
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3899
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3900
    //MOV
    gl_Position = t0;
    //Instruction 3901
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3902
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3903
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3904
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3905
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3906
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3907
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3908
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3909
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3910
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3911
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3912
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
bvec4 tb4;
highp vec4 t5;
mediump vec3 t16_6;
mediump float t16_7;
highp vec3 t8;
mediump float t16_8;
lowp float t10_8;
highp float t16;
mediump float t16_16;
highp float t24;
mediump float t16_30;
void main()
{
    //Instruction 3823
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3824
    //SAMPLE
    t16 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3825
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3826
    //MAD
    t0.x = _ZBufferParams.x * t16 + _ZBufferParams.y;
    //Instruction 3827
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3828
    //DIV
    t8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3829
    //MUL
    t8.xyz = t8.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3830
    //MUL
    t2.xyz = t0.xxx * t8.xyz;
    //Instruction 3831
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3832
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3833
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3834
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3835
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3836
    //ADD
    t4.xyz = t3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 3837
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 3838
    //DP4
    t4.x = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3839
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 3840
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3841
    //DP4
    t4.y = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3842
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 3843
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3844
    //DP4
    t4.z = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3845
    //ADD
    t5.xyz = t3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 3846
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3847
    //DP4
    t4.w = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3848
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 3849
    //SQRT
    t16 = sqrt(t8.x);
    //Instruction 3850
    //MUL
    t16 = t16 * _LightPositionRange.w;
    //Instruction 3851
    //MUL
    t16 = t16 * 0.970000029;
    //Instruction 3852
    //LT
    tb4 = lessThan(t4, vec4(t16));
    //Instruction 3853
    //MOVC
    t4.x = (tb4.x) ? _LightShadowData.x : float(1.0);
    t4.y = (tb4.y) ? _LightShadowData.x : float(1.0);
    t4.z = (tb4.z) ? _LightShadowData.x : float(1.0);
    t4.w = (tb4.w) ? _LightShadowData.x : float(1.0);
    //Instruction 3854
    //DP4
    t16_6.x = dot(t4, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 3855
    //MUL
    t16 = t8.x * _LightPos.w;
    //Instruction 3856
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 3857
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 3858
    //SAMPLE
    t10_8 = texture(_LightTextureB0, vec2(t16)).w;
    //Instruction 3859
    //MUL
    t16_8 = t16_6.x * t10_8;
    //Instruction 3860
    //MOV
    t16_16 = t16_8;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    //Instruction 3861
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3862
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3863
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 3864
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 3865
    //MAD
    t0.x = (-t8.z) * t0.x + t2.x;
    //Instruction 3866
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3867
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3868
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3869
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 3870
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3871
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t24) + (-t3.xyz);
    //Instruction 3872
    //DP3
    t24 = dot(t2.xyz, t2.xyz);
    //Instruction 3873
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3874
    //MUL
    t2.xyz = vec3(t24) * t2.xyz;
    //Instruction 3875
    //MAD
    t16_6.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3876
    //MUL
    t16_30 = t10_1.w * 128.0;
    //Instruction 3877
    //DP3
    t16_7 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3878
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 3879
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_7);
    //Instruction 3880
    //DP3
    t16_7 = dot(t2.xyz, t16_6.xyz);
    //Instruction 3881
    //DP3
    t16_6.x = dot((-t3.xyz), t16_6.xyz);
    //Instruction 3882
    //MAX
    t16_6.x = max(t16_6.x, 0.0);
    //Instruction 3883
    //MUL
    t16_8 = t16_8 * t16_6.x;
    //Instruction 3884
    //MUL
    t1.xyz = vec3(t16_8) * _LightColor.xyz;
    //Instruction 3885
    //MAX
    t16_6.x = max(t16_7, 0.0);
    //Instruction 3886
    //LOG
    t16_6.x = log2(t16_6.x);
    //Instruction 3887
    //MUL
    t16_6.x = t16_6.x * t16_30;
    //Instruction 3888
    //EXP
    t16_6.x = exp2(t16_6.x);
    //Instruction 3889
    //MUL
    t16_8 = t16_16 * t16_6.x;
    //Instruction 3890
    //DP3
    t16_6.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3891
    //MUL
    t1.w = t16_8 * t16_6.x;
    //Instruction 3892
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3893
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3894
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3895
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_17.x = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.y = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.z = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.w = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_20;
  tmpvar_20 = _LightShadowData.xxxx;
  mediump float tmpvar_21;
  if (tmpvar_19.x) {
    tmpvar_21 = tmpvar_20.x;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump float tmpvar_22;
  if (tmpvar_19.y) {
    tmpvar_22 = tmpvar_20.y;
  } else {
    tmpvar_22 = 1.0;
  };
  mediump float tmpvar_23;
  if (tmpvar_19.z) {
    tmpvar_23 = tmpvar_20.z;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  if (tmpvar_19.w) {
    tmpvar_24 = tmpvar_20.w;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25.x = tmpvar_21;
  tmpvar_25.y = tmpvar_22;
  tmpvar_25.z = tmpvar_23;
  tmpvar_25.w = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec4(0.25, 0.25, 0.25, 0.25));
  atten_6 = (atten_6 * tmpvar_26);
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_10;
  lowp vec4 tmpvar_28;
  highp vec3 P_29;
  P_29 = (_LightMatrix0 * tmpvar_27).xyz;
  tmpvar_28 = textureCube (_LightTexture0, P_29);
  atten_6 = (atten_6 * tmpvar_28.w);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = pow (max (0.0, dot (h_4, tmpvar_31)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_33;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_31)
  ) * atten_6));
  mediump vec3 c_34;
  c_34 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_34, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_35;
  tmpvar_35 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_35);
  mediump vec4 tmpvar_36;
  tmpvar_36 = exp2(-(res_2));
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3788
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3789
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3790
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3791
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3792
    //MOV
    gl_Position = t0;
    //Instruction 3793
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3794
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3795
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3796
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3797
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3798
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3799
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3800
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3801
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3802
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3803
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3804
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
bvec4 tb4;
highp vec4 t5;
mediump vec3 t16_6;
mediump float t16_7;
highp vec3 t8;
mediump float t16_8;
lowp float t10_8;
highp float t16;
mediump float t16_16;
lowp float t10_16;
highp float t24;
mediump float t16_30;
void main()
{
    //Instruction 3709
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3710
    //SAMPLE
    t16 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3711
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3712
    //MAD
    t0.x = _ZBufferParams.x * t16 + _ZBufferParams.y;
    //Instruction 3713
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3714
    //DIV
    t8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3715
    //MUL
    t8.xyz = t8.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3716
    //MUL
    t2.xyz = t0.xxx * t8.xyz;
    //Instruction 3717
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3718
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3719
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3720
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3721
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3722
    //ADD
    t4.xyz = t3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 3723
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 3724
    //DP4
    t4.x = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3725
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 3726
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3727
    //DP4
    t4.y = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3728
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 3729
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3730
    //DP4
    t4.z = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3731
    //ADD
    t5.xyz = t3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 3732
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3733
    //DP4
    t4.w = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3734
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 3735
    //SQRT
    t16 = sqrt(t8.x);
    //Instruction 3736
    //MUL
    t16 = t16 * _LightPositionRange.w;
    //Instruction 3737
    //MUL
    t16 = t16 * 0.970000029;
    //Instruction 3738
    //LT
    tb4 = lessThan(t4, vec4(t16));
    //Instruction 3739
    //MOVC
    t4.x = (tb4.x) ? _LightShadowData.x : float(1.0);
    t4.y = (tb4.y) ? _LightShadowData.x : float(1.0);
    t4.z = (tb4.z) ? _LightShadowData.x : float(1.0);
    t4.w = (tb4.w) ? _LightShadowData.x : float(1.0);
    //Instruction 3740
    //DP4
    t16_6.x = dot(t4, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 3741
    //MUL
    t16 = t8.x * _LightPos.w;
    //Instruction 3742
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 3743
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 3744
    //SAMPLE
    t10_8 = texture(_LightTextureB0, vec2(t16)).w;
    //Instruction 3745
    //MUL
    t16_8 = t16_6.x * t10_8;
    //Instruction 3746
    //MUL
    t4.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 3747
    //MAD
    t4.xyz = _LightMatrix0[0].xyz * t2.xxx + t4.xyz;
    //Instruction 3748
    //MAD
    t4.xyz = _LightMatrix0[2].xyz * t2.www + t4.xyz;
    //Instruction 3749
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyz;
    //Instruction 3750
    //SAMPLE
    t10_16 = texture(_LightTexture0, t4.xyz).w;
    //Instruction 3751
    //MUL
    t16_8 = t10_16 * t16_8;
    //Instruction 3752
    //MOV
    t16_16 = t16_8;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    //Instruction 3753
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3754
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3755
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 3756
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 3757
    //MAD
    t0.x = (-t8.z) * t0.x + t2.x;
    //Instruction 3758
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3759
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3760
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3761
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 3762
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3763
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t24) + (-t3.xyz);
    //Instruction 3764
    //DP3
    t24 = dot(t2.xyz, t2.xyz);
    //Instruction 3765
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3766
    //MUL
    t2.xyz = vec3(t24) * t2.xyz;
    //Instruction 3767
    //MAD
    t16_6.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3768
    //MUL
    t16_30 = t10_1.w * 128.0;
    //Instruction 3769
    //DP3
    t16_7 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3770
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 3771
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_7);
    //Instruction 3772
    //DP3
    t16_7 = dot(t2.xyz, t16_6.xyz);
    //Instruction 3773
    //DP3
    t16_6.x = dot((-t3.xyz), t16_6.xyz);
    //Instruction 3774
    //MAX
    t16_6.x = max(t16_6.x, 0.0);
    //Instruction 3775
    //MUL
    t16_8 = t16_8 * t16_6.x;
    //Instruction 3776
    //MUL
    t1.xyz = vec3(t16_8) * _LightColor.xyz;
    //Instruction 3777
    //MAX
    t16_6.x = max(t16_7, 0.0);
    //Instruction 3778
    //LOG
    t16_6.x = log2(t16_6.x);
    //Instruction 3779
    //MUL
    t16_6.x = t16_6.x * t16_30;
    //Instruction 3780
    //EXP
    t16_6.x = exp2(t16_6.x);
    //Instruction 3781
    //MUL
    t16_8 = t16_16 * t16_6.x;
    //Instruction 3782
    //DP3
    t16_6.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3783
    //MUL
    t1.w = t16_8 * t16_6.x;
    //Instruction 3784
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3785
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3786
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3787
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (0.0, dot (h_4, tmpvar_18)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_20;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_18)
  ) * atten_6));
  mediump vec3 c_21;
  c_21 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_21, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_22);
  mediump vec4 tmpvar_23;
  tmpvar_23 = exp2(-(res_2));
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3963
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3964
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3965
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3966
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3967
    //MOV
    gl_Position = t0;
    //Instruction 3968
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3969
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3970
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3971
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3972
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3973
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3974
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3975
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3976
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3977
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3978
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3979
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp float t10_1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_10;
highp float t12;
highp float t13;
highp float t18;
mediump float t16_22;
void main()
{
    //Instruction 3913
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3914
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3915
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3916
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3917
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3918
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3919
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 3920
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3921
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3922
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3923
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3924
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3925
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3926
    //DP3
    t0.x = dot(t2.xyw, t2.xyw);
    //Instruction 3927
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3928
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 3929
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3930
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3931
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3932
    //MAD
    t6.xyz = (-t3.xyz) * t6.xxx + (-_LightDir.xyz);
    //Instruction 3933
    //DP3
    t13 = dot(t6.xyz, t6.xyz);
    //Instruction 3934
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 3935
    //MUL
    t6.xyz = t6.xyz * vec3(t13);
    //Instruction 3936
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 3937
    //SAMPLE
    t10_1 = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 3938
    //MAD
    t16_4.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3939
    //MUL
    t16_22 = t10_2.w * 128.0;
    //Instruction 3940
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3941
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3942
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3943
    //DP3
    t16_5 = dot(t6.xyz, t16_4.xyz);
    //Instruction 3944
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3945
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3946
    //MAX
    t16_10 = max(t16_5, 0.0);
    //Instruction 3947
    //LOG
    t16_10 = log2(t16_10);
    //Instruction 3948
    //MUL
    t16_10 = t16_10 * t16_22;
    //Instruction 3949
    //EXP
    t16_10 = exp2(t16_10);
    //Instruction 3950
    //MAD
    t6.x = t0.x * _LightShadowData.z + _LightShadowData.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 3951
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3952
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3953
    //ADD
    t6.x = t6.x + t10_1;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 3954
    //MUL
    t12 = t6.x * t16_10;
    //Instruction 3955
    //MUL
    t6.x = t6.x * t16_4.x;
    //Instruction 3956
    //MUL
    t1.xyz = t6.xxx * _LightColor.xyz;
    //Instruction 3957
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3958
    //MUL
    t1.w = t12 * t16_4.x;
    //Instruction 3959
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3960
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3961
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3962
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_10;
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (_LightMatrix0 * tmpvar_17).xy;
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  mediump vec4 tmpvar_26;
  tmpvar_26 = exp2(-(res_2));
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3301
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3302
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3303
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3304
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3305
    //MOV
    gl_Position = t0;
    //Instruction 3306
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3307
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3308
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3309
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3310
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3311
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3312
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3313
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3314
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3315
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3316
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3317
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp float t6;
highp vec2 t12;
lowp float t10_12;
highp float t18;
mediump float t16_22;
void main()
{
    //Instruction 3244
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3245
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3246
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3247
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3248
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3249
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3250
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 3251
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3252
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3253
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3254
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3255
    //ADD
    t3.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3256
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3257
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3258
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 3259
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3260
    //MAD
    t6 = t0.x * _LightShadowData.z + _LightShadowData.w;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 3261
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3262
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3263
    //SAMPLE
    t10_12 = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 3264
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 3265
    //ADD
    t6 = t6 + t10_12;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 3266
    //MUL
    t12.xy = t2.yy * _LightMatrix0[1].xy;
    //Instruction 3267
    //MAD
    t12.xy = _LightMatrix0[0].xy * t2.xx + t12.xy;
    //Instruction 3268
    //MAD
    t12.xy = _LightMatrix0[2].xy * t2.ww + t12.xy;
    //Instruction 3269
    //ADD
    t2.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3270
    //ADD
    t12.xy = t12.xy + _LightMatrix0[3].xy;
    //Instruction 3271
    //SAMPLE
    t10_12 = texture(_LightTexture0, t12.xy).w;
    //Instruction 3272
    //MUL
    t6 = t10_12 * t6;
    //Instruction 3273
    //MOV
    t12.x = t6;
    t12.x = clamp(t12.x, 0.0, 1.0);
    //Instruction 3274
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3275
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3276
    //MAD
    t2.xyz = (-t2.xyz) * vec3(t18) + (-_LightDir.xyz);
    //Instruction 3277
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3278
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3279
    //MUL
    t2.xyz = vec3(t18) * t2.xyz;
    //Instruction 3280
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3281
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 3282
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3283
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3284
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3285
    //DP3
    t16_5 = dot(t2.xyz, t16_4.xyz);
    //Instruction 3286
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3287
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3288
    //MUL
    t6 = t6 * t16_4.x;
    //Instruction 3289
    //MUL
    t1.xyz = vec3(t6) * _LightColor.xyz;
    //Instruction 3290
    //MAX
    t16_4.x = max(t16_5, 0.0);
    //Instruction 3291
    //LOG
    t16_4.x = log2(t16_4.x);
    //Instruction 3292
    //MUL
    t16_4.x = t16_4.x * t16_22;
    //Instruction 3293
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3294
    //MUL
    t6 = t12.x * t16_4.x;
    //Instruction 3295
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3296
    //MUL
    t1.w = t6 * t16_4.x;
    //Instruction 3297
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3298
    //EXP
    t16_0 = exp2((-t0));
    //Instruction 3299
    //MOV
    SV_Target0 = t16_0;
    //Instruction 3300
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "SHADOWSUPPORT"="true" }
  ZWrite Off
  Blend One One
  GpuProgramID 113408
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(normalize(tmpvar_12));
  lightDir_7 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTextureB0, vec2(tmpvar_14)).w;
  atten_6 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = pow (max (0.0, dot (h_4, tmpvar_17)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_19;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_17)
  ) * atten_6));
  mediump vec3 c_20;
  c_20 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_20, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_21);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3371
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3372
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3373
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3374
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3375
    //MOV
    gl_Position = t0;
    //Instruction 3376
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3377
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3378
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3379
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3380
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3381
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3382
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3383
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3384
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3385
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3386
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3387
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
highp float t14;
mediump float t16_14;
lowp float t10_14;
highp float t21;
mediump float t16_26;
void main()
{
    //Instruction 3318
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3319
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3320
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3321
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 3322
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3323
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3324
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3325
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 3326
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3327
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3328
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3329
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3330
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3331
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3332
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3333
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3334
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3335
    //DP3
    t14 = dot(t2.xyw, t2.xyw);
    //Instruction 3336
    //SQRT
    t14 = sqrt(t14);
    //Instruction 3337
    //MAD
    t0.x = (-t7.z) * t0.x + t14;
    //Instruction 3338
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3339
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3340
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3341
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 3342
    //RSQ
    t21 = inversesqrt(t14);
    //Instruction 3343
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 3344
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3345
    //MUL
    t2.xyz = vec3(t21) * t4.xyz;
    //Instruction 3346
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t2.xyz);
    //Instruction 3347
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3348
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3349
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 3350
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3351
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 3352
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3353
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 3354
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 3355
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 3356
    //DP3
    t16_5.x = dot((-t2.xyz), t16_5.xyz);
    //Instruction 3357
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 3358
    //MUL
    t16_7 = t10_14 * t16_5.x;
    //Instruction 3359
    //MOV
    t16_14 = t10_14;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 3360
    //MUL
    t1.xyz = vec3(t16_7) * _LightColor.xyz;
    //Instruction 3361
    //MAX
    t16_5.x = max(t16_6, 0.0);
    //Instruction 3362
    //LOG
    t16_5.x = log2(t16_5.x);
    //Instruction 3363
    //MUL
    t16_5.x = t16_5.x * t16_26;
    //Instruction 3364
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 3365
    //MUL
    t16_7 = t16_14 * t16_5.x;
    //Instruction 3366
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3367
    //MUL
    t1.w = t16_7 * t16_5.x;
    //Instruction 3368
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3369
    //MOV
    SV_Target0 = t0;
    //Instruction 3370
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_CameraNormalsTexture, tmpvar_7);
  nspec_5 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((lightDir_6 - normalize(
    (tmpvar_9 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = pow (max (0.0, dot (h_4, tmpvar_13)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_15;
  spec_3 = (spec_3 * clamp (1.0, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * max (0.0, dot (lightDir_6, tmpvar_13)));
  mediump vec3 c_16;
  c_16 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_16, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_17;
  tmpvar_17 = clamp ((1.0 - (
    (mix (tmpvar_8.z, sqrt(dot (tmpvar_10, tmpvar_10)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_17);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3849
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3850
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3851
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3852
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3853
    //MOV
    gl_Position = t0;
    //Instruction 3854
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3855
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3856
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3857
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3858
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3859
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3860
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3861
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3862
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3863
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3864
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3865
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_10;
highp float t12;
mediump float t16_22;
void main()
{
    //Instruction 3805
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3806
    //SAMPLE
    t12 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3807
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3808
    //MAD
    t0.x = _ZBufferParams.x * t12 + _ZBufferParams.y;
    //Instruction 3809
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3810
    //DIV
    t6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3811
    //MUL
    t6.xyz = t6.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3812
    //MUL
    t2.xyz = t0.xxx * t6.xyz;
    //Instruction 3813
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3814
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3815
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3816
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3817
    //ADD
    t3.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3818
    //ADD
    t2.xyw = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3819
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3820
    //SQRT
    t6.x = sqrt(t6.x);
    //Instruction 3821
    //MAD
    t0.x = (-t6.z) * t0.x + t6.x;
    //Instruction 3822
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3823
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3824
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3825
    //DP3
    t6.x = dot(t2.xyw, t2.xyw);
    //Instruction 3826
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3827
    //MAD
    t6.xyz = (-t2.xyw) * t6.xxx + (-_LightDir.xyz);
    //Instruction 3828
    //DP3
    t2.x = dot(t6.xyz, t6.xyz);
    //Instruction 3829
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 3830
    //MUL
    t6.xyz = t6.xyz * t2.xxx;
    //Instruction 3831
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3832
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 3833
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3834
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3835
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3836
    //DP3
    t16_5 = dot(t6.xyz, t16_4.xyz);
    //Instruction 3837
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3838
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3839
    //MUL
    t1.xyz = t16_4.xxx * _LightColor.xyz;
    //Instruction 3840
    //MAX
    t16_4.x = max(t16_5, 0.0);
    //Instruction 3841
    //LOG
    t16_4.x = log2(t16_4.x);
    //Instruction 3842
    //MUL
    t16_4.x = t16_4.x * t16_22;
    //Instruction 3843
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3844
    //DP3
    t16_10 = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3845
    //MUL
    t1.w = t16_10 * t16_4.x;
    //Instruction 3846
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3847
    //MOV
    SV_Target0 = t0;
    //Instruction 3848
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  lightDir_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_10;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_LightTexture0, tmpvar_15).w;
  atten_6 = tmpvar_16;
  atten_6 = (atten_6 * float((tmpvar_15.w < 0.0)));
  highp float tmpvar_17;
  tmpvar_17 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(tmpvar_17));
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = pow (max (0.0, dot (h_4, tmpvar_20)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_22;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_20)
  ) * atten_6));
  mediump vec3 c_23;
  c_23 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_23, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_24);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 2513
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2514
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2515
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2516
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2517
    //MOV
    gl_Position = t0;
    //Instruction 2518
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 2519
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 2520
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 2521
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 2522
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 2523
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2524
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2525
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2526
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 2527
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 2528
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 2529
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
lowp float t10_7;
mediump float t16_12;
highp float t14;
lowp float t10_14;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 2450
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2451
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 2452
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 2453
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 2454
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 2455
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2456
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2457
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 2458
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 2459
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 2460
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 2461
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 2462
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2463
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2464
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2465
    //ADD
    t4.xyz = (-t2.xyw) + _LightPos.xyz;
    //Instruction 2466
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 2467
    //RSQ
    t24 = inversesqrt(t14);
    //Instruction 2468
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 2469
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 2470
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 2471
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + t4.xyz;
    //Instruction 2472
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2473
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2474
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2475
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2476
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 2477
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2478
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 2479
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 2480
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 2481
    //DP3
    t16_5.x = dot(t4.xyz, t16_5.xyz);
    //Instruction 2482
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 2483
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 2484
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 2485
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 2486
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 2487
    //MUL
    t1.xyz = t2.yyy * _LightMatrix0[1].xyw;
    //Instruction 2488
    //MAD
    t1.xyz = _LightMatrix0[0].xyw * t2.xxx + t1.xyz;
    //Instruction 2489
    //MAD
    t1.xyz = _LightMatrix0[2].xyw * t2.www + t1.xyz;
    //Instruction 2490
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2491
    //DP3
    t7.x = dot(t2.xyw, t2.xyw);
    //Instruction 2492
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 2493
    //MAD
    t0.x = (-t7.z) * t0.x + t7.x;
    //Instruction 2494
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 2495
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2496
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2497
    //ADD
    t1.xyz = t1.xyz + _LightMatrix0[3].xyw;
    //Instruction 2498
    //DIV
    t7.xz = t1.xy / t1.zz;
    //Instruction 2499
    //LT
    tb1 = t1.z<0.0;
    //Instruction 2500
    //AND
    t1.x = tb1 ? 1.0 : float(0.0);
    //Instruction 2501
    //SAMPLE
    t10_7 = texture(_LightTexture0, t7.xz).w;
    //Instruction 2502
    //MUL
    t7.x = t1.x * t10_7;
    //Instruction 2503
    //MUL
    t7.x = t10_14 * t7.x;
    //Instruction 2504
    //MOV
    t14 = t7.x;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 2505
    //MUL
    t7.x = t7.x * t16_5.x;
    //Instruction 2506
    //MUL
    t1.xyz = t7.xxx * _LightColor.xyz;
    //Instruction 2507
    //MUL
    t7.x = t14 * t16_12;
    //Instruction 2508
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 2509
    //MUL
    t1.w = t7.x * t16_5.x;
    //Instruction 2510
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 2511
    //MOV
    SV_Target0 = t0;
    //Instruction 2512
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(normalize(tmpvar_12));
  lightDir_7 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTextureB0, vec2(tmpvar_14)).w;
  atten_6 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_10;
  lowp vec4 tmpvar_17;
  highp vec3 P_18;
  P_18 = (_LightMatrix0 * tmpvar_16).xyz;
  tmpvar_17 = textureCube (_LightTexture0, P_18);
  atten_6 = (atten_6 * tmpvar_17.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = pow (max (0.0, dot (h_4, tmpvar_20)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_22;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_20)
  ) * atten_6));
  mediump vec3 c_23;
  c_23 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_23, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_24);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3447
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3448
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3449
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3450
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3451
    //MOV
    gl_Position = t0;
    //Instruction 3452
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3453
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3454
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3455
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3456
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3457
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3458
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3459
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3460
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3461
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3462
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3463
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
mediump float t16_12;
highp float t14;
mediump float t16_14;
lowp float t10_14;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 3388
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3389
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3390
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3391
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 3392
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3393
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3394
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3395
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 3396
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3397
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3398
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3399
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3400
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3401
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3402
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3403
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3404
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 3405
    //RSQ
    t24 = inversesqrt(t14);
    //Instruction 3406
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 3407
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3408
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 3409
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t4.xyz);
    //Instruction 3410
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3411
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3412
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 3413
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3414
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 3415
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3416
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 3417
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 3418
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 3419
    //DP3
    t16_5.x = dot((-t4.xyz), t16_5.xyz);
    //Instruction 3420
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 3421
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 3422
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 3423
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 3424
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 3425
    //MUL
    t1.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 3426
    //MAD
    t1.xyz = _LightMatrix0[0].xyz * t2.xxx + t1.xyz;
    //Instruction 3427
    //MAD
    t1.xyz = _LightMatrix0[2].xyz * t2.www + t1.xyz;
    //Instruction 3428
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3429
    //DP3
    t7.x = dot(t2.xyw, t2.xyw);
    //Instruction 3430
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 3431
    //MAD
    t0.x = (-t7.z) * t0.x + t7.x;
    //Instruction 3432
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3433
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3434
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3435
    //ADD
    t1.xyz = t1.xyz + _LightMatrix0[3].xyz;
    //Instruction 3436
    //SAMPLE
    t10_7 = texture(_LightTexture0, t1.xyz).w;
    //Instruction 3437
    //MUL
    t16_7 = t10_7 * t10_14;
    //Instruction 3438
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 3439
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 3440
    //MUL
    t1.xyz = vec3(t16_7) * _LightColor.xyz;
    //Instruction 3441
    //MUL
    t16_7 = t16_14 * t16_12;
    //Instruction 3442
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3443
    //MUL
    t1.w = t16_7 * t16_5.x;
    //Instruction 3444
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3445
    //MOV
    SV_Target0 = t0;
    //Instruction 3446
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_10;
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (_LightMatrix0 * tmpvar_13).xy;
  tmpvar_14 = texture2D (_LightTexture0, P_15);
  atten_6 = tmpvar_14.w;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = pow (max (0.0, dot (h_4, tmpvar_17)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_19;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_17)
  ) * atten_6));
  mediump vec3 c_20;
  c_20 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_20, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_21);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3918
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3919
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3920
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3921
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3922
    //MOV
    gl_Position = t0;
    //Instruction 3923
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3924
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3925
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3926
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3927
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3928
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3929
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3930
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3931
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3932
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3933
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3934
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_6;
lowp float t10_6;
mediump float t16_10;
highp float t12;
mediump float t16_12;
mediump float t16_22;
void main()
{
    //Instruction 3866
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3867
    //SAMPLE
    t12 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3868
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3869
    //MAD
    t0.x = _ZBufferParams.x * t12 + _ZBufferParams.y;
    //Instruction 3870
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3871
    //DIV
    t6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3872
    //MUL
    t6.xyz = t6.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3873
    //MUL
    t2.xyz = t0.xxx * t6.xyz;
    //Instruction 3874
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3875
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3876
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3877
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3878
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3879
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3880
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3881
    //MAD
    t3.xyz = (-t3.xyz) * t6.xxx + (-_LightDir.xyz);
    //Instruction 3882
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3883
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3884
    //MUL
    t3.xyz = t6.xxx * t3.xyz;
    //Instruction 3885
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3886
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 3887
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3888
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3889
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3890
    //DP3
    t16_5 = dot(t3.xyz, t16_4.xyz);
    //Instruction 3891
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3892
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3893
    //MAX
    t16_10 = max(t16_5, 0.0);
    //Instruction 3894
    //LOG
    t16_10 = log2(t16_10);
    //Instruction 3895
    //MUL
    t16_10 = t16_10 * t16_22;
    //Instruction 3896
    //EXP
    t16_10 = exp2(t16_10);
    //Instruction 3897
    //MUL
    t6.xy = t2.yy * _LightMatrix0[1].xy;
    //Instruction 3898
    //MAD
    t6.xy = _LightMatrix0[0].xy * t2.xx + t6.xy;
    //Instruction 3899
    //MAD
    t6.xy = _LightMatrix0[2].xy * t2.ww + t6.xy;
    //Instruction 3900
    //ADD
    t1.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3901
    //DP3
    t1.x = dot(t1.xyz, t1.xyz);
    //Instruction 3902
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 3903
    //MAD
    t0.x = (-t6.z) * t0.x + t1.x;
    //Instruction 3904
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3905
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3906
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3907
    //ADD
    t6.xy = t6.xy + _LightMatrix0[3].xy;
    //Instruction 3908
    //SAMPLE
    t10_6 = texture(_LightTexture0, t6.xy).w;
    //Instruction 3909
    //MOV
    t16_12 = t10_6;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 3910
    //MUL
    t16_6 = t10_6 * t16_4.x;
    //Instruction 3911
    //MUL
    t1.xyz = vec3(t16_6) * _LightColor.xyz;
    //Instruction 3912
    //MUL
    t16_6 = t16_12 * t16_10;
    //Instruction 3913
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3914
    //MUL
    t1.w = t16_6 * t16_4.x;
    //Instruction 3915
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3916
    //MOV
    SV_Target0 = t0;
    //Instruction 3917
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_10;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_World2Shadow[0] * tmpvar_22);
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, tmpvar_23);
  mediump float tmpvar_26;
  if ((tmpvar_25.x < (tmpvar_23.z / tmpvar_23.w))) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  tmpvar_24 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp ((tmpvar_24 + tmpvar_21), 0.0, 1.0);
  tmpvar_20 = tmpvar_27;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (0.0, dot (h_4, tmpvar_29)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_31;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_29)
  ) * atten_6));
  mediump vec3 c_32;
  c_32 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_32, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_33;
  tmpvar_33 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_33);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_10;
  highp vec4 tmpvar_22;
  tmpvar_22 = (unity_World2Shadow[0] * tmpvar_21);
  lowp float tmpvar_23;
  mediump float shadow_24;
  lowp float tmpvar_25;
  tmpvar_25 = shadow2DProjEXT (_ShadowMapTexture, tmpvar_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25;
  shadow_24 = (_LightShadowData.x + (tmpvar_26 * (1.0 - _LightShadowData.x)));
  tmpvar_23 = shadow_24;
  highp float tmpvar_27;
  tmpvar_27 = clamp ((tmpvar_23 + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_20 = tmpvar_27;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (0.0, dot (h_4, tmpvar_29)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_31;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_29)
  ) * atten_6));
  mediump vec3 c_32;
  c_32 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_32, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_33;
  tmpvar_33 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_33);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4054
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4055
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4056
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4057
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4058
    //MOV
    gl_Position = t0;
    //Instruction 4059
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4060
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4061
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4062
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4063
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4064
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4065
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4066
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4067
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4068
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4069
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4070
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec3 t16_0;
highp vec2 t1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
highp vec3 t7;
lowp float t10_7;
highp vec2 t13;
lowp float t10_13;
highp float t15;
bool tb15;
mediump float t16_18;
highp float t19;
lowp float t10_19;
highp float t21;
void main()
{
    //Instruction 3980
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3981
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3982
    //SAMPLE
    t13.x = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3983
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 3984
    //MAD
    t1.x = _ZBufferParams.x * t13.x + _ZBufferParams.y;
    //Instruction 3985
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 3986
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3987
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3988
    //MUL
    t3.xyz = t1.xxx * t7.xyz;
    //Instruction 3989
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 3990
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 3991
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 3992
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 3993
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 3994
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 3995
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 3996
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 3997
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 3998
    //SAMPLE_C_LZ
    vec3 txVec9 = vec3(t4.xy,t4.z);
    t10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    //Instruction 3999
    //MAD
    t16_0.x = t10_7 * t16_0.x + _LightShadowData.x;
    //Instruction 4000
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4001
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 4002
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 4003
    //MAD
    t1.x = (-t7.z) * t1.x + t7.x;
    //Instruction 4004
    //MAD
    t1.x = unity_ShadowFadeCenterAndType.w * t1.x + t3.z;
    //Instruction 4005
    //MAD
    t7.x = t1.x * _LightShadowData.z + _LightShadowData.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 4006
    //MAD
    t1.x = t1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 4007
    //ADD
    t1.x = (-t1.x) + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 4008
    //ADD
    t7.x = t16_0.x + t7.x;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 4009
    //MUL
    t4.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 4010
    //MAD
    t4.xyz = _LightMatrix0[0].xyw * t3.xxx + t4.xyz;
    //Instruction 4011
    //MAD
    t4.xyz = _LightMatrix0[2].xyw * t3.www + t4.xyz;
    //Instruction 4012
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyw;
    //Instruction 4013
    //DIV
    t13.xy = t4.xy / t4.zz;
    //Instruction 4014
    //LT
    tb15 = t4.z<0.0;
    //Instruction 4015
    //AND
    t15 = tb15 ? 1.0 : float(0.0);
    //Instruction 4016
    //SAMPLE
    t10_13 = texture(_LightTexture0, t13.xy).w;
    //Instruction 4017
    //MUL
    t13.x = t15 * t10_13;
    //Instruction 4018
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 4019
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4020
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 4021
    //MUL
    t21 = t19 * _LightPos.w;
    //Instruction 4022
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 4023
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 4024
    //SAMPLE
    t10_19 = texture(_LightTextureB0, vec2(t21)).w;
    //Instruction 4025
    //MUL
    t13.x = t10_19 * t13.x;
    //Instruction 4026
    //MUL
    t7.x = t7.x * t13.x;
    //Instruction 4027
    //MOV
    t13.x = t7.x;
    t13.x = clamp(t13.x, 0.0, 1.0);
    //Instruction 4028
    //DP3
    t19 = dot(t3.xyz, t3.xyz);
    //Instruction 4029
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 4030
    //MAD
    t3.xyz = (-t3.xyz) * vec3(t19) + t4.xyz;
    //Instruction 4031
    //DP3
    t19 = dot(t3.xyz, t3.xyz);
    //Instruction 4032
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 4033
    //MUL
    t3.xyz = vec3(t19) * t3.xyz;
    //Instruction 4034
    //MAD
    t16_0.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4035
    //MUL
    t16_18 = t10_2.w * 128.0;
    //Instruction 4036
    //DP3
    t16_5 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 4037
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 4038
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_5);
    //Instruction 4039
    //DP3
    t16_5 = dot(t3.xyz, t16_0.xyz);
    //Instruction 4040
    //DP3
    t16_0.x = dot(t4.xyz, t16_0.xyz);
    //Instruction 4041
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 4042
    //MUL
    t7.x = t7.x * t16_0.x;
    //Instruction 4043
    //MUL
    t2.xyz = t7.xxx * _LightColor.xyz;
    //Instruction 4044
    //MAX
    t16_0.x = max(t16_5, 0.0);
    //Instruction 4045
    //LOG
    t16_0.x = log2(t16_0.x);
    //Instruction 4046
    //MUL
    t16_0.x = t16_0.x * t16_18;
    //Instruction 4047
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 4048
    //MUL
    t7.x = t13.x * t16_0.x;
    //Instruction 4049
    //DP3
    t16_0.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 4050
    //MUL
    t2.w = t16_0.x * t7.x;
    //Instruction 4051
    //MUL
    t0 = t1.xxxx * t2;
    //Instruction 4052
    //MOV
    SV_Target0 = t0;
    //Instruction 4053
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (0.0, dot (h_4, tmpvar_18)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_20;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_18)
  ) * atten_6));
  mediump vec3 c_21;
  c_21 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_21, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_22);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_10;
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (_LightMatrix0 * tmpvar_17).xy;
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp float mydist_17;
  mydist_17 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_18;
  tmpvar_18 = dot (textureCube (_ShadowMapTexture, tmpvar_13), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_19;
  if ((tmpvar_18 < mydist_17)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  atten_6 = (atten_6 * tmpvar_19);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 2591
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2592
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2593
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2594
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2595
    //MOV
    gl_Position = t0;
    //Instruction 2596
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 2597
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 2598
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 2599
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 2600
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 2601
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2602
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2603
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2604
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 2605
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 2606
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 2607
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
bool tb7;
mediump float t16_12;
highp float t14;
mediump float t16_14;
lowp float t10_14;
mediump float t16_19;
highp float t21;
mediump float t16_26;
void main()
{
    //Instruction 2530
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2531
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 2532
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 2533
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 2534
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 2535
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2536
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2537
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 2538
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 2539
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 2540
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 2541
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 2542
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2543
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2544
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2545
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 2546
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2547
    //DP3
    t14 = dot(t2.xyw, t2.xyw);
    //Instruction 2548
    //SQRT
    t14 = sqrt(t14);
    //Instruction 2549
    //MAD
    t0.x = (-t7.z) * t0.x + t14;
    //Instruction 2550
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 2551
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2552
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2553
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 2554
    //RSQ
    t21 = inversesqrt(t14);
    //Instruction 2555
    //MUL
    t2.xyz = vec3(t21) * t4.xyz;
    //Instruction 2556
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 2557
    //DP4
    t21 = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 2558
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t2.xyz);
    //Instruction 2559
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2560
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2561
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2562
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2563
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 2564
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2565
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 2566
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 2567
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 2568
    //DP3
    t16_5.x = dot((-t2.xyz), t16_5.xyz);
    //Instruction 2569
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 2570
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 2571
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 2572
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 2573
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 2574
    //SQRT
    t7.x = sqrt(t14);
    //Instruction 2575
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 2576
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 2577
    //MUL
    t7.x = t7.x * _LightPositionRange.w;
    //Instruction 2578
    //MUL
    t7.x = t7.x * 0.970000029;
    //Instruction 2579
    //LT
    tb7 = t21<t7.x;
    //Instruction 2580
    //MOVC
    t16_19 = (tb7) ? _LightShadowData.x : 1.0;
    //Instruction 2581
    //MUL
    t16_7 = t10_14 * t16_19;
    //Instruction 2582
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 2583
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 2584
    //MUL
    t1.xyz = vec3(t16_7) * _LightColor.xyz;
    //Instruction 2585
    //MUL
    t16_7 = t16_14 * t16_12;
    //Instruction 2586
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 2587
    //MUL
    t1.w = t16_7 * t16_5.x;
    //Instruction 2588
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 2589
    //MOV
    SV_Target0 = t0;
    //Instruction 2590
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp float mydist_17;
  mydist_17 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_18;
  tmpvar_18 = dot (textureCube (_ShadowMapTexture, tmpvar_13), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_19;
  if ((tmpvar_18 < mydist_17)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  atten_6 = (atten_6 * tmpvar_19);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_10;
  lowp vec4 tmpvar_21;
  highp vec3 P_22;
  P_22 = (_LightMatrix0 * tmpvar_20).xyz;
  tmpvar_21 = textureCube (_LightTexture0, P_22);
  atten_6 = (atten_6 * tmpvar_21.w);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (0.0, dot (h_4, tmpvar_24)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_26;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_24)
  ) * atten_6));
  mediump vec3 c_27;
  c_27 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_27, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_28);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4002
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4003
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4004
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4005
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4006
    //MOV
    gl_Position = t0;
    //Instruction 4007
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4008
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4009
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4010
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4011
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4012
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4013
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4014
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4015
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4016
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4017
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4018
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
highp float t14;
mediump float t16_14;
lowp float t10_14;
bool tb14;
highp float t21;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 3935
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3936
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3937
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3938
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 3939
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3940
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3941
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3942
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 3943
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3944
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3945
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3946
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3947
    //MUL
    t3.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 3948
    //MAD
    t3.xyz = _LightMatrix0[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3949
    //MAD
    t3.xyz = _LightMatrix0[2].xyz * t2.www + t3.xyz;
    //Instruction 3950
    //ADD
    t3.xyz = t3.xyz + _LightMatrix0[3].xyz;
    //Instruction 3951
    //SAMPLE
    t10_7 = texture(_LightTexture0, t3.xyz).w;
    //Instruction 3952
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3953
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t3.xyz);
    //Instruction 3954
    //DP4
    t14 = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3955
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 3956
    //SQRT
    t4.x = sqrt(t24);
    //Instruction 3957
    //MUL
    t4.x = t4.x * _LightPositionRange.w;
    //Instruction 3958
    //MUL
    t4.x = t4.x * 0.970000029;
    //Instruction 3959
    //LT
    tb14 = t14<t4.x;
    //Instruction 3960
    //MOVC
    t16_5.x = (tb14) ? _LightShadowData.x : 1.0;
    //Instruction 3961
    //MUL
    t14 = t24 * _LightPos.w;
    //Instruction 3962
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3963
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 3964
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3965
    //MUL
    t16_14 = t16_5.x * t10_14;
    //Instruction 3966
    //MUL
    t16_7 = t10_7 * t16_14;
    //Instruction 3967
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 3968
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3969
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3970
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 3971
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 3972
    //MAD
    t0.x = (-t7.z) * t0.x + t2.x;
    //Instruction 3973
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3974
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3975
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3976
    //DP3
    t21 = dot(t4.xyz, t4.xyz);
    //Instruction 3977
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3978
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t21) + (-t3.xyz);
    //Instruction 3979
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 3980
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3981
    //MUL
    t2.xyz = vec3(t21) * t2.xyz;
    //Instruction 3982
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3983
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 3984
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3985
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 3986
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 3987
    //DP3
    t16_6 = dot(t2.xyz, t16_5.xyz);
    //Instruction 3988
    //DP3
    t16_5.x = dot((-t3.xyz), t16_5.xyz);
    //Instruction 3989
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 3990
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 3991
    //MUL
    t1.xyz = vec3(t16_7) * _LightColor.xyz;
    //Instruction 3992
    //MAX
    t16_5.x = max(t16_6, 0.0);
    //Instruction 3993
    //LOG
    t16_5.x = log2(t16_5.x);
    //Instruction 3994
    //MUL
    t16_5.x = t16_5.x * t16_26;
    //Instruction 3995
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 3996
    //MUL
    t16_7 = t16_14 * t16_5.x;
    //Instruction 3997
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3998
    //MUL
    t1.w = t16_7 * t16_5.x;
    //Instruction 3999
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 4000
    //MOV
    SV_Target0 = t0;
    //Instruction 4001
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_10;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_World2Shadow[0] * tmpvar_22);
  lowp float tmpvar_24;
  highp vec4 shadowVals_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_23.xyz / tmpvar_23.w);
  shadowVals_25.x = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_25.y = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_25.z = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_25.w = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_25, tmpvar_26.zzzz);
  mediump vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  mediump float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  mediump float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  mediump float tmpvar_34;
  tmpvar_34 = dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_24 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp ((tmpvar_24 + tmpvar_21), 0.0, 1.0);
  tmpvar_20 = tmpvar_35;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = pow (max (0.0, dot (h_4, tmpvar_37)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_39;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_37)
  ) * atten_6));
  mediump vec3 c_40;
  c_40 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_40, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_41);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_10;
  highp vec4 tmpvar_22;
  tmpvar_22 = (unity_World2Shadow[0] * tmpvar_21);
  lowp float tmpvar_23;
  mediump vec4 shadows_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_22.xyz / tmpvar_22.w);
  highp vec3 coord_26;
  coord_26 = (tmpvar_25 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_27;
  tmpvar_27 = shadow2DEXT (_ShadowMapTexture, coord_26);
  shadows_24.x = tmpvar_27;
  highp vec3 coord_28;
  coord_28 = (tmpvar_25 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_29;
  tmpvar_29 = shadow2DEXT (_ShadowMapTexture, coord_28);
  shadows_24.y = tmpvar_29;
  highp vec3 coord_30;
  coord_30 = (tmpvar_25 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_31;
  tmpvar_31 = shadow2DEXT (_ShadowMapTexture, coord_30);
  shadows_24.z = tmpvar_31;
  highp vec3 coord_32;
  coord_32 = (tmpvar_25 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_33;
  tmpvar_33 = shadow2DEXT (_ShadowMapTexture, coord_32);
  shadows_24.w = tmpvar_33;
  shadows_24 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  mediump float tmpvar_34;
  tmpvar_34 = dot (shadows_24, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_23 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp ((tmpvar_23 + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_20 = tmpvar_35;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = pow (max (0.0, dot (h_4, tmpvar_37)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_39;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_37)
  ) * atten_6));
  mediump vec3 c_40;
  c_40 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_40, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_41);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 2690
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2691
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2692
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2693
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2694
    //MOV
    gl_Position = t0;
    //Instruction 2695
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 2696
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 2697
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 2698
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 2699
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 2700
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2701
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2702
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2703
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 2704
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 2705
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 2706
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec2 t1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump float t16_7;
highp vec3 t9;
mediump float t16_9;
highp vec2 t17;
lowp float t10_17;
highp float t19;
bool tb19;
mediump float t16_24;
highp float t25;
lowp float t10_25;
highp float t27;
void main()
{
    //Instruction 2608
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2609
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2610
    //SAMPLE
    t17.x = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 2611
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 2612
    //MAD
    t1.x = _ZBufferParams.x * t17.x + _ZBufferParams.y;
    //Instruction 2613
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 2614
    //DIV
    t9.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2615
    //MUL
    t9.xyz = t9.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2616
    //MUL
    t3.xyz = t1.xxx * t9.xyz;
    //Instruction 2617
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 2618
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 2619
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 2620
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 2621
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 2622
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 2623
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 2624
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 2625
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 2626
    //ADD
    t5.xyz = t4.xyz + _ShadowOffsets[0].xyz;
    //Instruction 2627
    //SAMPLE_C_LZ
    vec3 txVec4 = vec3(t5.xy,t5.z);
    t5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    //Instruction 2628
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[1].xyz;
    //Instruction 2629
    //SAMPLE_C_LZ
    vec3 txVec5 = vec3(t6.xy,t6.z);
    t5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    //Instruction 2630
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[2].xyz;
    //Instruction 2631
    //ADD
    t4.xyz = t4.xyz + _ShadowOffsets[3].xyz;
    //Instruction 2632
    //SAMPLE_C_LZ
    vec3 txVec6 = vec3(t4.xy,t4.z);
    t5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    //Instruction 2633
    //SAMPLE_C_LZ
    vec3 txVec7 = vec3(t6.xy,t6.z);
    t5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    //Instruction 2634
    //MAD
    t16_0 = t5 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 2635
    //DP4
    t16_9 = dot(t16_0, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 2636
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2637
    //DP3
    t17.x = dot(t4.xyz, t4.xyz);
    //Instruction 2638
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 2639
    //MAD
    t1.x = (-t9.z) * t1.x + t17.x;
    //Instruction 2640
    //MAD
    t1.x = unity_ShadowFadeCenterAndType.w * t1.x + t3.z;
    //Instruction 2641
    //MAD
    t17.x = t1.x * _LightShadowData.z + _LightShadowData.w;
    t17.x = clamp(t17.x, 0.0, 1.0);
    //Instruction 2642
    //MAD
    t1.x = t1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2643
    //ADD
    t1.x = (-t1.x) + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 2644
    //ADD
    t9.x = t17.x + t16_9;
    t9.x = clamp(t9.x, 0.0, 1.0);
    //Instruction 2645
    //MUL
    t4.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 2646
    //MAD
    t4.xyz = _LightMatrix0[0].xyw * t3.xxx + t4.xyz;
    //Instruction 2647
    //MAD
    t4.xyz = _LightMatrix0[2].xyw * t3.www + t4.xyz;
    //Instruction 2648
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyw;
    //Instruction 2649
    //DIV
    t17.xy = t4.xy / t4.zz;
    //Instruction 2650
    //LT
    tb19 = t4.z<0.0;
    //Instruction 2651
    //AND
    t19 = tb19 ? 1.0 : float(0.0);
    //Instruction 2652
    //SAMPLE
    t10_17 = texture(_LightTexture0, t17.xy).w;
    //Instruction 2653
    //MUL
    t17.x = t19 * t10_17;
    //Instruction 2654
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 2655
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2656
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 2657
    //MUL
    t27 = t25 * _LightPos.w;
    //Instruction 2658
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 2659
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 2660
    //SAMPLE
    t10_25 = texture(_LightTextureB0, vec2(t27)).w;
    //Instruction 2661
    //MUL
    t17.x = t10_25 * t17.x;
    //Instruction 2662
    //MUL
    t9.x = t9.x * t17.x;
    //Instruction 2663
    //MOV
    t17.x = t9.x;
    t17.x = clamp(t17.x, 0.0, 1.0);
    //Instruction 2664
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 2665
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 2666
    //MAD
    t3.xyz = (-t3.xyz) * vec3(t25) + t4.xyz;
    //Instruction 2667
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 2668
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 2669
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 2670
    //MAD
    t16_0.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2671
    //MUL
    t16_24 = t10_2.w * 128.0;
    //Instruction 2672
    //DP3
    t16_7 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2673
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 2674
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_7);
    //Instruction 2675
    //DP3
    t16_7 = dot(t3.xyz, t16_0.xyz);
    //Instruction 2676
    //DP3
    t16_0.x = dot(t4.xyz, t16_0.xyz);
    //Instruction 2677
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 2678
    //MUL
    t9.x = t9.x * t16_0.x;
    //Instruction 2679
    //MUL
    t2.xyz = t9.xxx * _LightColor.xyz;
    //Instruction 2680
    //MAX
    t16_0.x = max(t16_7, 0.0);
    //Instruction 2681
    //LOG
    t16_0.x = log2(t16_0.x);
    //Instruction 2682
    //MUL
    t16_0.x = t16_0.x * t16_24;
    //Instruction 2683
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2684
    //MUL
    t9.x = t17.x * t16_0.x;
    //Instruction 2685
    //DP3
    t16_0.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 2686
    //MUL
    t2.w = t16_0.x * t9.x;
    //Instruction 2687
    //MUL
    t0 = t1.xxxx * t2;
    //Instruction 2688
    //MOV
    SV_Target0 = t0;
    //Instruction 2689
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_17.x = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.y = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.z = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.w = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_20;
  tmpvar_20 = _LightShadowData.xxxx;
  mediump float tmpvar_21;
  if (tmpvar_19.x) {
    tmpvar_21 = tmpvar_20.x;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump float tmpvar_22;
  if (tmpvar_19.y) {
    tmpvar_22 = tmpvar_20.y;
  } else {
    tmpvar_22 = 1.0;
  };
  mediump float tmpvar_23;
  if (tmpvar_19.z) {
    tmpvar_23 = tmpvar_20.z;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  if (tmpvar_19.w) {
    tmpvar_24 = tmpvar_20.w;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25.x = tmpvar_21;
  tmpvar_25.y = tmpvar_22;
  tmpvar_25.z = tmpvar_23;
  tmpvar_25.w = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec4(0.25, 0.25, 0.25, 0.25));
  atten_6 = (atten_6 * tmpvar_26);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (0.0, dot (h_4, tmpvar_28)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_30;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_28)
  ) * atten_6));
  mediump vec3 c_31;
  c_31 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_31, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_32;
  tmpvar_32 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_32);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3536
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3537
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3538
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3539
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3540
    //MOV
    gl_Position = t0;
    //Instruction 3541
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3542
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3543
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3544
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3545
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3546
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3547
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3548
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3549
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3550
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3551
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3552
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
bvec4 tb4;
highp vec4 t5;
mediump vec3 t16_6;
mediump float t16_7;
highp vec3 t8;
mediump float t16_8;
lowp float t10_8;
highp float t16;
mediump float t16_16;
highp float t24;
mediump float t16_30;
void main()
{
    //Instruction 3464
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3465
    //SAMPLE
    t16 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3466
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3467
    //MAD
    t0.x = _ZBufferParams.x * t16 + _ZBufferParams.y;
    //Instruction 3468
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3469
    //DIV
    t8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3470
    //MUL
    t8.xyz = t8.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3471
    //MUL
    t2.xyz = t0.xxx * t8.xyz;
    //Instruction 3472
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3473
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3474
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3475
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3476
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3477
    //ADD
    t4.xyz = t3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 3478
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 3479
    //DP4
    t4.x = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3480
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 3481
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3482
    //DP4
    t4.y = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3483
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 3484
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3485
    //DP4
    t4.z = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3486
    //ADD
    t5.xyz = t3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 3487
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3488
    //DP4
    t4.w = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3489
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 3490
    //SQRT
    t16 = sqrt(t8.x);
    //Instruction 3491
    //MUL
    t16 = t16 * _LightPositionRange.w;
    //Instruction 3492
    //MUL
    t16 = t16 * 0.970000029;
    //Instruction 3493
    //LT
    tb4 = lessThan(t4, vec4(t16));
    //Instruction 3494
    //MOVC
    t4.x = (tb4.x) ? _LightShadowData.x : float(1.0);
    t4.y = (tb4.y) ? _LightShadowData.x : float(1.0);
    t4.z = (tb4.z) ? _LightShadowData.x : float(1.0);
    t4.w = (tb4.w) ? _LightShadowData.x : float(1.0);
    //Instruction 3495
    //DP4
    t16_6.x = dot(t4, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 3496
    //MUL
    t16 = t8.x * _LightPos.w;
    //Instruction 3497
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 3498
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 3499
    //SAMPLE
    t10_8 = texture(_LightTextureB0, vec2(t16)).w;
    //Instruction 3500
    //MUL
    t16_8 = t16_6.x * t10_8;
    //Instruction 3501
    //MOV
    t16_16 = t16_8;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    //Instruction 3502
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3503
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3504
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 3505
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 3506
    //MAD
    t0.x = (-t8.z) * t0.x + t2.x;
    //Instruction 3507
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3508
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3509
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3510
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 3511
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3512
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t24) + (-t3.xyz);
    //Instruction 3513
    //DP3
    t24 = dot(t2.xyz, t2.xyz);
    //Instruction 3514
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3515
    //MUL
    t2.xyz = vec3(t24) * t2.xyz;
    //Instruction 3516
    //MAD
    t16_6.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3517
    //MUL
    t16_30 = t10_1.w * 128.0;
    //Instruction 3518
    //DP3
    t16_7 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3519
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 3520
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_7);
    //Instruction 3521
    //DP3
    t16_7 = dot(t2.xyz, t16_6.xyz);
    //Instruction 3522
    //DP3
    t16_6.x = dot((-t3.xyz), t16_6.xyz);
    //Instruction 3523
    //MAX
    t16_6.x = max(t16_6.x, 0.0);
    //Instruction 3524
    //MUL
    t16_8 = t16_8 * t16_6.x;
    //Instruction 3525
    //MUL
    t1.xyz = vec3(t16_8) * _LightColor.xyz;
    //Instruction 3526
    //MAX
    t16_6.x = max(t16_7, 0.0);
    //Instruction 3527
    //LOG
    t16_6.x = log2(t16_6.x);
    //Instruction 3528
    //MUL
    t16_6.x = t16_6.x * t16_30;
    //Instruction 3529
    //EXP
    t16_6.x = exp2(t16_6.x);
    //Instruction 3530
    //MUL
    t16_8 = t16_16 * t16_6.x;
    //Instruction 3531
    //DP3
    t16_6.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3532
    //MUL
    t1.w = t16_8 * t16_6.x;
    //Instruction 3533
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3534
    //MOV
    SV_Target0 = t0;
    //Instruction 3535
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_17.x = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.y = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.z = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.w = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_20;
  tmpvar_20 = _LightShadowData.xxxx;
  mediump float tmpvar_21;
  if (tmpvar_19.x) {
    tmpvar_21 = tmpvar_20.x;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump float tmpvar_22;
  if (tmpvar_19.y) {
    tmpvar_22 = tmpvar_20.y;
  } else {
    tmpvar_22 = 1.0;
  };
  mediump float tmpvar_23;
  if (tmpvar_19.z) {
    tmpvar_23 = tmpvar_20.z;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  if (tmpvar_19.w) {
    tmpvar_24 = tmpvar_20.w;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25.x = tmpvar_21;
  tmpvar_25.y = tmpvar_22;
  tmpvar_25.z = tmpvar_23;
  tmpvar_25.w = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec4(0.25, 0.25, 0.25, 0.25));
  atten_6 = (atten_6 * tmpvar_26);
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_10;
  lowp vec4 tmpvar_28;
  highp vec3 P_29;
  P_29 = (_LightMatrix0 * tmpvar_27).xyz;
  tmpvar_28 = textureCube (_LightTexture0, P_29);
  atten_6 = (atten_6 * tmpvar_28.w);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = pow (max (0.0, dot (h_4, tmpvar_31)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_33;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_31)
  ) * atten_6));
  mediump vec3 c_34;
  c_34 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_34, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_35;
  tmpvar_35 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_35);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4097
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4098
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4099
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4100
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4101
    //MOV
    gl_Position = t0;
    //Instruction 4102
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4103
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4104
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4105
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4106
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4107
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4108
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4109
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4110
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4111
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4112
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4113
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
bvec4 tb4;
highp vec4 t5;
mediump vec3 t16_6;
mediump float t16_7;
highp vec3 t8;
mediump float t16_8;
lowp float t10_8;
highp float t16;
mediump float t16_16;
lowp float t10_16;
highp float t24;
mediump float t16_30;
void main()
{
    //Instruction 4019
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4020
    //SAMPLE
    t16 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 4021
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 4022
    //MAD
    t0.x = _ZBufferParams.x * t16 + _ZBufferParams.y;
    //Instruction 4023
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 4024
    //DIV
    t8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4025
    //MUL
    t8.xyz = t8.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4026
    //MUL
    t2.xyz = t0.xxx * t8.xyz;
    //Instruction 4027
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 4028
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 4029
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 4030
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 4031
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 4032
    //ADD
    t4.xyz = t3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 4033
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 4034
    //DP4
    t4.x = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4035
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 4036
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 4037
    //DP4
    t4.y = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4038
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 4039
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 4040
    //DP4
    t4.z = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4041
    //ADD
    t5.xyz = t3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 4042
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 4043
    //DP4
    t4.w = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4044
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 4045
    //SQRT
    t16 = sqrt(t8.x);
    //Instruction 4046
    //MUL
    t16 = t16 * _LightPositionRange.w;
    //Instruction 4047
    //MUL
    t16 = t16 * 0.970000029;
    //Instruction 4048
    //LT
    tb4 = lessThan(t4, vec4(t16));
    //Instruction 4049
    //MOVC
    t4.x = (tb4.x) ? _LightShadowData.x : float(1.0);
    t4.y = (tb4.y) ? _LightShadowData.x : float(1.0);
    t4.z = (tb4.z) ? _LightShadowData.x : float(1.0);
    t4.w = (tb4.w) ? _LightShadowData.x : float(1.0);
    //Instruction 4050
    //DP4
    t16_6.x = dot(t4, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 4051
    //MUL
    t16 = t8.x * _LightPos.w;
    //Instruction 4052
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 4053
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 4054
    //SAMPLE
    t10_8 = texture(_LightTextureB0, vec2(t16)).w;
    //Instruction 4055
    //MUL
    t16_8 = t16_6.x * t10_8;
    //Instruction 4056
    //MUL
    t4.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 4057
    //MAD
    t4.xyz = _LightMatrix0[0].xyz * t2.xxx + t4.xyz;
    //Instruction 4058
    //MAD
    t4.xyz = _LightMatrix0[2].xyz * t2.www + t4.xyz;
    //Instruction 4059
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyz;
    //Instruction 4060
    //SAMPLE
    t10_16 = texture(_LightTexture0, t4.xyz).w;
    //Instruction 4061
    //MUL
    t16_8 = t10_16 * t16_8;
    //Instruction 4062
    //MOV
    t16_16 = t16_8;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    //Instruction 4063
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4064
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4065
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 4066
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 4067
    //MAD
    t0.x = (-t8.z) * t0.x + t2.x;
    //Instruction 4068
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 4069
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 4070
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4071
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 4072
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 4073
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t24) + (-t3.xyz);
    //Instruction 4074
    //DP3
    t24 = dot(t2.xyz, t2.xyz);
    //Instruction 4075
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 4076
    //MUL
    t2.xyz = vec3(t24) * t2.xyz;
    //Instruction 4077
    //MAD
    t16_6.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4078
    //MUL
    t16_30 = t10_1.w * 128.0;
    //Instruction 4079
    //DP3
    t16_7 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 4080
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 4081
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_7);
    //Instruction 4082
    //DP3
    t16_7 = dot(t2.xyz, t16_6.xyz);
    //Instruction 4083
    //DP3
    t16_6.x = dot((-t3.xyz), t16_6.xyz);
    //Instruction 4084
    //MAX
    t16_6.x = max(t16_6.x, 0.0);
    //Instruction 4085
    //MUL
    t16_8 = t16_8 * t16_6.x;
    //Instruction 4086
    //MUL
    t1.xyz = vec3(t16_8) * _LightColor.xyz;
    //Instruction 4087
    //MAX
    t16_6.x = max(t16_7, 0.0);
    //Instruction 4088
    //LOG
    t16_6.x = log2(t16_6.x);
    //Instruction 4089
    //MUL
    t16_6.x = t16_6.x * t16_30;
    //Instruction 4090
    //EXP
    t16_6.x = exp2(t16_6.x);
    //Instruction 4091
    //MUL
    t16_8 = t16_16 * t16_6.x;
    //Instruction 4092
    //DP3
    t16_6.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 4093
    //MUL
    t1.w = t16_8 * t16_6.x;
    //Instruction 4094
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 4095
    //MOV
    SV_Target0 = t0;
    //Instruction 4096
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (0.0, dot (h_4, tmpvar_18)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_20;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_18)
  ) * atten_6));
  mediump vec3 c_21;
  c_21 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_21, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_22);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 2756
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2757
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2758
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2759
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2760
    //MOV
    gl_Position = t0;
    //Instruction 2761
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 2762
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 2763
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 2764
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 2765
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 2766
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2767
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2768
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2769
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 2770
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 2771
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 2772
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp float t10_1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_10;
highp float t12;
highp float t13;
highp float t18;
mediump float t16_22;
void main()
{
    //Instruction 2707
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2708
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2709
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2710
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 2711
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 2712
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 2713
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 2714
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 2715
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 2716
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 2717
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 2718
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2719
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2720
    //DP3
    t0.x = dot(t2.xyw, t2.xyw);
    //Instruction 2721
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2722
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 2723
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 2724
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 2725
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 2726
    //MAD
    t6.xyz = (-t3.xyz) * t6.xxx + (-_LightDir.xyz);
    //Instruction 2727
    //DP3
    t13 = dot(t6.xyz, t6.xyz);
    //Instruction 2728
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 2729
    //MUL
    t6.xyz = t6.xyz * vec3(t13);
    //Instruction 2730
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 2731
    //SAMPLE
    t10_1 = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 2732
    //MAD
    t16_4.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2733
    //MUL
    t16_22 = t10_2.w * 128.0;
    //Instruction 2734
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 2735
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 2736
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 2737
    //DP3
    t16_5 = dot(t6.xyz, t16_4.xyz);
    //Instruction 2738
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 2739
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 2740
    //MAX
    t16_10 = max(t16_5, 0.0);
    //Instruction 2741
    //LOG
    t16_10 = log2(t16_10);
    //Instruction 2742
    //MUL
    t16_10 = t16_10 * t16_22;
    //Instruction 2743
    //EXP
    t16_10 = exp2(t16_10);
    //Instruction 2744
    //MAD
    t6.x = t0.x * _LightShadowData.z + _LightShadowData.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 2745
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2746
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2747
    //ADD
    t6.x = t6.x + t10_1;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 2748
    //MUL
    t12 = t6.x * t16_10;
    //Instruction 2749
    //MUL
    t6.x = t6.x * t16_4.x;
    //Instruction 2750
    //MUL
    t1.xyz = t6.xxx * _LightColor.xyz;
    //Instruction 2751
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 2752
    //MUL
    t1.w = t12 * t16_4.x;
    //Instruction 2753
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 2754
    //MOV
    SV_Target0 = t0;
    //Instruction 2755
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_10;
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (_LightMatrix0 * tmpvar_17).xy;
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3609
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3610
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3611
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3612
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3613
    //MOV
    gl_Position = t0;
    //Instruction 3614
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3615
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3616
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3617
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3618
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3619
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3620
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3621
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3622
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3623
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3624
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3625
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp float t6;
highp vec2 t12;
lowp float t10_12;
highp float t18;
mediump float t16_22;
void main()
{
    //Instruction 3553
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3554
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3555
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3556
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3557
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3558
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3559
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 3560
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3561
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3562
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3563
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3564
    //ADD
    t3.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3565
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3566
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3567
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 3568
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3569
    //MAD
    t6 = t0.x * _LightShadowData.z + _LightShadowData.w;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 3570
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3571
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3572
    //SAMPLE
    t10_12 = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 3573
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 3574
    //ADD
    t6 = t6 + t10_12;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 3575
    //MUL
    t12.xy = t2.yy * _LightMatrix0[1].xy;
    //Instruction 3576
    //MAD
    t12.xy = _LightMatrix0[0].xy * t2.xx + t12.xy;
    //Instruction 3577
    //MAD
    t12.xy = _LightMatrix0[2].xy * t2.ww + t12.xy;
    //Instruction 3578
    //ADD
    t2.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3579
    //ADD
    t12.xy = t12.xy + _LightMatrix0[3].xy;
    //Instruction 3580
    //SAMPLE
    t10_12 = texture(_LightTexture0, t12.xy).w;
    //Instruction 3581
    //MUL
    t6 = t10_12 * t6;
    //Instruction 3582
    //MOV
    t12.x = t6;
    t12.x = clamp(t12.x, 0.0, 1.0);
    //Instruction 3583
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3584
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3585
    //MAD
    t2.xyz = (-t2.xyz) * vec3(t18) + (-_LightDir.xyz);
    //Instruction 3586
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3587
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3588
    //MUL
    t2.xyz = vec3(t18) * t2.xyz;
    //Instruction 3589
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3590
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 3591
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3592
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3593
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3594
    //DP3
    t16_5 = dot(t2.xyz, t16_4.xyz);
    //Instruction 3595
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3596
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3597
    //MUL
    t6 = t6 * t16_4.x;
    //Instruction 3598
    //MUL
    t1.xyz = vec3(t6) * _LightColor.xyz;
    //Instruction 3599
    //MAX
    t16_4.x = max(t16_5, 0.0);
    //Instruction 3600
    //LOG
    t16_4.x = log2(t16_4.x);
    //Instruction 3601
    //MUL
    t16_4.x = t16_4.x * t16_22;
    //Instruction 3602
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3603
    //MUL
    t6 = t12.x * t16_4.x;
    //Instruction 3604
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3605
    //MUL
    t1.w = t6 * t16_4.x;
    //Instruction 3606
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3607
    //MOV
    SV_Target0 = t0;
    //Instruction 3608
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "SHADOWSUPPORT"="true" }
  ZWrite Off
  Blend One One
  GpuProgramID 155461
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(normalize(tmpvar_12));
  lightDir_7 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTextureB0, vec2(tmpvar_14)).w;
  atten_6 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = pow (max (0.0, dot (h_4, tmpvar_17)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_19;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_17)
  ) * atten_6));
  mediump vec3 c_20;
  c_20 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_20, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_21);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4124
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4125
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4126
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4127
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4128
    //MOV
    gl_Position = t0;
    //Instruction 4129
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4130
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4131
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4132
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4133
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4134
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4135
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4136
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4137
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4138
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4139
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4140
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
highp float t14;
mediump float t16_14;
lowp float t10_14;
highp float t21;
mediump float t16_26;
void main()
{
    //Instruction 4071
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4072
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 4073
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 4074
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 4075
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 4076
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4077
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4078
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 4079
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 4080
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 4081
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 4082
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 4083
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4084
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 4085
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 4086
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 4087
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4088
    //DP3
    t14 = dot(t2.xyw, t2.xyw);
    //Instruction 4089
    //SQRT
    t14 = sqrt(t14);
    //Instruction 4090
    //MAD
    t0.x = (-t7.z) * t0.x + t14;
    //Instruction 4091
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 4092
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 4093
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4094
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 4095
    //RSQ
    t21 = inversesqrt(t14);
    //Instruction 4096
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 4097
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 4098
    //MUL
    t2.xyz = vec3(t21) * t4.xyz;
    //Instruction 4099
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t2.xyz);
    //Instruction 4100
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 4101
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 4102
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 4103
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4104
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 4105
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4106
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 4107
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 4108
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 4109
    //DP3
    t16_5.x = dot((-t2.xyz), t16_5.xyz);
    //Instruction 4110
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 4111
    //MUL
    t16_7 = t10_14 * t16_5.x;
    //Instruction 4112
    //MOV
    t16_14 = t10_14;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 4113
    //MUL
    t1.yzw = vec3(t16_7) * _LightColor.xyz;
    //Instruction 4114
    //MAX
    t16_5.x = max(t16_6, 0.0);
    //Instruction 4115
    //LOG
    t16_5.x = log2(t16_5.x);
    //Instruction 4116
    //MUL
    t16_5.x = t16_5.x * t16_26;
    //Instruction 4117
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 4118
    //MUL
    t16_7 = t16_14 * t16_5.x;
    //Instruction 4119
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 4120
    //MUL
    t1.x = t16_7 * t16_5.x;
    //Instruction 4121
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 4122
    //MOV
    SV_Target0 = t0;
    //Instruction 4123
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  mediump vec3 lightDir_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_7).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_9;
  tmpvar_9 = (_CameraToWorld * tmpvar_8).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = -(_LightDir.xyz);
  lightDir_6 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_CameraNormalsTexture, tmpvar_7);
  nspec_5 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((lightDir_6 - normalize(
    (tmpvar_9 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = pow (max (0.0, dot (h_4, tmpvar_13)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_15;
  spec_3 = (spec_3 * clamp (1.0, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * max (0.0, dot (lightDir_6, tmpvar_13)));
  mediump vec3 c_16;
  c_16 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_16, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_17;
  tmpvar_17 = clamp ((1.0 - (
    (mix (tmpvar_8.z, sqrt(dot (tmpvar_10, tmpvar_10)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_17);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3670
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3671
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3672
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3673
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3674
    //MOV
    gl_Position = t0;
    //Instruction 3675
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3676
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3677
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3678
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3679
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3680
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3681
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3682
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3683
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3684
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3685
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3686
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_10;
highp float t12;
mediump float t16_22;
void main()
{
    //Instruction 3626
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3627
    //SAMPLE
    t12 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3628
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3629
    //MAD
    t0.x = _ZBufferParams.x * t12 + _ZBufferParams.y;
    //Instruction 3630
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3631
    //DIV
    t6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3632
    //MUL
    t6.xyz = t6.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3633
    //MUL
    t2.xyz = t0.xxx * t6.xyz;
    //Instruction 3634
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3635
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3636
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3637
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3638
    //ADD
    t3.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3639
    //ADD
    t2.xyw = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3640
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3641
    //SQRT
    t6.x = sqrt(t6.x);
    //Instruction 3642
    //MAD
    t0.x = (-t6.z) * t0.x + t6.x;
    //Instruction 3643
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3644
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3645
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3646
    //DP3
    t6.x = dot(t2.xyw, t2.xyw);
    //Instruction 3647
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3648
    //MAD
    t6.xyz = (-t2.xyw) * t6.xxx + (-_LightDir.xyz);
    //Instruction 3649
    //DP3
    t2.x = dot(t6.xyz, t6.xyz);
    //Instruction 3650
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 3651
    //MUL
    t6.xyz = t6.xyz * t2.xxx;
    //Instruction 3652
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3653
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 3654
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3655
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3656
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3657
    //DP3
    t16_5 = dot(t6.xyz, t16_4.xyz);
    //Instruction 3658
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3659
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3660
    //MUL
    t1.yzw = t16_4.xxx * _LightColor.xyz;
    //Instruction 3661
    //MAX
    t16_4.x = max(t16_5, 0.0);
    //Instruction 3662
    //LOG
    t16_4.x = log2(t16_4.x);
    //Instruction 3663
    //MUL
    t16_4.x = t16_4.x * t16_22;
    //Instruction 3664
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3665
    //DP3
    t16_10 = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3666
    //MUL
    t1.x = t16_10 * t16_4.x;
    //Instruction 3667
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3668
    //MOV
    SV_Target0 = t0;
    //Instruction 3669
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  lightDir_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_10;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2DProj (_LightTexture0, tmpvar_15).w;
  atten_6 = tmpvar_16;
  atten_6 = (atten_6 * float((tmpvar_15.w < 0.0)));
  highp float tmpvar_17;
  tmpvar_17 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(tmpvar_17));
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = pow (max (0.0, dot (h_4, tmpvar_20)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_22;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_20)
  ) * atten_6));
  mediump vec3 c_23;
  c_23 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_23, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_24);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 2836
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2837
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2838
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2839
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2840
    //MOV
    gl_Position = t0;
    //Instruction 2841
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 2842
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 2843
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 2844
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 2845
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 2846
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2847
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2848
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2849
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 2850
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 2851
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 2852
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
lowp float t10_7;
mediump float t16_12;
highp float t14;
lowp float t10_14;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 2773
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2774
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 2775
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 2776
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 2777
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 2778
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2779
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2780
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 2781
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 2782
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 2783
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 2784
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 2785
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2786
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2787
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2788
    //ADD
    t4.xyz = (-t2.xyw) + _LightPos.xyz;
    //Instruction 2789
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 2790
    //RSQ
    t24 = inversesqrt(t14);
    //Instruction 2791
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 2792
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 2793
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 2794
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + t4.xyz;
    //Instruction 2795
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2796
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2797
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2798
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2799
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 2800
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2801
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 2802
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 2803
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 2804
    //DP3
    t16_5.x = dot(t4.xyz, t16_5.xyz);
    //Instruction 2805
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 2806
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 2807
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 2808
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 2809
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 2810
    //MUL
    t1.xyz = t2.yyy * _LightMatrix0[1].xyw;
    //Instruction 2811
    //MAD
    t1.xyz = _LightMatrix0[0].xyw * t2.xxx + t1.xyz;
    //Instruction 2812
    //MAD
    t1.xyz = _LightMatrix0[2].xyw * t2.www + t1.xyz;
    //Instruction 2813
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2814
    //DP3
    t7.x = dot(t2.xyw, t2.xyw);
    //Instruction 2815
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 2816
    //MAD
    t0.x = (-t7.z) * t0.x + t7.x;
    //Instruction 2817
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 2818
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2819
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2820
    //ADD
    t1.xyz = t1.xyz + _LightMatrix0[3].xyw;
    //Instruction 2821
    //DIV
    t7.xz = t1.xy / t1.zz;
    //Instruction 2822
    //LT
    tb1 = t1.z<0.0;
    //Instruction 2823
    //AND
    t1.x = tb1 ? 1.0 : float(0.0);
    //Instruction 2824
    //SAMPLE
    t10_7 = texture(_LightTexture0, t7.xz).w;
    //Instruction 2825
    //MUL
    t7.x = t1.x * t10_7;
    //Instruction 2826
    //MUL
    t7.x = t10_14 * t7.x;
    //Instruction 2827
    //MOV
    t14 = t7.x;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 2828
    //MUL
    t7.x = t7.x * t16_5.x;
    //Instruction 2829
    //MUL
    t1.yzw = t7.xxx * _LightColor.xyz;
    //Instruction 2830
    //MUL
    t7.x = t14 * t16_12;
    //Instruction 2831
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 2832
    //MUL
    t1.x = t7.x * t16_5.x;
    //Instruction 2833
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 2834
    //MOV
    SV_Target0 = t0;
    //Instruction 2835
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(normalize(tmpvar_12));
  lightDir_7 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (dot (tmpvar_12, tmpvar_12) * _LightPos.w);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTextureB0, vec2(tmpvar_14)).w;
  atten_6 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_10;
  lowp vec4 tmpvar_17;
  highp vec3 P_18;
  P_18 = (_LightMatrix0 * tmpvar_16).xyz;
  tmpvar_17 = textureCube (_LightTexture0, P_18);
  atten_6 = (atten_6 * tmpvar_17.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = pow (max (0.0, dot (h_4, tmpvar_20)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_22;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_20)
  ) * atten_6));
  mediump vec3 c_23;
  c_23 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_23, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_24;
  tmpvar_24 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_24);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4200
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4201
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4202
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4203
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4204
    //MOV
    gl_Position = t0;
    //Instruction 4205
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4206
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4207
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4208
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4209
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4210
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4211
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4212
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4213
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4214
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4215
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4216
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
mediump float t16_12;
highp float t14;
mediump float t16_14;
lowp float t10_14;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 4141
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4142
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 4143
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 4144
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 4145
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 4146
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4147
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4148
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 4149
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 4150
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 4151
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 4152
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 4153
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4154
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 4155
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 4156
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 4157
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 4158
    //RSQ
    t24 = inversesqrt(t14);
    //Instruction 4159
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 4160
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 4161
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 4162
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t4.xyz);
    //Instruction 4163
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 4164
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 4165
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 4166
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4167
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 4168
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 4169
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 4170
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 4171
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 4172
    //DP3
    t16_5.x = dot((-t4.xyz), t16_5.xyz);
    //Instruction 4173
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 4174
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 4175
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 4176
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 4177
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 4178
    //MUL
    t1.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 4179
    //MAD
    t1.xyz = _LightMatrix0[0].xyz * t2.xxx + t1.xyz;
    //Instruction 4180
    //MAD
    t1.xyz = _LightMatrix0[2].xyz * t2.www + t1.xyz;
    //Instruction 4181
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4182
    //DP3
    t7.x = dot(t2.xyw, t2.xyw);
    //Instruction 4183
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 4184
    //MAD
    t0.x = (-t7.z) * t0.x + t7.x;
    //Instruction 4185
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 4186
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 4187
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4188
    //ADD
    t1.xyz = t1.xyz + _LightMatrix0[3].xyz;
    //Instruction 4189
    //SAMPLE
    t10_7 = texture(_LightTexture0, t1.xyz).w;
    //Instruction 4190
    //MUL
    t16_7 = t10_7 * t10_14;
    //Instruction 4191
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 4192
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 4193
    //MUL
    t1.yzw = vec3(t16_7) * _LightColor.xyz;
    //Instruction 4194
    //MUL
    t16_7 = t16_14 * t16_12;
    //Instruction 4195
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 4196
    //MUL
    t1.x = t16_7 * t16_5.x;
    //Instruction 4197
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 4198
    //MOV
    SV_Target0 = t0;
    //Instruction 4199
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_10;
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (_LightMatrix0 * tmpvar_13).xy;
  tmpvar_14 = texture2D (_LightTexture0, P_15);
  atten_6 = tmpvar_14.w;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = pow (max (0.0, dot (h_4, tmpvar_17)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_19;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_17)
  ) * atten_6));
  mediump vec3 c_20;
  c_20 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_20, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_21;
  tmpvar_21 = clamp ((1.0 - (
    (mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w) * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_21);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3739
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3740
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3741
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3742
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3743
    //MOV
    gl_Position = t0;
    //Instruction 3744
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3745
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3746
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3747
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3748
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3749
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3750
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3751
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3752
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3753
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3754
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3755
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_6;
lowp float t10_6;
mediump float t16_10;
highp float t12;
mediump float t16_12;
mediump float t16_22;
void main()
{
    //Instruction 3687
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3688
    //SAMPLE
    t12 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3689
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3690
    //MAD
    t0.x = _ZBufferParams.x * t12 + _ZBufferParams.y;
    //Instruction 3691
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3692
    //DIV
    t6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3693
    //MUL
    t6.xyz = t6.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3694
    //MUL
    t2.xyz = t0.xxx * t6.xyz;
    //Instruction 3695
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3696
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3697
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3698
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3699
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3700
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3701
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3702
    //MAD
    t3.xyz = (-t3.xyz) * t6.xxx + (-_LightDir.xyz);
    //Instruction 3703
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3704
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3705
    //MUL
    t3.xyz = t6.xxx * t3.xyz;
    //Instruction 3706
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3707
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 3708
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3709
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3710
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3711
    //DP3
    t16_5 = dot(t3.xyz, t16_4.xyz);
    //Instruction 3712
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3713
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3714
    //MAX
    t16_10 = max(t16_5, 0.0);
    //Instruction 3715
    //LOG
    t16_10 = log2(t16_10);
    //Instruction 3716
    //MUL
    t16_10 = t16_10 * t16_22;
    //Instruction 3717
    //EXP
    t16_10 = exp2(t16_10);
    //Instruction 3718
    //MUL
    t6.xy = t2.yy * _LightMatrix0[1].xy;
    //Instruction 3719
    //MAD
    t6.xy = _LightMatrix0[0].xy * t2.xx + t6.xy;
    //Instruction 3720
    //MAD
    t6.xy = _LightMatrix0[2].xy * t2.ww + t6.xy;
    //Instruction 3721
    //ADD
    t1.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3722
    //DP3
    t1.x = dot(t1.xyz, t1.xyz);
    //Instruction 3723
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 3724
    //MAD
    t0.x = (-t6.z) * t0.x + t1.x;
    //Instruction 3725
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3726
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3727
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3728
    //ADD
    t6.xy = t6.xy + _LightMatrix0[3].xy;
    //Instruction 3729
    //SAMPLE
    t10_6 = texture(_LightTexture0, t6.xy).w;
    //Instruction 3730
    //MOV
    t16_12 = t10_6;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 3731
    //MUL
    t16_6 = t10_6 * t16_4.x;
    //Instruction 3732
    //MUL
    t1.yzw = vec3(t16_6) * _LightColor.xyz;
    //Instruction 3733
    //MUL
    t16_6 = t16_12 * t16_10;
    //Instruction 3734
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3735
    //MUL
    t1.x = t16_6 * t16_4.x;
    //Instruction 3736
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3737
    //MOV
    SV_Target0 = t0;
    //Instruction 3738
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_10;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_World2Shadow[0] * tmpvar_22);
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, tmpvar_23);
  mediump float tmpvar_26;
  if ((tmpvar_25.x < (tmpvar_23.z / tmpvar_23.w))) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  tmpvar_24 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp ((tmpvar_24 + tmpvar_21), 0.0, 1.0);
  tmpvar_20 = tmpvar_27;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (0.0, dot (h_4, tmpvar_29)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_31;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_29)
  ) * atten_6));
  mediump vec3 c_32;
  c_32 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_32, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_33;
  tmpvar_33 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_33);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_10;
  highp vec4 tmpvar_22;
  tmpvar_22 = (unity_World2Shadow[0] * tmpvar_21);
  lowp float tmpvar_23;
  mediump float shadow_24;
  lowp float tmpvar_25;
  tmpvar_25 = shadow2DProjEXT (_ShadowMapTexture, tmpvar_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25;
  shadow_24 = (_LightShadowData.x + (tmpvar_26 * (1.0 - _LightShadowData.x)));
  tmpvar_23 = shadow_24;
  highp float tmpvar_27;
  tmpvar_27 = clamp ((tmpvar_23 + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_20 = tmpvar_27;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (0.0, dot (h_4, tmpvar_29)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_31;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_29)
  ) * atten_6));
  mediump vec3 c_32;
  c_32 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_32, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_33;
  tmpvar_33 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_33);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4188
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4189
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4190
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4191
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4192
    //MOV
    gl_Position = t0;
    //Instruction 4193
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4194
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4195
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4196
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4197
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4198
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4199
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4200
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4201
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4202
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4203
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4204
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec3 t16_0;
highp vec2 t1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
highp vec3 t7;
lowp float t10_7;
highp vec2 t13;
lowp float t10_13;
highp float t15;
bool tb15;
mediump float t16_18;
highp float t19;
lowp float t10_19;
highp float t21;
void main()
{
    //Instruction 4114
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4115
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4116
    //SAMPLE
    t13.x = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 4117
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 4118
    //MAD
    t1.x = _ZBufferParams.x * t13.x + _ZBufferParams.y;
    //Instruction 4119
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 4120
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4121
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4122
    //MUL
    t3.xyz = t1.xxx * t7.xyz;
    //Instruction 4123
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 4124
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 4125
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 4126
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 4127
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 4128
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 4129
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 4130
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 4131
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 4132
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(t4.xy,t4.z);
    t10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 4133
    //MAD
    t16_0.x = t10_7 * t16_0.x + _LightShadowData.x;
    //Instruction 4134
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4135
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 4136
    //SQRT
    t7.x = sqrt(t7.x);
    //Instruction 4137
    //MAD
    t1.x = (-t7.z) * t1.x + t7.x;
    //Instruction 4138
    //MAD
    t1.x = unity_ShadowFadeCenterAndType.w * t1.x + t3.z;
    //Instruction 4139
    //MAD
    t7.x = t1.x * _LightShadowData.z + _LightShadowData.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 4140
    //MAD
    t1.x = t1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 4141
    //ADD
    t1.x = (-t1.x) + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 4142
    //ADD
    t7.x = t16_0.x + t7.x;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 4143
    //MUL
    t4.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 4144
    //MAD
    t4.xyz = _LightMatrix0[0].xyw * t3.xxx + t4.xyz;
    //Instruction 4145
    //MAD
    t4.xyz = _LightMatrix0[2].xyw * t3.www + t4.xyz;
    //Instruction 4146
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyw;
    //Instruction 4147
    //DIV
    t13.xy = t4.xy / t4.zz;
    //Instruction 4148
    //LT
    tb15 = t4.z<0.0;
    //Instruction 4149
    //AND
    t15 = tb15 ? 1.0 : float(0.0);
    //Instruction 4150
    //SAMPLE
    t10_13 = texture(_LightTexture0, t13.xy).w;
    //Instruction 4151
    //MUL
    t13.x = t15 * t10_13;
    //Instruction 4152
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 4153
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4154
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 4155
    //MUL
    t21 = t19 * _LightPos.w;
    //Instruction 4156
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 4157
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 4158
    //SAMPLE
    t10_19 = texture(_LightTextureB0, vec2(t21)).w;
    //Instruction 4159
    //MUL
    t13.x = t10_19 * t13.x;
    //Instruction 4160
    //MUL
    t7.x = t7.x * t13.x;
    //Instruction 4161
    //MOV
    t13.x = t7.x;
    t13.x = clamp(t13.x, 0.0, 1.0);
    //Instruction 4162
    //DP3
    t19 = dot(t3.xyz, t3.xyz);
    //Instruction 4163
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 4164
    //MAD
    t3.xyz = (-t3.xyz) * vec3(t19) + t4.xyz;
    //Instruction 4165
    //DP3
    t19 = dot(t3.xyz, t3.xyz);
    //Instruction 4166
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 4167
    //MUL
    t3.xyz = vec3(t19) * t3.xyz;
    //Instruction 4168
    //MAD
    t16_0.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4169
    //MUL
    t16_18 = t10_2.w * 128.0;
    //Instruction 4170
    //DP3
    t16_5 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 4171
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 4172
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_5);
    //Instruction 4173
    //DP3
    t16_5 = dot(t3.xyz, t16_0.xyz);
    //Instruction 4174
    //DP3
    t16_0.x = dot(t4.xyz, t16_0.xyz);
    //Instruction 4175
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 4176
    //MUL
    t7.x = t7.x * t16_0.x;
    //Instruction 4177
    //MUL
    t2.yzw = t7.xxx * _LightColor.xyz;
    //Instruction 4178
    //MAX
    t16_0.x = max(t16_5, 0.0);
    //Instruction 4179
    //LOG
    t16_0.x = log2(t16_0.x);
    //Instruction 4180
    //MUL
    t16_0.x = t16_0.x * t16_18;
    //Instruction 4181
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 4182
    //MUL
    t7.x = t13.x * t16_0.x;
    //Instruction 4183
    //DP3
    t16_0.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 4184
    //MUL
    t2.x = t16_0.x * t7.x;
    //Instruction 4185
    //MUL
    t0 = t1.xxxx * t2;
    //Instruction 4186
    //MOV
    SV_Target0 = t0;
    //Instruction 4187
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (0.0, dot (h_4, tmpvar_18)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_20;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_18)
  ) * atten_6));
  mediump vec3 c_21;
  c_21 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_21, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_22);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_10;
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (_LightMatrix0 * tmpvar_17).xy;
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp float mydist_17;
  mydist_17 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_18;
  tmpvar_18 = dot (textureCube (_ShadowMapTexture, tmpvar_13), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_19;
  if ((tmpvar_18 < mydist_17)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  atten_6 = (atten_6 * tmpvar_19);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 2914
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2915
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2916
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2917
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2918
    //MOV
    gl_Position = t0;
    //Instruction 2919
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 2920
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 2921
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 2922
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 2923
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 2924
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2925
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2926
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2927
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 2928
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 2929
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 2930
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
bool tb7;
mediump float t16_12;
highp float t14;
mediump float t16_14;
lowp float t10_14;
mediump float t16_19;
highp float t21;
mediump float t16_26;
void main()
{
    //Instruction 2853
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2854
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 2855
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 2856
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 2857
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 2858
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2859
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2860
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 2861
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 2862
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 2863
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 2864
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 2865
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2866
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2867
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2868
    //ADD
    t4.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 2869
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2870
    //DP3
    t14 = dot(t2.xyw, t2.xyw);
    //Instruction 2871
    //SQRT
    t14 = sqrt(t14);
    //Instruction 2872
    //MAD
    t0.x = (-t7.z) * t0.x + t14;
    //Instruction 2873
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 2874
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2875
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 2876
    //DP3
    t14 = dot(t4.xyz, t4.xyz);
    //Instruction 2877
    //RSQ
    t21 = inversesqrt(t14);
    //Instruction 2878
    //MUL
    t2.xyz = vec3(t21) * t4.xyz;
    //Instruction 2879
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 2880
    //DP4
    t21 = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 2881
    //MAD
    t3.xyz = (-t3.xyz) * t7.xxx + (-t2.xyz);
    //Instruction 2882
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2883
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2884
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2885
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2886
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 2887
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 2888
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 2889
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 2890
    //DP3
    t16_6 = dot(t3.xyz, t16_5.xyz);
    //Instruction 2891
    //DP3
    t16_5.x = dot((-t2.xyz), t16_5.xyz);
    //Instruction 2892
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 2893
    //MAX
    t16_12 = max(t16_6, 0.0);
    //Instruction 2894
    //LOG
    t16_12 = log2(t16_12);
    //Instruction 2895
    //MUL
    t16_12 = t16_12 * t16_26;
    //Instruction 2896
    //EXP
    t16_12 = exp2(t16_12);
    //Instruction 2897
    //SQRT
    t7.x = sqrt(t14);
    //Instruction 2898
    //MUL
    t14 = t14 * _LightPos.w;
    //Instruction 2899
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 2900
    //MUL
    t7.x = t7.x * _LightPositionRange.w;
    //Instruction 2901
    //MUL
    t7.x = t7.x * 0.970000029;
    //Instruction 2902
    //LT
    tb7 = t21<t7.x;
    //Instruction 2903
    //MOVC
    t16_19 = (tb7) ? _LightShadowData.x : 1.0;
    //Instruction 2904
    //MUL
    t16_7 = t10_14 * t16_19;
    //Instruction 2905
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 2906
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 2907
    //MUL
    t1.yzw = vec3(t16_7) * _LightColor.xyz;
    //Instruction 2908
    //MUL
    t16_7 = t16_14 * t16_12;
    //Instruction 2909
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 2910
    //MUL
    t1.x = t16_7 * t16_5.x;
    //Instruction 2911
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 2912
    //MOV
    SV_Target0 = t0;
    //Instruction 2913
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp float mydist_17;
  mydist_17 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_18;
  tmpvar_18 = dot (textureCube (_ShadowMapTexture, tmpvar_13), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_19;
  if ((tmpvar_18 < mydist_17)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  atten_6 = (atten_6 * tmpvar_19);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_10;
  lowp vec4 tmpvar_21;
  highp vec3 P_22;
  P_22 = (_LightMatrix0 * tmpvar_20).xyz;
  tmpvar_21 = textureCube (_LightTexture0, P_22);
  atten_6 = (atten_6 * tmpvar_21.w);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (0.0, dot (h_4, tmpvar_24)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_26;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_24)
  ) * atten_6));
  mediump vec3 c_27;
  c_27 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_27, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_28;
  tmpvar_28 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_28);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3823
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3824
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3825
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3826
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3827
    //MOV
    gl_Position = t0;
    //Instruction 3828
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3829
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3830
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3831
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3832
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3833
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3834
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3835
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3836
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3837
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3838
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3839
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump float t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
highp float t14;
mediump float t16_14;
lowp float t10_14;
bool tb14;
highp float t21;
highp float t24;
mediump float t16_26;
void main()
{
    //Instruction 3756
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3757
    //SAMPLE
    t14 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3758
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3759
    //MAD
    t0.x = _ZBufferParams.x * t14 + _ZBufferParams.y;
    //Instruction 3760
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3761
    //DIV
    t7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3762
    //MUL
    t7.xyz = t7.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3763
    //MUL
    t2.xyz = t0.xxx * t7.xyz;
    //Instruction 3764
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3765
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3766
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3767
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3768
    //MUL
    t3.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 3769
    //MAD
    t3.xyz = _LightMatrix0[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3770
    //MAD
    t3.xyz = _LightMatrix0[2].xyz * t2.www + t3.xyz;
    //Instruction 3771
    //ADD
    t3.xyz = t3.xyz + _LightMatrix0[3].xyz;
    //Instruction 3772
    //SAMPLE
    t10_7 = texture(_LightTexture0, t3.xyz).w;
    //Instruction 3773
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3774
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t3.xyz);
    //Instruction 3775
    //DP4
    t14 = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3776
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 3777
    //SQRT
    t4.x = sqrt(t24);
    //Instruction 3778
    //MUL
    t4.x = t4.x * _LightPositionRange.w;
    //Instruction 3779
    //MUL
    t4.x = t4.x * 0.970000029;
    //Instruction 3780
    //LT
    tb14 = t14<t4.x;
    //Instruction 3781
    //MOVC
    t16_5.x = (tb14) ? _LightShadowData.x : 1.0;
    //Instruction 3782
    //MUL
    t14 = t24 * _LightPos.w;
    //Instruction 3783
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3784
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 3785
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t14)).w;
    //Instruction 3786
    //MUL
    t16_14 = t16_5.x * t10_14;
    //Instruction 3787
    //MUL
    t16_7 = t10_7 * t16_14;
    //Instruction 3788
    //MOV
    t16_14 = t16_7;
    t16_14 = clamp(t16_14, 0.0, 1.0);
    //Instruction 3789
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3790
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3791
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 3792
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 3793
    //MAD
    t0.x = (-t7.z) * t0.x + t2.x;
    //Instruction 3794
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3795
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3796
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3797
    //DP3
    t21 = dot(t4.xyz, t4.xyz);
    //Instruction 3798
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3799
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t21) + (-t3.xyz);
    //Instruction 3800
    //DP3
    t21 = dot(t2.xyz, t2.xyz);
    //Instruction 3801
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3802
    //MUL
    t2.xyz = vec3(t21) * t2.xyz;
    //Instruction 3803
    //MAD
    t16_5.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3804
    //MUL
    t16_26 = t10_1.w * 128.0;
    //Instruction 3805
    //DP3
    t16_6 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 3806
    //RSQ
    t16_6 = inversesqrt(t16_6);
    //Instruction 3807
    //MUL
    t16_5.xyz = t16_5.xyz * vec3(t16_6);
    //Instruction 3808
    //DP3
    t16_6 = dot(t2.xyz, t16_5.xyz);
    //Instruction 3809
    //DP3
    t16_5.x = dot((-t3.xyz), t16_5.xyz);
    //Instruction 3810
    //MAX
    t16_5.x = max(t16_5.x, 0.0);
    //Instruction 3811
    //MUL
    t16_7 = t16_7 * t16_5.x;
    //Instruction 3812
    //MUL
    t1.yzw = vec3(t16_7) * _LightColor.xyz;
    //Instruction 3813
    //MAX
    t16_5.x = max(t16_6, 0.0);
    //Instruction 3814
    //LOG
    t16_5.x = log2(t16_5.x);
    //Instruction 3815
    //MUL
    t16_5.x = t16_5.x * t16_26;
    //Instruction 3816
    //EXP
    t16_5.x = exp2(t16_5.x);
    //Instruction 3817
    //MUL
    t16_7 = t16_14 * t16_5.x;
    //Instruction 3818
    //DP3
    t16_5.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3819
    //MUL
    t1.x = t16_7 * t16_5.x;
    //Instruction 3820
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3821
    //MOV
    SV_Target0 = t0;
    //Instruction 3822
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_10;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_World2Shadow[0] * tmpvar_22);
  lowp float tmpvar_24;
  highp vec4 shadowVals_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_23.xyz / tmpvar_23.w);
  shadowVals_25.x = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_25.y = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_25.z = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_25.w = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_25, tmpvar_26.zzzz);
  mediump vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  mediump float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  mediump float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  mediump float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  mediump vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  mediump float tmpvar_34;
  tmpvar_34 = dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_24 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp ((tmpvar_24 + tmpvar_21), 0.0, 1.0);
  tmpvar_20 = tmpvar_35;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = pow (max (0.0, dot (h_4, tmpvar_37)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_39;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_37)
  ) * atten_6));
  mediump vec3 c_40;
  c_40 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_40, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_41);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp mat4 unity_World2Shadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightPos.xyz - tmpvar_10);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  lightDir_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_10;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_LightTexture0, tmpvar_16).w;
  atten_6 = tmpvar_17;
  atten_6 = (atten_6 * float((tmpvar_16.w < 0.0)));
  highp float tmpvar_18;
  tmpvar_18 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  atten_6 = (atten_6 * tmpvar_19.w);
  mediump float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_10;
  highp vec4 tmpvar_22;
  tmpvar_22 = (unity_World2Shadow[0] * tmpvar_21);
  lowp float tmpvar_23;
  mediump vec4 shadows_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_22.xyz / tmpvar_22.w);
  highp vec3 coord_26;
  coord_26 = (tmpvar_25 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_27;
  tmpvar_27 = shadow2DEXT (_ShadowMapTexture, coord_26);
  shadows_24.x = tmpvar_27;
  highp vec3 coord_28;
  coord_28 = (tmpvar_25 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_29;
  tmpvar_29 = shadow2DEXT (_ShadowMapTexture, coord_28);
  shadows_24.y = tmpvar_29;
  highp vec3 coord_30;
  coord_30 = (tmpvar_25 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_31;
  tmpvar_31 = shadow2DEXT (_ShadowMapTexture, coord_30);
  shadows_24.z = tmpvar_31;
  highp vec3 coord_32;
  coord_32 = (tmpvar_25 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_33;
  tmpvar_33 = shadow2DEXT (_ShadowMapTexture, coord_32);
  shadows_24.w = tmpvar_33;
  shadows_24 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  mediump float tmpvar_34;
  tmpvar_34 = dot (shadows_24, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_23 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp ((tmpvar_23 + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_20 = tmpvar_35;
  atten_6 = (atten_6 * tmpvar_20);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = pow (max (0.0, dot (h_4, tmpvar_37)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_39;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_37)
  ) * atten_6));
  mediump vec3 c_40;
  c_40 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_40, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_41);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3013
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3014
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3015
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3016
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3017
    //MOV
    gl_Position = t0;
    //Instruction 3018
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3019
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3020
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3021
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3022
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3023
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3024
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3025
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3026
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3027
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3028
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3029
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec4 t16_0;
highp vec2 t1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump float t16_7;
highp vec3 t9;
mediump float t16_9;
highp vec2 t17;
lowp float t10_17;
highp float t19;
bool tb19;
mediump float t16_24;
highp float t25;
lowp float t10_25;
highp float t27;
void main()
{
    //Instruction 2931
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2932
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 2933
    //SAMPLE
    t17.x = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 2934
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 2935
    //MAD
    t1.x = _ZBufferParams.x * t17.x + _ZBufferParams.y;
    //Instruction 2936
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 2937
    //DIV
    t9.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 2938
    //MUL
    t9.xyz = t9.xxx * vs_TEXCOORD1.xyz;
    //Instruction 2939
    //MUL
    t3.xyz = t1.xxx * t9.xyz;
    //Instruction 2940
    //MUL
    t4.xyz = t3.yyy * _CameraToWorld[1].xyz;
    //Instruction 2941
    //MAD
    t3.xyw = _CameraToWorld[0].xyz * t3.xxx + t4.xyz;
    //Instruction 2942
    //MAD
    t3.xyw = _CameraToWorld[2].xyz * t3.zzz + t3.xyw;
    //Instruction 2943
    //ADD
    t3.xyw = t3.xyw + _CameraToWorld[3].xyz;
    //Instruction 2944
    //MUL
    t4 = t3.yyyy * unity_World2Shadow[0][1];
    //Instruction 2945
    //MAD
    t4 = unity_World2Shadow[0][0] * t3.xxxx + t4;
    //Instruction 2946
    //MAD
    t4 = unity_World2Shadow[0][2] * t3.wwww + t4;
    //Instruction 2947
    //ADD
    t4 = t4 + unity_World2Shadow[0][3];
    //Instruction 2948
    //DIV
    t4.xyz = t4.xyz / t4.www;
    //Instruction 2949
    //ADD
    t5.xyz = t4.xyz + _ShadowOffsets[0].xyz;
    //Instruction 2950
    //SAMPLE_C_LZ
    vec3 txVec8 = vec3(t5.xy,t5.z);
    t5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    //Instruction 2951
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[1].xyz;
    //Instruction 2952
    //SAMPLE_C_LZ
    vec3 txVec9 = vec3(t6.xy,t6.z);
    t5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    //Instruction 2953
    //ADD
    t6.xyz = t4.xyz + _ShadowOffsets[2].xyz;
    //Instruction 2954
    //ADD
    t4.xyz = t4.xyz + _ShadowOffsets[3].xyz;
    //Instruction 2955
    //SAMPLE_C_LZ
    vec3 txVec10 = vec3(t4.xy,t4.z);
    t5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    //Instruction 2956
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(t6.xy,t6.z);
    t5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 2957
    //MAD
    t16_0 = t5 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 2958
    //DP4
    t16_9 = dot(t16_0, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 2959
    //ADD
    t4.xyz = t3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 2960
    //DP3
    t17.x = dot(t4.xyz, t4.xyz);
    //Instruction 2961
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 2962
    //MAD
    t1.x = (-t9.z) * t1.x + t17.x;
    //Instruction 2963
    //MAD
    t1.x = unity_ShadowFadeCenterAndType.w * t1.x + t3.z;
    //Instruction 2964
    //MAD
    t17.x = t1.x * _LightShadowData.z + _LightShadowData.w;
    t17.x = clamp(t17.x, 0.0, 1.0);
    //Instruction 2965
    //MAD
    t1.x = t1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 2966
    //ADD
    t1.x = (-t1.x) + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 2967
    //ADD
    t9.x = t17.x + t16_9;
    t9.x = clamp(t9.x, 0.0, 1.0);
    //Instruction 2968
    //MUL
    t4.xyz = t3.yyy * _LightMatrix0[1].xyw;
    //Instruction 2969
    //MAD
    t4.xyz = _LightMatrix0[0].xyw * t3.xxx + t4.xyz;
    //Instruction 2970
    //MAD
    t4.xyz = _LightMatrix0[2].xyw * t3.www + t4.xyz;
    //Instruction 2971
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyw;
    //Instruction 2972
    //DIV
    t17.xy = t4.xy / t4.zz;
    //Instruction 2973
    //LT
    tb19 = t4.z<0.0;
    //Instruction 2974
    //AND
    t19 = tb19 ? 1.0 : float(0.0);
    //Instruction 2975
    //SAMPLE
    t10_17 = texture(_LightTexture0, t17.xy).w;
    //Instruction 2976
    //MUL
    t17.x = t19 * t10_17;
    //Instruction 2977
    //ADD
    t4.xyz = (-t3.xyw) + _LightPos.xyz;
    //Instruction 2978
    //ADD
    t3.xyz = t3.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2979
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 2980
    //MUL
    t27 = t25 * _LightPos.w;
    //Instruction 2981
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 2982
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 2983
    //SAMPLE
    t10_25 = texture(_LightTextureB0, vec2(t27)).w;
    //Instruction 2984
    //MUL
    t17.x = t10_25 * t17.x;
    //Instruction 2985
    //MUL
    t9.x = t9.x * t17.x;
    //Instruction 2986
    //MOV
    t17.x = t9.x;
    t17.x = clamp(t17.x, 0.0, 1.0);
    //Instruction 2987
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 2988
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 2989
    //MAD
    t3.xyz = (-t3.xyz) * vec3(t25) + t4.xyz;
    //Instruction 2990
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 2991
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 2992
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 2993
    //MAD
    t16_0.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2994
    //MUL
    t16_24 = t10_2.w * 128.0;
    //Instruction 2995
    //DP3
    t16_7 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2996
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 2997
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_7);
    //Instruction 2998
    //DP3
    t16_7 = dot(t3.xyz, t16_0.xyz);
    //Instruction 2999
    //DP3
    t16_0.x = dot(t4.xyz, t16_0.xyz);
    //Instruction 3000
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 3001
    //MUL
    t9.x = t9.x * t16_0.x;
    //Instruction 3002
    //MUL
    t2.yzw = t9.xxx * _LightColor.xyz;
    //Instruction 3003
    //MAX
    t16_0.x = max(t16_7, 0.0);
    //Instruction 3004
    //LOG
    t16_0.x = log2(t16_0.x);
    //Instruction 3005
    //MUL
    t16_0.x = t16_0.x * t16_24;
    //Instruction 3006
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 3007
    //MUL
    t9.x = t17.x * t16_0.x;
    //Instruction 3008
    //DP3
    t16_0.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3009
    //MUL
    t2.x = t16_0.x * t9.x;
    //Instruction 3010
    //MUL
    t0 = t1.xxxx * t2;
    //Instruction 3011
    //MOV
    SV_Target0 = t0;
    //Instruction 3012
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_17.x = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.y = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.z = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.w = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_20;
  tmpvar_20 = _LightShadowData.xxxx;
  mediump float tmpvar_21;
  if (tmpvar_19.x) {
    tmpvar_21 = tmpvar_20.x;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump float tmpvar_22;
  if (tmpvar_19.y) {
    tmpvar_22 = tmpvar_20.y;
  } else {
    tmpvar_22 = 1.0;
  };
  mediump float tmpvar_23;
  if (tmpvar_19.z) {
    tmpvar_23 = tmpvar_20.z;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  if (tmpvar_19.w) {
    tmpvar_24 = tmpvar_20.w;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25.x = tmpvar_21;
  tmpvar_25.y = tmpvar_22;
  tmpvar_25.z = tmpvar_23;
  tmpvar_25.w = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec4(0.25, 0.25, 0.25, 0.25));
  atten_6 = (atten_6 * tmpvar_26);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (0.0, dot (h_4, tmpvar_28)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_30;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_28)
  ) * atten_6));
  mediump vec3 c_31;
  c_31 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_31, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_32;
  tmpvar_32 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_32);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3912
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3913
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3914
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3915
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3916
    //MOV
    gl_Position = t0;
    //Instruction 3917
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3918
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3919
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3920
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3921
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3922
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3923
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3924
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3925
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3926
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3927
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3928
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
bvec4 tb4;
highp vec4 t5;
mediump vec3 t16_6;
mediump float t16_7;
highp vec3 t8;
mediump float t16_8;
lowp float t10_8;
highp float t16;
mediump float t16_16;
highp float t24;
mediump float t16_30;
void main()
{
    //Instruction 3840
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3841
    //SAMPLE
    t16 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 3842
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 3843
    //MAD
    t0.x = _ZBufferParams.x * t16 + _ZBufferParams.y;
    //Instruction 3844
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 3845
    //DIV
    t8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3846
    //MUL
    t8.xyz = t8.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3847
    //MUL
    t2.xyz = t0.xxx * t8.xyz;
    //Instruction 3848
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3849
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3850
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3851
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3852
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 3853
    //ADD
    t4.xyz = t3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 3854
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 3855
    //DP4
    t4.x = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3856
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 3857
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3858
    //DP4
    t4.y = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3859
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 3860
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3861
    //DP4
    t4.z = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3862
    //ADD
    t5.xyz = t3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 3863
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 3864
    //DP4
    t4.w = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 3865
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 3866
    //SQRT
    t16 = sqrt(t8.x);
    //Instruction 3867
    //MUL
    t16 = t16 * _LightPositionRange.w;
    //Instruction 3868
    //MUL
    t16 = t16 * 0.970000029;
    //Instruction 3869
    //LT
    tb4 = lessThan(t4, vec4(t16));
    //Instruction 3870
    //MOVC
    t4.x = (tb4.x) ? _LightShadowData.x : float(1.0);
    t4.y = (tb4.y) ? _LightShadowData.x : float(1.0);
    t4.z = (tb4.z) ? _LightShadowData.x : float(1.0);
    t4.w = (tb4.w) ? _LightShadowData.x : float(1.0);
    //Instruction 3871
    //DP4
    t16_6.x = dot(t4, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 3872
    //MUL
    t16 = t8.x * _LightPos.w;
    //Instruction 3873
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 3874
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 3875
    //SAMPLE
    t10_8 = texture(_LightTextureB0, vec2(t16)).w;
    //Instruction 3876
    //MUL
    t16_8 = t16_6.x * t10_8;
    //Instruction 3877
    //MOV
    t16_16 = t16_8;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    //Instruction 3878
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3879
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3880
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 3881
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 3882
    //MAD
    t0.x = (-t8.z) * t0.x + t2.x;
    //Instruction 3883
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3884
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3885
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3886
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 3887
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3888
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t24) + (-t3.xyz);
    //Instruction 3889
    //DP3
    t24 = dot(t2.xyz, t2.xyz);
    //Instruction 3890
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3891
    //MUL
    t2.xyz = vec3(t24) * t2.xyz;
    //Instruction 3892
    //MAD
    t16_6.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3893
    //MUL
    t16_30 = t10_1.w * 128.0;
    //Instruction 3894
    //DP3
    t16_7 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 3895
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 3896
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_7);
    //Instruction 3897
    //DP3
    t16_7 = dot(t2.xyz, t16_6.xyz);
    //Instruction 3898
    //DP3
    t16_6.x = dot((-t3.xyz), t16_6.xyz);
    //Instruction 3899
    //MAX
    t16_6.x = max(t16_6.x, 0.0);
    //Instruction 3900
    //MUL
    t16_8 = t16_8 * t16_6.x;
    //Instruction 3901
    //MUL
    t1.yzw = vec3(t16_8) * _LightColor.xyz;
    //Instruction 3902
    //MAX
    t16_6.x = max(t16_7, 0.0);
    //Instruction 3903
    //LOG
    t16_6.x = log2(t16_6.x);
    //Instruction 3904
    //MUL
    t16_6.x = t16_6.x * t16_30;
    //Instruction 3905
    //EXP
    t16_6.x = exp2(t16_6.x);
    //Instruction 3906
    //MUL
    t16_8 = t16_16 * t16_6.x;
    //Instruction 3907
    //DP3
    t16_6.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3908
    //MUL
    t1.x = t16_8 * t16_6.x;
    //Instruction 3909
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3910
    //MOV
    SV_Target0 = t0;
    //Instruction 3911
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightPos;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_10 - _LightPos.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = -(normalize(tmpvar_13));
  lightDir_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (dot (tmpvar_13, tmpvar_13) * _LightPos.w);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15)).w;
  atten_6 = tmpvar_16;
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (tmpvar_13, tmpvar_13)
  ) * _LightPositionRange.w) * 0.97);
  shadowVals_17.x = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.y = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.z = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVals_17.w = dot (textureCube (_ShadowMapTexture, (tmpvar_13 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_20;
  tmpvar_20 = _LightShadowData.xxxx;
  mediump float tmpvar_21;
  if (tmpvar_19.x) {
    tmpvar_21 = tmpvar_20.x;
  } else {
    tmpvar_21 = 1.0;
  };
  mediump float tmpvar_22;
  if (tmpvar_19.y) {
    tmpvar_22 = tmpvar_20.y;
  } else {
    tmpvar_22 = 1.0;
  };
  mediump float tmpvar_23;
  if (tmpvar_19.z) {
    tmpvar_23 = tmpvar_20.z;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  if (tmpvar_19.w) {
    tmpvar_24 = tmpvar_20.w;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump vec4 tmpvar_25;
  tmpvar_25.x = tmpvar_21;
  tmpvar_25.y = tmpvar_22;
  tmpvar_25.z = tmpvar_23;
  tmpvar_25.w = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = dot (tmpvar_25, vec4(0.25, 0.25, 0.25, 0.25));
  atten_6 = (atten_6 * tmpvar_26);
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = tmpvar_10;
  lowp vec4 tmpvar_28;
  highp vec3 P_29;
  P_29 = (_LightMatrix0 * tmpvar_27).xyz;
  tmpvar_28 = textureCube (_LightTexture0, P_29);
  atten_6 = (atten_6 * tmpvar_28.w);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = pow (max (0.0, dot (h_4, tmpvar_31)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_33;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_31)
  ) * atten_6));
  mediump vec3 c_34;
  c_34 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_34, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_35;
  tmpvar_35 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_35);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 4295
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4296
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4297
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4298
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4299
    //MOV
    gl_Position = t0;
    //Instruction 4300
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4301
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 4302
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 4303
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 4304
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 4305
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4306
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4307
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4308
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 4309
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4310
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4311
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
bvec4 tb4;
highp vec4 t5;
mediump vec3 t16_6;
mediump float t16_7;
highp vec3 t8;
mediump float t16_8;
lowp float t10_8;
highp float t16;
mediump float t16_16;
lowp float t10_16;
highp float t24;
mediump float t16_30;
void main()
{
    //Instruction 4217
    //DIV
    t0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 4218
    //SAMPLE
    t16 = texture(_CameraDepthTexture, t0.xy).x;
    //Instruction 4219
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t0.xy);
    //Instruction 4220
    //MAD
    t0.x = _ZBufferParams.x * t16 + _ZBufferParams.y;
    //Instruction 4221
    //DIV
    t0.x = float(1.0) / t0.x;
    //Instruction 4222
    //DIV
    t8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 4223
    //MUL
    t8.xyz = t8.xxx * vs_TEXCOORD1.xyz;
    //Instruction 4224
    //MUL
    t2.xyz = t0.xxx * t8.xyz;
    //Instruction 4225
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 4226
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 4227
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 4228
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 4229
    //ADD
    t3.xyz = t2.xyw + (-_LightPos.xyz);
    //Instruction 4230
    //ADD
    t4.xyz = t3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    //Instruction 4231
    //SAMPLE
    t4 = texture(_ShadowMapTexture, t4.xyz);
    //Instruction 4232
    //DP4
    t4.x = dot(t4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4233
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    //Instruction 4234
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 4235
    //DP4
    t4.y = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4236
    //ADD
    t5.xyz = t3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    //Instruction 4237
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 4238
    //DP4
    t4.z = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4239
    //ADD
    t5.xyz = t3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    //Instruction 4240
    //SAMPLE
    t5 = texture(_ShadowMapTexture, t5.xyz);
    //Instruction 4241
    //DP4
    t4.w = dot(t5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    //Instruction 4242
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 4243
    //SQRT
    t16 = sqrt(t8.x);
    //Instruction 4244
    //MUL
    t16 = t16 * _LightPositionRange.w;
    //Instruction 4245
    //MUL
    t16 = t16 * 0.970000029;
    //Instruction 4246
    //LT
    tb4 = lessThan(t4, vec4(t16));
    //Instruction 4247
    //MOVC
    t4.x = (tb4.x) ? _LightShadowData.x : float(1.0);
    t4.y = (tb4.y) ? _LightShadowData.x : float(1.0);
    t4.z = (tb4.z) ? _LightShadowData.x : float(1.0);
    t4.w = (tb4.w) ? _LightShadowData.x : float(1.0);
    //Instruction 4248
    //DP4
    t16_6.x = dot(t4, vec4(0.25, 0.25, 0.25, 0.25));
    //Instruction 4249
    //MUL
    t16 = t8.x * _LightPos.w;
    //Instruction 4250
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 4251
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 4252
    //SAMPLE
    t10_8 = texture(_LightTextureB0, vec2(t16)).w;
    //Instruction 4253
    //MUL
    t16_8 = t16_6.x * t10_8;
    //Instruction 4254
    //MUL
    t4.xyz = t2.yyy * _LightMatrix0[1].xyz;
    //Instruction 4255
    //MAD
    t4.xyz = _LightMatrix0[0].xyz * t2.xxx + t4.xyz;
    //Instruction 4256
    //MAD
    t4.xyz = _LightMatrix0[2].xyz * t2.www + t4.xyz;
    //Instruction 4257
    //ADD
    t4.xyz = t4.xyz + _LightMatrix0[3].xyz;
    //Instruction 4258
    //SAMPLE
    t10_16 = texture(_LightTexture0, t4.xyz).w;
    //Instruction 4259
    //MUL
    t16_8 = t10_16 * t16_8;
    //Instruction 4260
    //MOV
    t16_16 = t16_8;
    t16_16 = clamp(t16_16, 0.0, 1.0);
    //Instruction 4261
    //ADD
    t4.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 4262
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 4263
    //DP3
    t2.x = dot(t2.xyw, t2.xyw);
    //Instruction 4264
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 4265
    //MAD
    t0.x = (-t8.z) * t0.x + t2.x;
    //Instruction 4266
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 4267
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 4268
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4269
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 4270
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 4271
    //MAD
    t2.xyz = (-t4.xyz) * vec3(t24) + (-t3.xyz);
    //Instruction 4272
    //DP3
    t24 = dot(t2.xyz, t2.xyz);
    //Instruction 4273
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 4274
    //MUL
    t2.xyz = vec3(t24) * t2.xyz;
    //Instruction 4275
    //MAD
    t16_6.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 4276
    //MUL
    t16_30 = t10_1.w * 128.0;
    //Instruction 4277
    //DP3
    t16_7 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 4278
    //RSQ
    t16_7 = inversesqrt(t16_7);
    //Instruction 4279
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_7);
    //Instruction 4280
    //DP3
    t16_7 = dot(t2.xyz, t16_6.xyz);
    //Instruction 4281
    //DP3
    t16_6.x = dot((-t3.xyz), t16_6.xyz);
    //Instruction 4282
    //MAX
    t16_6.x = max(t16_6.x, 0.0);
    //Instruction 4283
    //MUL
    t16_8 = t16_8 * t16_6.x;
    //Instruction 4284
    //MUL
    t1.yzw = vec3(t16_8) * _LightColor.xyz;
    //Instruction 4285
    //MAX
    t16_6.x = max(t16_7, 0.0);
    //Instruction 4286
    //LOG
    t16_6.x = log2(t16_6.x);
    //Instruction 4287
    //MUL
    t16_6.x = t16_6.x * t16_30;
    //Instruction 4288
    //EXP
    t16_6.x = exp2(t16_6.x);
    //Instruction 4289
    //MUL
    t16_8 = t16_16 * t16_6.x;
    //Instruction 4290
    //DP3
    t16_6.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 4291
    //MUL
    t1.x = t16_8 * t16_6.x;
    //Instruction 4292
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 4293
    //MOV
    SV_Target0 = t0;
    //Instruction 4294
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (0.0, dot (h_4, tmpvar_18)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_20;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_18)
  ) * atten_6));
  mediump vec3 c_21;
  c_21 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_21, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_22);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3079
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3080
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3081
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3082
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3083
    //MOV
    gl_Position = t0;
    //Instruction 3084
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3085
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3086
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3087
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3088
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3089
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3090
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3091
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3092
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3093
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 3094
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 3095
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp float t10_1;
highp vec4 t2;
lowp vec4 t10_2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp vec3 t6;
mediump float t16_10;
highp float t12;
highp float t13;
highp float t18;
mediump float t16_22;
void main()
{
    //Instruction 3030
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3031
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3032
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3033
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3034
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3035
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3036
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 3037
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3038
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3039
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3040
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3041
    //ADD
    t3.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3042
    //ADD
    t2.xyw = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3043
    //DP3
    t0.x = dot(t2.xyw, t2.xyw);
    //Instruction 3044
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3045
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 3046
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3047
    //DP3
    t6.x = dot(t3.xyz, t3.xyz);
    //Instruction 3048
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 3049
    //MAD
    t6.xyz = (-t3.xyz) * t6.xxx + (-_LightDir.xyz);
    //Instruction 3050
    //DP3
    t13 = dot(t6.xyz, t6.xyz);
    //Instruction 3051
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 3052
    //MUL
    t6.xyz = t6.xyz * vec3(t13);
    //Instruction 3053
    //SAMPLE
    t10_2 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 3054
    //SAMPLE
    t10_1 = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 3055
    //MAD
    t16_4.xyz = t10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3056
    //MUL
    t16_22 = t10_2.w * 128.0;
    //Instruction 3057
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3058
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3059
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3060
    //DP3
    t16_5 = dot(t6.xyz, t16_4.xyz);
    //Instruction 3061
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3062
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3063
    //MAX
    t16_10 = max(t16_5, 0.0);
    //Instruction 3064
    //LOG
    t16_10 = log2(t16_10);
    //Instruction 3065
    //MUL
    t16_10 = t16_10 * t16_22;
    //Instruction 3066
    //EXP
    t16_10 = exp2(t16_10);
    //Instruction 3067
    //MAD
    t6.x = t0.x * _LightShadowData.z + _LightShadowData.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 3068
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3069
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3070
    //ADD
    t6.x = t6.x + t10_1;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 3071
    //MUL
    t12 = t6.x * t16_10;
    //Instruction 3072
    //MUL
    t6.x = t6.x * t16_4.x;
    //Instruction 3073
    //MUL
    t1.yzw = t6.xxx * _LightColor.xyz;
    //Instruction 3074
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3075
    //MUL
    t1.x = t12 * t16_4.x;
    //Instruction 3076
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3077
    //MOV
    SV_Target0 = t0;
    //Instruction 3078
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp float _LightAsQuad;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_1.zw;
  tmpvar_2 = ((glstate_matrix_modelview0 * _glesVertex).xyz * vec3(-1.0, -1.0, 1.0));
  highp vec3 tmpvar_6;
  tmpvar_6 = mix (tmpvar_2, _glesNormal, vec3(_LightAsQuad));
  tmpvar_2 = tmpvar_6;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = o_3;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ZBufferParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform mediump vec4 unity_ColorSpaceLuminance;
uniform highp sampler2D _CameraDepthTexture;
uniform highp vec4 _LightDir;
uniform highp vec4 _LightColor;
uniform highp vec4 unity_LightmapFade;
uniform highp mat4 _CameraToWorld;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _CameraNormalsTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 res_2;
  highp float spec_3;
  mediump vec3 h_4;
  mediump vec4 nspec_5;
  highp float atten_6;
  mediump vec3 lightDir_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((xlv_TEXCOORD1 * (_ProjectionParams.z / xlv_TEXCOORD1.z)) * (1.0/((
    (_ZBufferParams.x * texture2D (_CameraDepthTexture, tmpvar_8).x)
   + _ZBufferParams.y))));
  highp vec3 tmpvar_10;
  tmpvar_10 = (_CameraToWorld * tmpvar_9).xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_12;
  tmpvar_12 = mix (tmpvar_9.z, sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = -(_LightDir.xyz);
  lightDir_7 = tmpvar_13;
  mediump float tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_8);
  highp float tmpvar_16;
  tmpvar_16 = clamp ((tmpvar_15.x + clamp (
    ((tmpvar_12 * _LightShadowData.z) + _LightShadowData.w)
  , 0.0, 1.0)), 0.0, 1.0);
  tmpvar_14 = tmpvar_16;
  atten_6 = tmpvar_14;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_10;
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (_LightMatrix0 * tmpvar_17).xy;
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  atten_6 = (atten_6 * tmpvar_18.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_CameraNormalsTexture, tmpvar_8);
  nspec_5 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = normalize(((nspec_5.xyz * 2.0) - 1.0));
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((lightDir_7 - normalize(
    (tmpvar_10 - _WorldSpaceCameraPos)
  )));
  h_4 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = pow (max (0.0, dot (h_4, tmpvar_21)), (nspec_5.w * 128.0));
  spec_3 = tmpvar_23;
  spec_3 = (spec_3 * clamp (atten_6, 0.0, 1.0));
  res_2.xyz = (_LightColor.xyz * (max (0.0, 
    dot (lightDir_7, tmpvar_21)
  ) * atten_6));
  mediump vec3 c_24;
  c_24 = _LightColor.xyz;
  res_2.w = (spec_3 * dot (c_24, unity_ColorSpaceLuminance.xyz));
  highp float tmpvar_25;
  tmpvar_25 = clamp ((1.0 - (
    (tmpvar_12 * unity_LightmapFade.z)
   + unity_LightmapFade.w)), 0.0, 1.0);
  res_2 = (res_2 * tmpvar_25);
  tmpvar_1 = res_2.wxyz;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
void main()
{
    //Instruction 3985
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3986
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3987
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3988
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3989
    //MOV
    gl_Position = t0;
    //Instruction 3990
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3991
    //MUL
    t1.xzw = t0.xwy * vec3(0.5, 0.5, 0.5);
    //Instruction 3992
    //MOV
    vs_TEXCOORD0.zw = t0.zw;
    //Instruction 3993
    //ADD
    vs_TEXCOORD0.xy = t1.zz + t1.xw;
    //Instruction 3994
    //MUL
    t0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 3995
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3996
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3997
    //MAD
    t0.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3998
    //MUL
    t1.xyz = t0.xyz * vec3(-1.0, -1.0, 1.0);
    //Instruction 3999
    //MAD
    t0.xyz = (-t0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    //Instruction 4000
    //MAD
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * t0.xyz + t1.xyz;
    //Instruction 4001
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	float _LightAsQuad;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	mat4 _CameraToWorld;
uniform 	mat4 _LightMatrix0;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
lowp vec4 t10_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump float t16_5;
highp float t6;
highp vec2 t12;
lowp float t10_12;
highp float t18;
mediump float t16_22;
void main()
{
    //Instruction 3929
    //DIV
    t0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    //Instruction 3930
    //MUL
    t0.xyz = t0.xxx * vs_TEXCOORD1.xyz;
    //Instruction 3931
    //DIV
    t1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    //Instruction 3932
    //SAMPLE
    t18 = texture(_CameraDepthTexture, t1.xy).x;
    //Instruction 3933
    //MAD
    t18 = _ZBufferParams.x * t18 + _ZBufferParams.y;
    //Instruction 3934
    //DIV
    t18 = float(1.0) / t18;
    //Instruction 3935
    //MUL
    t2.xyz = vec3(t18) * t0.xyz;
    //Instruction 3936
    //MUL
    t3.xyz = t2.yyy * _CameraToWorld[1].xyz;
    //Instruction 3937
    //MAD
    t2.xyw = _CameraToWorld[0].xyz * t2.xxx + t3.xyz;
    //Instruction 3938
    //MAD
    t2.xyw = _CameraToWorld[2].xyz * t2.zzz + t2.xyw;
    //Instruction 3939
    //ADD
    t2.xyw = t2.xyw + _CameraToWorld[3].xyz;
    //Instruction 3940
    //ADD
    t3.xyz = t2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    //Instruction 3941
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3942
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3943
    //MAD
    t0.x = (-t0.z) * t18 + t0.x;
    //Instruction 3944
    //MAD
    t0.x = unity_ShadowFadeCenterAndType.w * t0.x + t2.z;
    //Instruction 3945
    //MAD
    t6 = t0.x * _LightShadowData.z + _LightShadowData.w;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 3946
    //MAD
    t0.x = t0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    //Instruction 3947
    //ADD
    t0.x = (-t0.x) + 1.0;
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3948
    //SAMPLE
    t10_12 = texture(_ShadowMapTexture, t1.xy).x;
    //Instruction 3949
    //SAMPLE
    t10_1 = texture(_CameraNormalsTexture, t1.xy);
    //Instruction 3950
    //ADD
    t6 = t6 + t10_12;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 3951
    //MUL
    t12.xy = t2.yy * _LightMatrix0[1].xy;
    //Instruction 3952
    //MAD
    t12.xy = _LightMatrix0[0].xy * t2.xx + t12.xy;
    //Instruction 3953
    //MAD
    t12.xy = _LightMatrix0[2].xy * t2.ww + t12.xy;
    //Instruction 3954
    //ADD
    t2.xyz = t2.xyw + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3955
    //ADD
    t12.xy = t12.xy + _LightMatrix0[3].xy;
    //Instruction 3956
    //SAMPLE
    t10_12 = texture(_LightTexture0, t12.xy).w;
    //Instruction 3957
    //MUL
    t6 = t10_12 * t6;
    //Instruction 3958
    //MOV
    t12.x = t6;
    t12.x = clamp(t12.x, 0.0, 1.0);
    //Instruction 3959
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3960
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3961
    //MAD
    t2.xyz = (-t2.xyz) * vec3(t18) + (-_LightDir.xyz);
    //Instruction 3962
    //DP3
    t18 = dot(t2.xyz, t2.xyz);
    //Instruction 3963
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3964
    //MUL
    t2.xyz = vec3(t18) * t2.xyz;
    //Instruction 3965
    //MAD
    t16_4.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3966
    //MUL
    t16_22 = t10_1.w * 128.0;
    //Instruction 3967
    //DP3
    t16_5 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 3968
    //RSQ
    t16_5 = inversesqrt(t16_5);
    //Instruction 3969
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_5);
    //Instruction 3970
    //DP3
    t16_5 = dot(t2.xyz, t16_4.xyz);
    //Instruction 3971
    //DP3
    t16_4.x = dot((-_LightDir.xyz), t16_4.xyz);
    //Instruction 3972
    //MAX
    t16_4.x = max(t16_4.x, 0.0);
    //Instruction 3973
    //MUL
    t6 = t6 * t16_4.x;
    //Instruction 3974
    //MUL
    t1.yzw = vec3(t6) * _LightColor.xyz;
    //Instruction 3975
    //MAX
    t16_4.x = max(t16_5, 0.0);
    //Instruction 3976
    //LOG
    t16_4.x = log2(t16_4.x);
    //Instruction 3977
    //MUL
    t16_4.x = t16_4.x * t16_22;
    //Instruction 3978
    //EXP
    t16_4.x = exp2(t16_4.x);
    //Instruction 3979
    //MUL
    t6 = t12.x * t16_4.x;
    //Instruction 3980
    //DP3
    t16_4.x = dot(_LightColor.xyz, unity_ColorSpaceLuminance.xyz);
    //Instruction 3981
    //MUL
    t1.x = t6 * t16_4.x;
    //Instruction 3982
    //MUL
    t0 = t0.xxxx * t1;
    //Instruction 3983
    //MOV
    SV_Target0 = t0;
    //Instruction 3984
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
}
 }
}
Fallback Off
}
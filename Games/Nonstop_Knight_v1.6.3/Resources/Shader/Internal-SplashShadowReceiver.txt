Shader "Hidden/InternalSplashShadowReceiver" {
SubShader { 
 Pass {
  Cull Off
  GpuProgramID 50027
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesNormal;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_COLOR = _glesColor;
}


#endif
#ifdef FRAGMENT
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform highp mat4 unity_World2Shadow[4];
uniform sampler2D unity_SplashScreenShadowTex0;
uniform sampler2D unity_SplashScreenShadowTex1;
uniform sampler2D unity_SplashScreenShadowTex2;
uniform sampler2D unity_SplashScreenShadowTex3;
uniform sampler2D unity_SplashScreenShadowTex4;
uniform sampler2D unity_SplashScreenShadowTex5;
uniform sampler2D unity_SplashScreenShadowTex6;
uniform sampler2D unity_SplashScreenShadowTex7;
uniform sampler2D unity_SplashScreenShadowTex8;
uniform highp vec3 unity_LightPosition0;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD1;
  lowp float shadowedIntensity_3;
  highp float biasedDepth_5;
  highp int equationIndex_6;
  highp int equationMatrixIndex_7;
  lowp vec4 weightedShadowSample_8;
  highp vec4 planeShadows3_9;
  highp vec4 planeShadows2_10;
  highp vec4 planeShadows1_11;
  lowp vec4 shadowSample8_12;
  lowp vec4 shadowSample7_13;
  lowp vec4 shadowSample6_14;
  lowp vec4 shadowSample5_15;
  lowp vec4 shadowSample4_16;
  lowp vec4 shadowSample3_17;
  lowp vec4 shadowSample2_18;
  lowp vec4 shadowSample1_19;
  lowp vec4 shadowSample0_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_World2Shadow[0] * xlv_TEXCOORD1);
  highp vec2 tmpvar_22;
  tmpvar_22 = (((tmpvar_21.xy / tmpvar_21.w) * 0.5) + 0.5);
  shadowSample0_20 = texture2D (unity_SplashScreenShadowTex0, tmpvar_22);
  shadowSample1_19 = texture2D (unity_SplashScreenShadowTex1, tmpvar_22);
  shadowSample2_18 = texture2D (unity_SplashScreenShadowTex2, tmpvar_22);
  shadowSample3_17 = texture2D (unity_SplashScreenShadowTex3, tmpvar_22);
  shadowSample4_16 = texture2D (unity_SplashScreenShadowTex4, tmpvar_22);
  shadowSample5_15 = texture2D (unity_SplashScreenShadowTex5, tmpvar_22);
  shadowSample6_14 = texture2D (unity_SplashScreenShadowTex6, tmpvar_22);
  shadowSample7_13 = texture2D (unity_SplashScreenShadowTex7, tmpvar_22);
  shadowSample8_12 = texture2D (unity_SplashScreenShadowTex8, tmpvar_22);
  planeShadows1_11 = vec4(0.0, 0.0, 0.0, 0.0);
  planeShadows2_10 = vec4(0.0, 0.0, 0.0, 0.0);
  planeShadows3_9 = vec4(0.0, 0.0, 0.0, 0.0);
  equationMatrixIndex_7 = 1;
  equationIndex_6 = 0;
  for (highp int planeIndex_4 = 0; planeIndex_4 < 12; planeIndex_4++) {
    equationIndex_6 = planeIndex_4;
    if ((planeIndex_4 >= 8)) {
      equationMatrixIndex_7 = 3;
      equationIndex_6 = (planeIndex_4 - 8);
    } else {
      if ((planeIndex_4 >= 4)) {
        equationMatrixIndex_7 = 2;
        equationIndex_6 = (equationIndex_6 - 4);
      };
    };
    highp mat4 m_23;
    m_23 = unity_World2Shadow[equationMatrixIndex_7];
    highp vec4 v_24;
    v_24.x = m_23[0][equationIndex_6];
    v_24.y = m_23[1][equationIndex_6];
    v_24.z = m_23[2][equationIndex_6];
    v_24.w = m_23[3][equationIndex_6];
    biasedDepth_5 = (dot (v_24, tmpvar_2) - 1.0);
    if ((biasedDepth_5 > 0.0)) {
      highp float tmpvar_25;
      tmpvar_25 = clamp ((biasedDepth_5 * 0.5), 0.0, 1.0);
      highp float tmpvar_26;
      tmpvar_26 = clamp (((biasedDepth_5 - 2.0) / 48.0), 0.0, 1.0);
      highp float tmpvar_27;
      tmpvar_27 = (biasedDepth_5 * 0.25);
      highp float tmpvar_28;
      tmpvar_28 = clamp ((1.0 - tmpvar_27), 0.0, 1.0);
      highp float tmpvar_29;
      tmpvar_29 = clamp ((tmpvar_27 - 1.0), 0.0, 1.0);
      highp float tmpvar_30;
      tmpvar_30 = (1.0 - (tmpvar_28 + tmpvar_29));
      if ((equationMatrixIndex_7 == 1)) {
        weightedShadowSample_8 = (((shadowSample0_20 * tmpvar_28) + (shadowSample1_19 * tmpvar_30)) + (shadowSample2_18 * tmpvar_29));
        planeShadows1_11[equationIndex_6] = (((
          weightedShadowSample_8[equationIndex_6]
         * tmpvar_25) - tmpvar_26) * (1.0 + tmpvar_26));
      } else {
        if ((equationMatrixIndex_7 == 2)) {
          weightedShadowSample_8 = (((shadowSample3_17 * tmpvar_28) + (shadowSample4_16 * tmpvar_30)) + (shadowSample5_15 * tmpvar_29));
          planeShadows2_10[equationIndex_6] = (((
            weightedShadowSample_8[equationIndex_6]
           * tmpvar_25) - tmpvar_26) * (1.0 + tmpvar_26));
        } else {
          weightedShadowSample_8 = (((shadowSample6_14 * tmpvar_28) + (shadowSample7_13 * tmpvar_30)) + (shadowSample8_12 * tmpvar_29));
          planeShadows3_9[equationIndex_6] = (((
            weightedShadowSample_8[equationIndex_6]
           * tmpvar_25) - tmpvar_26) * (1.0 + tmpvar_26));
        };
      };
    };
  };
  highp float tmpvar_31;
  tmpvar_31 = (pow (clamp (
    dot (xlv_TEXCOORD0, normalize((unity_LightPosition0 - xlv_TEXCOORD1.xyz)))
  , 0.0, 1.0), 3.0) * (1.0 - clamp (
    max (max (max (max (planeShadows1_11.x, planeShadows1_11.y), max (planeShadows1_11.z, planeShadows1_11.w)), max (max (planeShadows2_10.x, planeShadows2_10.y), max (planeShadows2_10.z, planeShadows2_10.w))), max (max (planeShadows3_9.x, planeShadows3_9.y), max (planeShadows3_9.z, planeShadows3_9.w)))
  , 0.0, 1.0)));
  shadowedIntensity_3 = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = mix (unity_LightColor1, unity_LightColor0, vec3(shadowedIntensity_3));
  tmpvar_1 = (tmpvar_32 * xlv_COLOR);
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	vec3 unity_LightPosition0;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in lowp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
void main()
{
    //Instruction 517
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 518
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 519
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 520
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 521
    //MOV
    vs_TEXCOORD0.xyz = in_NORMAL0.xyz;
    //Instruction 522
    //MOV
    vs_TEXCOORD1.xyz = in_POSITION0.xyz;
    //Instruction 523
    //MOV
    vs_TEXCOORD1.w = 1.0;
    //Instruction 524
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 525
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	vec3 unity_LightPosition0;
uniform lowp sampler2D unity_SplashScreenShadowTex0;
uniform lowp sampler2D unity_SplashScreenShadowTex1;
uniform lowp sampler2D unity_SplashScreenShadowTex2;
uniform lowp sampler2D unity_SplashScreenShadowTex3;
uniform lowp sampler2D unity_SplashScreenShadowTex4;
uniform lowp sampler2D unity_SplashScreenShadowTex5;
uniform lowp sampler2D unity_SplashScreenShadowTex6;
uniform lowp sampler2D unity_SplashScreenShadowTex7;
uniform lowp sampler2D unity_SplashScreenShadowTex8;
in highp vec3 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
lowp vec4 t10_2;
lowp vec4 t10_3;
lowp vec4 t10_4;
lowp vec4 t10_5;
mediump vec3 t16_6;
highp vec3 t7;
highp float t8;
highp float t14;
highp float t15;
bool tb15;
highp float t16;
highp float t21;
bool tb21;
highp float t22;
void main()
{
    //Instruction 237
    //MOV
    t0.x = unity_World2Shadow[1][0].x;
    //Instruction 238
    //MOV
    t0.y = unity_World2Shadow[1][1].x;
    //Instruction 239
    //MOV
    t0.z = unity_World2Shadow[1][2].x;
    //Instruction 240
    //MOV
    t0.w = unity_World2Shadow[1][3].x;
    //Instruction 241
    //DP4
    t0.x = dot(t0, vs_TEXCOORD1);
    //Instruction 242
    //ADD
    t0.xyz = t0.xxx + vec3(-1.0, -3.000000, -1.0);
    //Instruction 243
    //LT
    tb21 = 0.0<t0.z;
    //Instruction 244
    //MUL
    t0.xy = t0.xy * vec2(0.500000, 0.020833);
    //Instruction 245
    //MOV
    t0.xy = t0.xy;
    t0.xy = clamp(t0.xy, 0.0, 1.0);
    //Instruction 246
    //ADD
    t1.x = t0.y + 1.0;
    //Instruction 247
    //MAD
    t8 = t0.z * 0.250000 + -1.0;
    t8 = clamp(t8, 0.0, 1.0);
    //Instruction 248
    //MAD
    t14 = (-t0.z) * 0.250000 + 1.0;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 249
    //ADD
    t15 = t8 + t14;
    //Instruction 250
    //ADD
    t15 = (-t15) + 1.0;
    //Instruction 251
    //MUL
    t2.xyz = vs_TEXCOORD1.yyy * unity_World2Shadow[0][1].xyw;
    //Instruction 252
    //MAD
    t2.xyz = unity_World2Shadow[0][0].xyw * vs_TEXCOORD1.xxx + t2.xyz;
    //Instruction 253
    //MAD
    t2.xyz = unity_World2Shadow[0][2].xyw * vs_TEXCOORD1.zzz + t2.xyz;
    //Instruction 254
    //MAD
    t2.xyz = unity_World2Shadow[0][3].xyw * vs_TEXCOORD1.www + t2.xyz;
    //Instruction 255
    //DIV
    t2.xy = t2.xy / t2.zz;
    //Instruction 256
    //MAD
    t2.xy = t2.xy * vec2(0.500000, 0.500000) + vec2(0.500000, 0.500000);
    //Instruction 257
    //SAMPLE
    t10_3 = texture(unity_SplashScreenShadowTex1, t2.xy);
    //Instruction 258
    //MUL
    t15 = t15 * t10_3.x;
    //Instruction 259
    //SAMPLE
    t10_4 = texture(unity_SplashScreenShadowTex0, t2.xy);
    //Instruction 260
    //MAD
    t14 = t10_4.x * t14 + t15;
    //Instruction 261
    //SAMPLE
    t10_5 = texture(unity_SplashScreenShadowTex2, t2.xy);
    //Instruction 262
    //MAD
    t14 = t10_5.x * t8 + t14;
    //Instruction 263
    //MAD
    t0.x = t14 * t0.x + (-t0.y);
    //Instruction 264
    //MUL
    t0.x = t1.x * t0.x;
    //Instruction 265
    //AND
    t0.x = tb21 ? t0.x : float(0.0);
    //Instruction 266
    //MOV
    t1.x = unity_World2Shadow[1][0].y;
    //Instruction 267
    //MOV
    t1.y = unity_World2Shadow[1][1].y;
    //Instruction 268
    //MOV
    t1.z = unity_World2Shadow[1][2].y;
    //Instruction 269
    //MOV
    t1.w = unity_World2Shadow[1][3].y;
    //Instruction 270
    //DP4
    t7.x = dot(t1, vs_TEXCOORD1);
    //Instruction 271
    //ADD
    t7.xyz = t7.xxx + vec3(-1.0, -3.000000, -1.0);
    //Instruction 272
    //MAD
    t1.x = (-t7.z) * 0.250000 + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 273
    //MAD
    t8 = t7.z * 0.250000 + -1.0;
    t8 = clamp(t8, 0.0, 1.0);
    //Instruction 274
    //ADD
    t15 = t8 + t1.x;
    //Instruction 275
    //ADD
    t15 = (-t15) + 1.0;
    //Instruction 276
    //MUL
    t15 = t15 * t10_3.y;
    //Instruction 277
    //MAD
    t1.x = t10_4.y * t1.x + t15;
    //Instruction 278
    //MAD
    t1.x = t10_5.y * t8 + t1.x;
    //Instruction 279
    //MUL
    t7.xy = t7.xy * vec2(0.500000, 0.020833);
    //Instruction 280
    //LT
    tb21 = 0.0<t7.z;
    //Instruction 281
    //MOV
    t7.xy = t7.xy;
    t7.xy = clamp(t7.xy, 0.0, 1.0);
    //Instruction 282
    //MAD
    t7.x = t1.x * t7.x + (-t7.y);
    //Instruction 283
    //ADD
    t14 = t7.y + 1.0;
    //Instruction 284
    //MUL
    t7.x = t14 * t7.x;
    //Instruction 285
    //AND
    t7.x = tb21 ? t7.x : float(0.0);
    //Instruction 286
    //MAX
    t0.x = max(t7.x, t0.x);
    //Instruction 287
    //MOV
    t1.x = unity_World2Shadow[1][0].z;
    //Instruction 288
    //MOV
    t1.y = unity_World2Shadow[1][1].z;
    //Instruction 289
    //MOV
    t1.z = unity_World2Shadow[1][2].z;
    //Instruction 290
    //MOV
    t1.w = unity_World2Shadow[1][3].z;
    //Instruction 291
    //DP4
    t7.x = dot(t1, vs_TEXCOORD1);
    //Instruction 292
    //ADD
    t7.xyz = t7.xxx + vec3(-1.0, -3.000000, -1.0);
    //Instruction 293
    //MAD
    t1.x = (-t7.z) * 0.250000 + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 294
    //MAD
    t8 = t7.z * 0.250000 + -1.0;
    t8 = clamp(t8, 0.0, 1.0);
    //Instruction 295
    //ADD
    t15 = t8 + t1.x;
    //Instruction 296
    //ADD
    t15 = (-t15) + 1.0;
    //Instruction 297
    //MUL
    t15 = t15 * t10_3.z;
    //Instruction 298
    //MAD
    t1.x = t10_4.z * t1.x + t15;
    //Instruction 299
    //MAD
    t1.x = t10_5.z * t8 + t1.x;
    //Instruction 300
    //MUL
    t7.xy = t7.xy * vec2(0.500000, 0.020833);
    //Instruction 301
    //LT
    tb21 = 0.0<t7.z;
    //Instruction 302
    //MOV
    t7.xy = t7.xy;
    t7.xy = clamp(t7.xy, 0.0, 1.0);
    //Instruction 303
    //MAD
    t7.x = t1.x * t7.x + (-t7.y);
    //Instruction 304
    //ADD
    t14 = t7.y + 1.0;
    //Instruction 305
    //MUL
    t7.x = t14 * t7.x;
    //Instruction 306
    //AND
    t7.x = tb21 ? t7.x : float(0.0);
    //Instruction 307
    //MOV
    t1.x = unity_World2Shadow[1][0].w;
    //Instruction 308
    //MOV
    t1.y = unity_World2Shadow[1][1].w;
    //Instruction 309
    //MOV
    t1.z = unity_World2Shadow[1][2].w;
    //Instruction 310
    //MOV
    t1.w = unity_World2Shadow[1][3].w;
    //Instruction 311
    //DP4
    t14 = dot(t1, vs_TEXCOORD1);
    //Instruction 312
    //ADD
    t1.xyz = vec3(t14) + vec3(-1.0, -3.000000, -1.0);
    //Instruction 313
    //MAD
    t14 = (-t1.z) * 0.250000 + 1.0;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 314
    //MAD
    t21 = t1.z * 0.250000 + -1.0;
    t21 = clamp(t21, 0.0, 1.0);
    //Instruction 315
    //ADD
    t22 = t21 + t14;
    //Instruction 316
    //ADD
    t22 = (-t22) + 1.0;
    //Instruction 317
    //MUL
    t22 = t22 * t10_3.w;
    //Instruction 318
    //MAD
    t14 = t10_4.w * t14 + t22;
    //Instruction 319
    //MAD
    t14 = t10_5.w * t21 + t14;
    //Instruction 320
    //MUL
    t1.xy = t1.xy * vec2(0.500000, 0.020833);
    //Instruction 321
    //LT
    tb21 = 0.0<t1.z;
    //Instruction 322
    //MOV
    t1.xy = t1.xy;
    t1.xy = clamp(t1.xy, 0.0, 1.0);
    //Instruction 323
    //MAD
    t14 = t14 * t1.x + (-t1.y);
    //Instruction 324
    //ADD
    t1.x = t1.y + 1.0;
    //Instruction 325
    //MUL
    t14 = t14 * t1.x;
    //Instruction 326
    //AND
    t14 = tb21 ? t14 : float(0.0);
    //Instruction 327
    //MAX
    t7.x = max(t14, t7.x);
    //Instruction 328
    //MAX
    t0.x = max(t7.x, t0.x);
    //Instruction 329
    //MOV
    t1.x = unity_World2Shadow[2][0].x;
    //Instruction 330
    //MOV
    t1.y = unity_World2Shadow[2][1].x;
    //Instruction 331
    //MOV
    t1.z = unity_World2Shadow[2][2].x;
    //Instruction 332
    //MOV
    t1.w = unity_World2Shadow[2][3].x;
    //Instruction 333
    //DP4
    t7.x = dot(t1, vs_TEXCOORD1);
    //Instruction 334
    //ADD
    t7.xyz = t7.xxx + vec3(-1.0, -3.000000, -1.0);
    //Instruction 335
    //MAD
    t1.x = (-t7.z) * 0.250000 + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 336
    //MAD
    t8 = t7.z * 0.250000 + -1.0;
    t8 = clamp(t8, 0.0, 1.0);
    //Instruction 337
    //ADD
    t15 = t8 + t1.x;
    //Instruction 338
    //ADD
    t15 = (-t15) + 1.0;
    //Instruction 339
    //SAMPLE
    t10_3 = texture(unity_SplashScreenShadowTex4, t2.xy);
    //Instruction 340
    //MUL
    t15 = t15 * t10_3.x;
    //Instruction 341
    //SAMPLE
    t10_4 = texture(unity_SplashScreenShadowTex3, t2.xy);
    //Instruction 342
    //MAD
    t1.x = t10_4.x * t1.x + t15;
    //Instruction 343
    //SAMPLE
    t10_5 = texture(unity_SplashScreenShadowTex5, t2.xy);
    //Instruction 344
    //MAD
    t1.x = t10_5.x * t8 + t1.x;
    //Instruction 345
    //MUL
    t7.xy = t7.xy * vec2(0.500000, 0.020833);
    //Instruction 346
    //LT
    tb21 = 0.0<t7.z;
    //Instruction 347
    //MOV
    t7.xy = t7.xy;
    t7.xy = clamp(t7.xy, 0.0, 1.0);
    //Instruction 348
    //MAD
    t7.x = t1.x * t7.x + (-t7.y);
    //Instruction 349
    //ADD
    t14 = t7.y + 1.0;
    //Instruction 350
    //MUL
    t7.x = t14 * t7.x;
    //Instruction 351
    //AND
    t7.x = tb21 ? t7.x : float(0.0);
    //Instruction 352
    //MOV
    t1.x = unity_World2Shadow[2][0].y;
    //Instruction 353
    //MOV
    t1.y = unity_World2Shadow[2][1].y;
    //Instruction 354
    //MOV
    t1.z = unity_World2Shadow[2][2].y;
    //Instruction 355
    //MOV
    t1.w = unity_World2Shadow[2][3].y;
    //Instruction 356
    //DP4
    t14 = dot(t1, vs_TEXCOORD1);
    //Instruction 357
    //ADD
    t1.xyz = vec3(t14) + vec3(-1.0, -3.000000, -1.0);
    //Instruction 358
    //MAD
    t14 = (-t1.z) * 0.250000 + 1.0;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 359
    //MAD
    t21 = t1.z * 0.250000 + -1.0;
    t21 = clamp(t21, 0.0, 1.0);
    //Instruction 360
    //ADD
    t22 = t21 + t14;
    //Instruction 361
    //ADD
    t22 = (-t22) + 1.0;
    //Instruction 362
    //MUL
    t22 = t22 * t10_3.y;
    //Instruction 363
    //MAD
    t14 = t10_4.y * t14 + t22;
    //Instruction 364
    //MAD
    t14 = t10_5.y * t21 + t14;
    //Instruction 365
    //MUL
    t1.xy = t1.xy * vec2(0.500000, 0.020833);
    //Instruction 366
    //LT
    tb21 = 0.0<t1.z;
    //Instruction 367
    //MOV
    t1.xy = t1.xy;
    t1.xy = clamp(t1.xy, 0.0, 1.0);
    //Instruction 368
    //MAD
    t14 = t14 * t1.x + (-t1.y);
    //Instruction 369
    //ADD
    t1.x = t1.y + 1.0;
    //Instruction 370
    //MUL
    t14 = t14 * t1.x;
    //Instruction 371
    //AND
    t14 = tb21 ? t14 : float(0.0);
    //Instruction 372
    //MAX
    t7.x = max(t14, t7.x);
    //Instruction 373
    //MOV
    t1.x = unity_World2Shadow[2][0].z;
    //Instruction 374
    //MOV
    t1.y = unity_World2Shadow[2][1].z;
    //Instruction 375
    //MOV
    t1.z = unity_World2Shadow[2][2].z;
    //Instruction 376
    //MOV
    t1.w = unity_World2Shadow[2][3].z;
    //Instruction 377
    //DP4
    t14 = dot(t1, vs_TEXCOORD1);
    //Instruction 378
    //ADD
    t1.xyz = vec3(t14) + vec3(-1.0, -3.000000, -1.0);
    //Instruction 379
    //MAD
    t14 = (-t1.z) * 0.250000 + 1.0;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 380
    //MAD
    t21 = t1.z * 0.250000 + -1.0;
    t21 = clamp(t21, 0.0, 1.0);
    //Instruction 381
    //ADD
    t22 = t21 + t14;
    //Instruction 382
    //ADD
    t22 = (-t22) + 1.0;
    //Instruction 383
    //MUL
    t22 = t22 * t10_3.z;
    //Instruction 384
    //MAD
    t14 = t10_4.z * t14 + t22;
    //Instruction 385
    //MAD
    t14 = t10_5.z * t21 + t14;
    //Instruction 386
    //MUL
    t1.xy = t1.xy * vec2(0.500000, 0.020833);
    //Instruction 387
    //LT
    tb21 = 0.0<t1.z;
    //Instruction 388
    //MOV
    t1.xy = t1.xy;
    t1.xy = clamp(t1.xy, 0.0, 1.0);
    //Instruction 389
    //MAD
    t14 = t14 * t1.x + (-t1.y);
    //Instruction 390
    //ADD
    t1.x = t1.y + 1.0;
    //Instruction 391
    //MUL
    t14 = t14 * t1.x;
    //Instruction 392
    //AND
    t14 = tb21 ? t14 : float(0.0);
    //Instruction 393
    //MOV
    t1.x = unity_World2Shadow[2][0].w;
    //Instruction 394
    //MOV
    t1.y = unity_World2Shadow[2][1].w;
    //Instruction 395
    //MOV
    t1.z = unity_World2Shadow[2][2].w;
    //Instruction 396
    //MOV
    t1.w = unity_World2Shadow[2][3].w;
    //Instruction 397
    //DP4
    t21 = dot(t1, vs_TEXCOORD1);
    //Instruction 398
    //ADD
    t1.xyz = vec3(t21) + vec3(-1.0, -3.000000, -1.0);
    //Instruction 399
    //MAD
    t21 = (-t1.z) * 0.250000 + 1.0;
    t21 = clamp(t21, 0.0, 1.0);
    //Instruction 400
    //MAD
    t22 = t1.z * 0.250000 + -1.0;
    t22 = clamp(t22, 0.0, 1.0);
    //Instruction 401
    //ADD
    t16 = t21 + t22;
    //Instruction 402
    //ADD
    t16 = (-t16) + 1.0;
    //Instruction 403
    //MUL
    t16 = t16 * t10_3.w;
    //Instruction 404
    //MAD
    t21 = t10_4.w * t21 + t16;
    //Instruction 405
    //MAD
    t21 = t10_5.w * t22 + t21;
    //Instruction 406
    //MUL
    t1.xy = t1.xy * vec2(0.500000, 0.020833);
    //Instruction 407
    //LT
    tb15 = 0.0<t1.z;
    //Instruction 408
    //MOV
    t1.xy = t1.xy;
    t1.xy = clamp(t1.xy, 0.0, 1.0);
    //Instruction 409
    //MAD
    t21 = t21 * t1.x + (-t1.y);
    //Instruction 410
    //ADD
    t1.x = t1.y + 1.0;
    //Instruction 411
    //MUL
    t21 = t21 * t1.x;
    //Instruction 412
    //AND
    t21 = tb15 ? t21 : float(0.0);
    //Instruction 413
    //MAX
    t14 = max(t21, t14);
    //Instruction 414
    //MAX
    t7.x = max(t14, t7.x);
    //Instruction 415
    //MAX
    t0.x = max(t7.x, t0.x);
    //Instruction 416
    //MOV
    t1.x = unity_World2Shadow[3][0].x;
    //Instruction 417
    //MOV
    t1.y = unity_World2Shadow[3][1].x;
    //Instruction 418
    //MOV
    t1.z = unity_World2Shadow[3][2].x;
    //Instruction 419
    //MOV
    t1.w = unity_World2Shadow[3][3].x;
    //Instruction 420
    //DP4
    t7.x = dot(t1, vs_TEXCOORD1);
    //Instruction 421
    //ADD
    t7.xyz = t7.xxx + vec3(-1.0, -3.000000, -1.0);
    //Instruction 422
    //MAD
    t1.x = (-t7.z) * 0.250000 + 1.0;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 423
    //MAD
    t8 = t7.z * 0.250000 + -1.0;
    t8 = clamp(t8, 0.0, 1.0);
    //Instruction 424
    //ADD
    t15 = t8 + t1.x;
    //Instruction 425
    //ADD
    t15 = (-t15) + 1.0;
    //Instruction 426
    //SAMPLE
    t10_3 = texture(unity_SplashScreenShadowTex7, t2.xy);
    //Instruction 427
    //MUL
    t15 = t15 * t10_3.x;
    //Instruction 428
    //SAMPLE
    t10_4 = texture(unity_SplashScreenShadowTex6, t2.xy);
    //Instruction 429
    //SAMPLE
    t10_2 = texture(unity_SplashScreenShadowTex8, t2.xy);
    //Instruction 430
    //MAD
    t1.x = t10_4.x * t1.x + t15;
    //Instruction 431
    //MAD
    t1.x = t10_2.x * t8 + t1.x;
    //Instruction 432
    //MUL
    t7.xy = t7.xy * vec2(0.500000, 0.020833);
    //Instruction 433
    //LT
    tb21 = 0.0<t7.z;
    //Instruction 434
    //MOV
    t7.xy = t7.xy;
    t7.xy = clamp(t7.xy, 0.0, 1.0);
    //Instruction 435
    //MAD
    t7.x = t1.x * t7.x + (-t7.y);
    //Instruction 436
    //ADD
    t14 = t7.y + 1.0;
    //Instruction 437
    //MUL
    t7.x = t14 * t7.x;
    //Instruction 438
    //AND
    t7.x = tb21 ? t7.x : float(0.0);
    //Instruction 439
    //MOV
    t1.x = unity_World2Shadow[3][0].y;
    //Instruction 440
    //MOV
    t1.y = unity_World2Shadow[3][1].y;
    //Instruction 441
    //MOV
    t1.z = unity_World2Shadow[3][2].y;
    //Instruction 442
    //MOV
    t1.w = unity_World2Shadow[3][3].y;
    //Instruction 443
    //DP4
    t14 = dot(t1, vs_TEXCOORD1);
    //Instruction 444
    //ADD
    t1.xyz = vec3(t14) + vec3(-1.0, -3.000000, -1.0);
    //Instruction 445
    //MAD
    t14 = (-t1.z) * 0.250000 + 1.0;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 446
    //MAD
    t21 = t1.z * 0.250000 + -1.0;
    t21 = clamp(t21, 0.0, 1.0);
    //Instruction 447
    //ADD
    t22 = t21 + t14;
    //Instruction 448
    //ADD
    t22 = (-t22) + 1.0;
    //Instruction 449
    //MUL
    t22 = t22 * t10_3.y;
    //Instruction 450
    //MAD
    t14 = t10_4.y * t14 + t22;
    //Instruction 451
    //MAD
    t14 = t10_2.y * t21 + t14;
    //Instruction 452
    //MUL
    t1.xy = t1.xy * vec2(0.500000, 0.020833);
    //Instruction 453
    //LT
    tb21 = 0.0<t1.z;
    //Instruction 454
    //MOV
    t1.xy = t1.xy;
    t1.xy = clamp(t1.xy, 0.0, 1.0);
    //Instruction 455
    //MAD
    t14 = t14 * t1.x + (-t1.y);
    //Instruction 456
    //ADD
    t1.x = t1.y + 1.0;
    //Instruction 457
    //MUL
    t14 = t14 * t1.x;
    //Instruction 458
    //AND
    t14 = tb21 ? t14 : float(0.0);
    //Instruction 459
    //MAX
    t7.x = max(t14, t7.x);
    //Instruction 460
    //MOV
    t1.x = unity_World2Shadow[3][0].z;
    //Instruction 461
    //MOV
    t1.y = unity_World2Shadow[3][1].z;
    //Instruction 462
    //MOV
    t1.z = unity_World2Shadow[3][2].z;
    //Instruction 463
    //MOV
    t1.w = unity_World2Shadow[3][3].z;
    //Instruction 464
    //DP4
    t14 = dot(t1, vs_TEXCOORD1);
    //Instruction 465
    //ADD
    t1.xyz = vec3(t14) + vec3(-1.0, -3.000000, -1.0);
    //Instruction 466
    //MAD
    t14 = (-t1.z) * 0.250000 + 1.0;
    t14 = clamp(t14, 0.0, 1.0);
    //Instruction 467
    //MAD
    t21 = t1.z * 0.250000 + -1.0;
    t21 = clamp(t21, 0.0, 1.0);
    //Instruction 468
    //ADD
    t22 = t21 + t14;
    //Instruction 469
    //ADD
    t22 = (-t22) + 1.0;
    //Instruction 470
    //MUL
    t22 = t22 * t10_3.z;
    //Instruction 471
    //MAD
    t14 = t10_4.z * t14 + t22;
    //Instruction 472
    //MAD
    t14 = t10_2.z * t21 + t14;
    //Instruction 473
    //MUL
    t1.xy = t1.xy * vec2(0.500000, 0.020833);
    //Instruction 474
    //LT
    tb21 = 0.0<t1.z;
    //Instruction 475
    //MOV
    t1.xy = t1.xy;
    t1.xy = clamp(t1.xy, 0.0, 1.0);
    //Instruction 476
    //MAD
    t14 = t14 * t1.x + (-t1.y);
    //Instruction 477
    //ADD
    t1.x = t1.y + 1.0;
    //Instruction 478
    //MUL
    t14 = t14 * t1.x;
    //Instruction 479
    //AND
    t14 = tb21 ? t14 : float(0.0);
    //Instruction 480
    //MOV
    t1.x = unity_World2Shadow[3][0].w;
    //Instruction 481
    //MOV
    t1.y = unity_World2Shadow[3][1].w;
    //Instruction 482
    //MOV
    t1.z = unity_World2Shadow[3][2].w;
    //Instruction 483
    //MOV
    t1.w = unity_World2Shadow[3][3].w;
    //Instruction 484
    //DP4
    t21 = dot(t1, vs_TEXCOORD1);
    //Instruction 485
    //ADD
    t1.xyz = vec3(t21) + vec3(-1.0, -3.000000, -1.0);
    //Instruction 486
    //MAD
    t21 = (-t1.z) * 0.250000 + 1.0;
    t21 = clamp(t21, 0.0, 1.0);
    //Instruction 487
    //MAD
    t22 = t1.z * 0.250000 + -1.0;
    t22 = clamp(t22, 0.0, 1.0);
    //Instruction 488
    //ADD
    t2.x = t21 + t22;
    //Instruction 489
    //ADD
    t2.x = (-t2.x) + 1.0;
    //Instruction 490
    //MUL
    t2.x = t2.x * t10_3.w;
    //Instruction 491
    //MAD
    t21 = t10_4.w * t21 + t2.x;
    //Instruction 492
    //MAD
    t21 = t10_2.w * t22 + t21;
    //Instruction 493
    //MUL
    t1.xy = t1.xy * vec2(0.500000, 0.020833);
    //Instruction 494
    //LT
    tb15 = 0.0<t1.z;
    //Instruction 495
    //MOV
    t1.xy = t1.xy;
    t1.xy = clamp(t1.xy, 0.0, 1.0);
    //Instruction 496
    //MAD
    t21 = t21 * t1.x + (-t1.y);
    //Instruction 497
    //ADD
    t1.x = t1.y + 1.0;
    //Instruction 498
    //MUL
    t21 = t21 * t1.x;
    //Instruction 499
    //AND
    t21 = tb15 ? t21 : float(0.0);
    //Instruction 500
    //MAX
    t14 = max(t21, t14);
    //Instruction 501
    //MAX
    t7.x = max(t14, t7.x);
    //Instruction 502
    //MAX
    t0.x = max(t7.x, t0.x);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 503
    //ADD
    t0.x = (-t0.x) + 1.0;
    //Instruction 504
    //ADD
    t7.xyz = (-vs_TEXCOORD1.xyz) + unity_LightPosition0.xyzx.xyz;
    //Instruction 505
    //DP3
    t1.x = dot(t7.xyz, t7.xyz);
    //Instruction 506
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 507
    //MUL
    t7.xyz = t7.xyz * t1.xxx;
    //Instruction 508
    //DP3
    t7.x = dot(vs_TEXCOORD0.xyz, t7.xyz);
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 509
    //MUL
    t14 = t7.x * t7.x;
    //Instruction 510
    //MUL
    t7.x = t14 * t7.x;
    //Instruction 511
    //MUL
    t0.x = t0.x * t7.x;
    //Instruction 512
    //ADD
    t16_6.xyz = unity_LightColor0.xyzx.xyz + (-unity_LightColor1.xyzx.xyz);
    //Instruction 513
    //MAD
    t16_6.xyz = t0.xxx * t16_6.xyz + unity_LightColor1.xyzx.xyz;
    //Instruction 514
    //MUL
    SV_Target0.xyz = t16_6.xyz * vs_COLOR0.xyz;
    //Instruction 515
    //MOV
    SV_Target0.w = vs_COLOR0.w;
    //Instruction 516
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
Fallback Off
}
Shader "CUSTOM/Menu_Helmet_DiffuseWrap" {
Properties {
 _MainTex ("Diffuse (RGB)", 2D) = "white" { }
 _AmbientColor ("Ambient color", Color) = (1,1,1,1)
 _LightColor ("Light color", Color) = (1,1,1,1)
 _LightPosWorldSpace ("Light pos (world space)", Vector) = (1,0,0,0)
 _AuxColor ("Aux color", Color) = (1,1,1,1)
}
SubShader { 
 LOD 100
 Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  GpuProgramID 7031
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform lowp vec4 _AmbientColor;
uniform lowp vec4 _LightColor;
uniform highp vec4 _LightPosWorldSpace;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_COLOR;
void main ()
{
  mediump float diff_1;
  lowp vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp float tmpvar_6;
  tmpvar_6 = ((dot (
    normalize((((v_3.xyz * _glesNormal.x) + (v_4.xyz * _glesNormal.y)) + (v_5.xyz * _glesNormal.z)))
  , 
    normalize(_LightPosWorldSpace)
  .xyz) * 0.5) + 0.5);
  diff_1 = tmpvar_6;
  tmpvar_2 = (_AmbientColor.xyz + ((_LightColor.xyz * diff_1) * 2.0));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_COLOR;
void main ()
{
  lowp vec4 color_1;
  color_1.xyz = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * xlv_COLOR);
  color_1.w = 1.0;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _AuxColor;
uniform 	lowp vec4 _AmbientColor;
uniform 	lowp vec4 _LightColor;
uniform 	vec4 _LightPosWorldSpace;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out lowp vec3 vs_COLOR0;
highp vec4 t0;
highp vec3 t1;
mediump vec3 t16_2;
highp float t9;
void main()
{
    //Instruction 2303
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2304
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2305
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2306
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2307
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2308
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2309
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2310
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2311
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2312
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2313
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2314
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2315
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2316
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2317
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2318
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2319
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 2320
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 2321
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 2322
    //DP4
    t9 = dot(_LightPosWorldSpace, _LightPosWorldSpace);
    //Instruction 2323
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 2324
    //MUL
    t1.xyz = vec3(t9) * _LightPosWorldSpace.xyz;
    //Instruction 2325
    //DP3
    t0.x = dot(t0.xyz, t1.xyz);
    //Instruction 2326
    //MAD
    t0.x = t0.x * 0.5 + 0.5;
    //Instruction 2327
    //MUL
    t16_2.xyz = t0.xxx * _LightColor.xyz;
    //Instruction 2328
    //ADD
    t16_2.xyz = t16_2.xyz + t16_2.xyz;
    //Instruction 2329
    //ADD
    t16_2.xyz = t16_2.xyz + _AmbientColor.xyz;
    //Instruction 2330
    //MOV
    vs_COLOR0.xyz = t16_2.xyz;
    //Instruction 2331
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in lowp vec3 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec3 t10_0;
void main()
{
    //Instruction 2299
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2300
    //MUL
    SV_Target0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 2301
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2302
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
}